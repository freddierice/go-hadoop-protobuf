// Code generated by protoc-gen-go.
// source: gopkg.in/freddierice/go-hproto.v1/mapreduce/MRClientProtocol.proto
// DO NOT EDIT!

package hproto_mapreduce

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import hproto_common "gopkg.in/freddierice/go-hproto.v1/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for MRClientProtocolService service

type MRClientProtocolServiceClient interface {
	GetJobReport(ctx context.Context, in *GetJobReportRequestProto, opts ...grpc.CallOption) (*GetJobReportResponseProto, error)
	GetTaskReport(ctx context.Context, in *GetTaskReportRequestProto, opts ...grpc.CallOption) (*GetTaskReportResponseProto, error)
	GetTaskAttemptReport(ctx context.Context, in *GetTaskAttemptReportRequestProto, opts ...grpc.CallOption) (*GetTaskAttemptReportResponseProto, error)
	GetCounters(ctx context.Context, in *GetCountersRequestProto, opts ...grpc.CallOption) (*GetCountersResponseProto, error)
	GetTaskAttemptCompletionEvents(ctx context.Context, in *GetTaskAttemptCompletionEventsRequestProto, opts ...grpc.CallOption) (*GetTaskAttemptCompletionEventsResponseProto, error)
	GetTaskReports(ctx context.Context, in *GetTaskReportsRequestProto, opts ...grpc.CallOption) (*GetTaskReportsResponseProto, error)
	GetDiagnostics(ctx context.Context, in *GetDiagnosticsRequestProto, opts ...grpc.CallOption) (*GetDiagnosticsResponseProto, error)
	GetDelegationToken(ctx context.Context, in *hproto_common.GetDelegationTokenRequestProto, opts ...grpc.CallOption) (*hproto_common.GetDelegationTokenResponseProto, error)
	KillJob(ctx context.Context, in *KillJobRequestProto, opts ...grpc.CallOption) (*KillJobResponseProto, error)
	KillTask(ctx context.Context, in *KillTaskRequestProto, opts ...grpc.CallOption) (*KillTaskResponseProto, error)
	KillTaskAttempt(ctx context.Context, in *KillTaskAttemptRequestProto, opts ...grpc.CallOption) (*KillTaskAttemptResponseProto, error)
	FailTaskAttempt(ctx context.Context, in *FailTaskAttemptRequestProto, opts ...grpc.CallOption) (*FailTaskAttemptResponseProto, error)
	RenewDelegationToken(ctx context.Context, in *hproto_common.RenewDelegationTokenRequestProto, opts ...grpc.CallOption) (*hproto_common.RenewDelegationTokenResponseProto, error)
	CancelDelegationToken(ctx context.Context, in *hproto_common.CancelDelegationTokenRequestProto, opts ...grpc.CallOption) (*hproto_common.CancelDelegationTokenResponseProto, error)
}

type mRClientProtocolServiceClient struct {
	cc *grpc.ClientConn
}

func NewMRClientProtocolServiceClient(cc *grpc.ClientConn) MRClientProtocolServiceClient {
	return &mRClientProtocolServiceClient{cc}
}

func (c *mRClientProtocolServiceClient) GetJobReport(ctx context.Context, in *GetJobReportRequestProto, opts ...grpc.CallOption) (*GetJobReportResponseProto, error) {
	out := new(GetJobReportResponseProto)
	err := grpc.Invoke(ctx, "/hproto.mapreduce.MRClientProtocolService/getJobReport", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mRClientProtocolServiceClient) GetTaskReport(ctx context.Context, in *GetTaskReportRequestProto, opts ...grpc.CallOption) (*GetTaskReportResponseProto, error) {
	out := new(GetTaskReportResponseProto)
	err := grpc.Invoke(ctx, "/hproto.mapreduce.MRClientProtocolService/getTaskReport", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mRClientProtocolServiceClient) GetTaskAttemptReport(ctx context.Context, in *GetTaskAttemptReportRequestProto, opts ...grpc.CallOption) (*GetTaskAttemptReportResponseProto, error) {
	out := new(GetTaskAttemptReportResponseProto)
	err := grpc.Invoke(ctx, "/hproto.mapreduce.MRClientProtocolService/getTaskAttemptReport", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mRClientProtocolServiceClient) GetCounters(ctx context.Context, in *GetCountersRequestProto, opts ...grpc.CallOption) (*GetCountersResponseProto, error) {
	out := new(GetCountersResponseProto)
	err := grpc.Invoke(ctx, "/hproto.mapreduce.MRClientProtocolService/getCounters", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mRClientProtocolServiceClient) GetTaskAttemptCompletionEvents(ctx context.Context, in *GetTaskAttemptCompletionEventsRequestProto, opts ...grpc.CallOption) (*GetTaskAttemptCompletionEventsResponseProto, error) {
	out := new(GetTaskAttemptCompletionEventsResponseProto)
	err := grpc.Invoke(ctx, "/hproto.mapreduce.MRClientProtocolService/getTaskAttemptCompletionEvents", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mRClientProtocolServiceClient) GetTaskReports(ctx context.Context, in *GetTaskReportsRequestProto, opts ...grpc.CallOption) (*GetTaskReportsResponseProto, error) {
	out := new(GetTaskReportsResponseProto)
	err := grpc.Invoke(ctx, "/hproto.mapreduce.MRClientProtocolService/getTaskReports", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mRClientProtocolServiceClient) GetDiagnostics(ctx context.Context, in *GetDiagnosticsRequestProto, opts ...grpc.CallOption) (*GetDiagnosticsResponseProto, error) {
	out := new(GetDiagnosticsResponseProto)
	err := grpc.Invoke(ctx, "/hproto.mapreduce.MRClientProtocolService/getDiagnostics", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mRClientProtocolServiceClient) GetDelegationToken(ctx context.Context, in *hproto_common.GetDelegationTokenRequestProto, opts ...grpc.CallOption) (*hproto_common.GetDelegationTokenResponseProto, error) {
	out := new(hproto_common.GetDelegationTokenResponseProto)
	err := grpc.Invoke(ctx, "/hproto.mapreduce.MRClientProtocolService/getDelegationToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mRClientProtocolServiceClient) KillJob(ctx context.Context, in *KillJobRequestProto, opts ...grpc.CallOption) (*KillJobResponseProto, error) {
	out := new(KillJobResponseProto)
	err := grpc.Invoke(ctx, "/hproto.mapreduce.MRClientProtocolService/killJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mRClientProtocolServiceClient) KillTask(ctx context.Context, in *KillTaskRequestProto, opts ...grpc.CallOption) (*KillTaskResponseProto, error) {
	out := new(KillTaskResponseProto)
	err := grpc.Invoke(ctx, "/hproto.mapreduce.MRClientProtocolService/killTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mRClientProtocolServiceClient) KillTaskAttempt(ctx context.Context, in *KillTaskAttemptRequestProto, opts ...grpc.CallOption) (*KillTaskAttemptResponseProto, error) {
	out := new(KillTaskAttemptResponseProto)
	err := grpc.Invoke(ctx, "/hproto.mapreduce.MRClientProtocolService/killTaskAttempt", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mRClientProtocolServiceClient) FailTaskAttempt(ctx context.Context, in *FailTaskAttemptRequestProto, opts ...grpc.CallOption) (*FailTaskAttemptResponseProto, error) {
	out := new(FailTaskAttemptResponseProto)
	err := grpc.Invoke(ctx, "/hproto.mapreduce.MRClientProtocolService/failTaskAttempt", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mRClientProtocolServiceClient) RenewDelegationToken(ctx context.Context, in *hproto_common.RenewDelegationTokenRequestProto, opts ...grpc.CallOption) (*hproto_common.RenewDelegationTokenResponseProto, error) {
	out := new(hproto_common.RenewDelegationTokenResponseProto)
	err := grpc.Invoke(ctx, "/hproto.mapreduce.MRClientProtocolService/renewDelegationToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mRClientProtocolServiceClient) CancelDelegationToken(ctx context.Context, in *hproto_common.CancelDelegationTokenRequestProto, opts ...grpc.CallOption) (*hproto_common.CancelDelegationTokenResponseProto, error) {
	out := new(hproto_common.CancelDelegationTokenResponseProto)
	err := grpc.Invoke(ctx, "/hproto.mapreduce.MRClientProtocolService/cancelDelegationToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MRClientProtocolService service

type MRClientProtocolServiceServer interface {
	GetJobReport(context.Context, *GetJobReportRequestProto) (*GetJobReportResponseProto, error)
	GetTaskReport(context.Context, *GetTaskReportRequestProto) (*GetTaskReportResponseProto, error)
	GetTaskAttemptReport(context.Context, *GetTaskAttemptReportRequestProto) (*GetTaskAttemptReportResponseProto, error)
	GetCounters(context.Context, *GetCountersRequestProto) (*GetCountersResponseProto, error)
	GetTaskAttemptCompletionEvents(context.Context, *GetTaskAttemptCompletionEventsRequestProto) (*GetTaskAttemptCompletionEventsResponseProto, error)
	GetTaskReports(context.Context, *GetTaskReportsRequestProto) (*GetTaskReportsResponseProto, error)
	GetDiagnostics(context.Context, *GetDiagnosticsRequestProto) (*GetDiagnosticsResponseProto, error)
	GetDelegationToken(context.Context, *hproto_common.GetDelegationTokenRequestProto) (*hproto_common.GetDelegationTokenResponseProto, error)
	KillJob(context.Context, *KillJobRequestProto) (*KillJobResponseProto, error)
	KillTask(context.Context, *KillTaskRequestProto) (*KillTaskResponseProto, error)
	KillTaskAttempt(context.Context, *KillTaskAttemptRequestProto) (*KillTaskAttemptResponseProto, error)
	FailTaskAttempt(context.Context, *FailTaskAttemptRequestProto) (*FailTaskAttemptResponseProto, error)
	RenewDelegationToken(context.Context, *hproto_common.RenewDelegationTokenRequestProto) (*hproto_common.RenewDelegationTokenResponseProto, error)
	CancelDelegationToken(context.Context, *hproto_common.CancelDelegationTokenRequestProto) (*hproto_common.CancelDelegationTokenResponseProto, error)
}

func RegisterMRClientProtocolServiceServer(s *grpc.Server, srv MRClientProtocolServiceServer) {
	s.RegisterService(&_MRClientProtocolService_serviceDesc, srv)
}

func _MRClientProtocolService_GetJobReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobReportRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MRClientProtocolServiceServer).GetJobReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.mapreduce.MRClientProtocolService/GetJobReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MRClientProtocolServiceServer).GetJobReport(ctx, req.(*GetJobReportRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _MRClientProtocolService_GetTaskReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskReportRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MRClientProtocolServiceServer).GetTaskReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.mapreduce.MRClientProtocolService/GetTaskReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MRClientProtocolServiceServer).GetTaskReport(ctx, req.(*GetTaskReportRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _MRClientProtocolService_GetTaskAttemptReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskAttemptReportRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MRClientProtocolServiceServer).GetTaskAttemptReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.mapreduce.MRClientProtocolService/GetTaskAttemptReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MRClientProtocolServiceServer).GetTaskAttemptReport(ctx, req.(*GetTaskAttemptReportRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _MRClientProtocolService_GetCounters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCountersRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MRClientProtocolServiceServer).GetCounters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.mapreduce.MRClientProtocolService/GetCounters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MRClientProtocolServiceServer).GetCounters(ctx, req.(*GetCountersRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _MRClientProtocolService_GetTaskAttemptCompletionEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskAttemptCompletionEventsRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MRClientProtocolServiceServer).GetTaskAttemptCompletionEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.mapreduce.MRClientProtocolService/GetTaskAttemptCompletionEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MRClientProtocolServiceServer).GetTaskAttemptCompletionEvents(ctx, req.(*GetTaskAttemptCompletionEventsRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _MRClientProtocolService_GetTaskReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskReportsRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MRClientProtocolServiceServer).GetTaskReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.mapreduce.MRClientProtocolService/GetTaskReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MRClientProtocolServiceServer).GetTaskReports(ctx, req.(*GetTaskReportsRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _MRClientProtocolService_GetDiagnostics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiagnosticsRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MRClientProtocolServiceServer).GetDiagnostics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.mapreduce.MRClientProtocolService/GetDiagnostics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MRClientProtocolServiceServer).GetDiagnostics(ctx, req.(*GetDiagnosticsRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _MRClientProtocolService_GetDelegationToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(hproto_common.GetDelegationTokenRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MRClientProtocolServiceServer).GetDelegationToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.mapreduce.MRClientProtocolService/GetDelegationToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MRClientProtocolServiceServer).GetDelegationToken(ctx, req.(*hproto_common.GetDelegationTokenRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _MRClientProtocolService_KillJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillJobRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MRClientProtocolServiceServer).KillJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.mapreduce.MRClientProtocolService/KillJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MRClientProtocolServiceServer).KillJob(ctx, req.(*KillJobRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _MRClientProtocolService_KillTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillTaskRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MRClientProtocolServiceServer).KillTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.mapreduce.MRClientProtocolService/KillTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MRClientProtocolServiceServer).KillTask(ctx, req.(*KillTaskRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _MRClientProtocolService_KillTaskAttempt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillTaskAttemptRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MRClientProtocolServiceServer).KillTaskAttempt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.mapreduce.MRClientProtocolService/KillTaskAttempt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MRClientProtocolServiceServer).KillTaskAttempt(ctx, req.(*KillTaskAttemptRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _MRClientProtocolService_FailTaskAttempt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FailTaskAttemptRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MRClientProtocolServiceServer).FailTaskAttempt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.mapreduce.MRClientProtocolService/FailTaskAttempt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MRClientProtocolServiceServer).FailTaskAttempt(ctx, req.(*FailTaskAttemptRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _MRClientProtocolService_RenewDelegationToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(hproto_common.RenewDelegationTokenRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MRClientProtocolServiceServer).RenewDelegationToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.mapreduce.MRClientProtocolService/RenewDelegationToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MRClientProtocolServiceServer).RenewDelegationToken(ctx, req.(*hproto_common.RenewDelegationTokenRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _MRClientProtocolService_CancelDelegationToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(hproto_common.CancelDelegationTokenRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MRClientProtocolServiceServer).CancelDelegationToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.mapreduce.MRClientProtocolService/CancelDelegationToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MRClientProtocolServiceServer).CancelDelegationToken(ctx, req.(*hproto_common.CancelDelegationTokenRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

var _MRClientProtocolService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hproto.mapreduce.MRClientProtocolService",
	HandlerType: (*MRClientProtocolServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getJobReport",
			Handler:    _MRClientProtocolService_GetJobReport_Handler,
		},
		{
			MethodName: "getTaskReport",
			Handler:    _MRClientProtocolService_GetTaskReport_Handler,
		},
		{
			MethodName: "getTaskAttemptReport",
			Handler:    _MRClientProtocolService_GetTaskAttemptReport_Handler,
		},
		{
			MethodName: "getCounters",
			Handler:    _MRClientProtocolService_GetCounters_Handler,
		},
		{
			MethodName: "getTaskAttemptCompletionEvents",
			Handler:    _MRClientProtocolService_GetTaskAttemptCompletionEvents_Handler,
		},
		{
			MethodName: "getTaskReports",
			Handler:    _MRClientProtocolService_GetTaskReports_Handler,
		},
		{
			MethodName: "getDiagnostics",
			Handler:    _MRClientProtocolService_GetDiagnostics_Handler,
		},
		{
			MethodName: "getDelegationToken",
			Handler:    _MRClientProtocolService_GetDelegationToken_Handler,
		},
		{
			MethodName: "killJob",
			Handler:    _MRClientProtocolService_KillJob_Handler,
		},
		{
			MethodName: "killTask",
			Handler:    _MRClientProtocolService_KillTask_Handler,
		},
		{
			MethodName: "killTaskAttempt",
			Handler:    _MRClientProtocolService_KillTaskAttempt_Handler,
		},
		{
			MethodName: "failTaskAttempt",
			Handler:    _MRClientProtocolService_FailTaskAttempt_Handler,
		},
		{
			MethodName: "renewDelegationToken",
			Handler:    _MRClientProtocolService_RenewDelegationToken_Handler,
		},
		{
			MethodName: "cancelDelegationToken",
			Handler:    _MRClientProtocolService_CancelDelegationToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor1,
}

func init() {
	proto.RegisterFile("gopkg.in/freddierice/go-hproto.v1/mapreduce/MRClientProtocol.proto", fileDescriptor1)
}

var fileDescriptor1 = []byte{
	// 503 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x95, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0xd5, 0x13, 0xc8, 0x0c, 0x98, 0xac, 0x21, 0xa4, 0x0a, 0x71, 0x03, 0xc4, 0xa0, 0x09,
	0xdb, 0x0e, 0x5c, 0xe0, 0x40, 0xc3, 0x1f, 0x09, 0x84, 0x84, 0xba, 0x1d, 0x90, 0x38, 0x4c, 0x26,
	0x7d, 0x97, 0x99, 0x26, 0x7e, 0x8d, 0xed, 0x16, 0x55, 0x42, 0xe2, 0xca, 0x97, 0xe0, 0x9b, 0xf1,
	0x61, 0x48, 0x9a, 0xb4, 0xd8, 0x6e, 0x52, 0x67, 0xd7, 0xbe, 0xbf, 0xf7, 0xf9, 0x3d, 0xb5, 0x13,
	0x85, 0x8c, 0x33, 0x94, 0xb3, 0x2c, 0xe2, 0x22, 0xbe, 0x50, 0x30, 0x9d, 0x72, 0x50, 0x3c, 0x85,
	0x38, 0xc3, 0xd1, 0xa5, 0x54, 0x68, 0x30, 0x5a, 0x1c, 0xc5, 0x05, 0x93, 0xe5, 0x68, 0x5e, 0xfe,
	0xfc, 0x71, 0x92, 0xe4, 0x1c, 0x84, 0xf9, 0x54, 0x8d, 0x52, 0xcc, 0xa3, 0x15, 0x43, 0xf7, 0x1b,
	0x76, 0x03, 0x0e, 0x9f, 0x87, 0x53, 0x53, 0x2c, 0x0a, 0x14, 0xf1, 0x29, 0xa4, 0x73, 0xc5, 0xcd,
	0xb2, 0x8e, 0x1a, 0x26, 0x57, 0xa9, 0x53, 0xa8, 0x73, 0x0d, 0x6a, 0x51, 0x12, 0xe7, 0xab, 0xa9,
	0xae, 0x43, 0x8e, 0xff, 0xee, 0x91, 0xbb, 0x7e, 0xd5, 0xd3, 0x1a, 0xa4, 0x19, 0xd9, 0xcb, 0xc0,
	0xbc, 0xc7, 0xaf, 0x13, 0x90, 0xa8, 0x0c, 0x3d, 0x8c, 0xfc, 0xf2, 0xd1, 0x3b, 0x6b, 0x3e, 0x81,
	0xef, 0x73, 0xd0, 0x75, 0xca, 0xf0, 0x49, 0x88, 0xd5, 0x12, 0x85, 0x86, 0x15, 0x4c, 0xbf, 0x91,
	0x9b, 0xa5, 0xe8, 0x8c, 0xe9, 0x59, 0x63, 0x6a, 0xdf, 0xfe, 0x0f, 0x38, 0xaa, 0xa7, 0x41, 0xd8,
	0x76, 0xfd, 0x22, 0x07, 0x8d, 0xeb, 0x95, 0x31, 0x50, 0x48, 0xd3, 0x28, 0x8f, 0x3b, 0x53, 0x1c,
	0xce, 0x31, 0x9f, 0xf4, 0xdd, 0xb1, 0x0b, 0x4c, 0xc9, 0x8d, 0xb2, 0x40, 0x82, 0x73, 0x61, 0x40,
	0x69, 0xfa, 0xb8, 0x35, 0x63, 0x3d, 0x76, 0x74, 0x87, 0x01, 0xd4, 0xb6, 0xfc, 0x19, 0x90, 0xfb,
	0xee, 0xff, 0x4c, 0xb0, 0x90, 0x39, 0x18, 0x8e, 0xe2, 0xcd, 0xa2, 0xbc, 0x6c, 0x4d, 0x5f, 0x84,
	0xda, 0xfb, 0x1b, 0x4e, 0x99, 0x97, 0x57, 0xdf, 0xb6, 0xfb, 0x15, 0xe4, 0x96, 0x73, 0xe5, 0x9a,
	0x86, 0xae, 0xd1, 0xd5, 0x8f, 0xc2, 0xf4, 0xb6, 0xee, 0x35, 0x67, 0x99, 0x40, 0x6d, 0x78, 0xda,
	0xa5, 0xb3, 0x88, 0x1e, 0x3a, 0x87, 0xb6, 0x75, 0x9a, 0xd0, 0x4a, 0x07, 0x39, 0x64, 0xac, 0x3a,
	0x81, 0x33, 0x9c, 0x81, 0xa0, 0x9b, 0x90, 0xfa, 0x7d, 0x5e, 0x25, 0xb8, 0x88, 0xe3, 0x8c, 0x7a,
	0xe0, 0xb6, 0xf4, 0x33, 0xb9, 0x36, 0xe3, 0x79, 0x5e, 0xbe, 0x63, 0xf4, 0xc1, 0x76, 0xdd, 0x0f,
	0xf5, 0xc8, 0x31, 0x3c, 0xdc, 0x81, 0xd9, 0xc9, 0x5f, 0xc8, 0xf5, 0x2a, 0xb9, 0x3a, 0x5d, 0xda,
	0xb1, 0x53, 0x9f, 0xbc, 0x95, 0xfd, 0x68, 0x17, 0x67, 0x87, 0x4b, 0x72, 0x7b, 0x1d, 0xde, 0x3c,
	0x39, 0x74, 0xd4, 0xbd, 0xbb, 0x79, 0xb1, 0xda, 0x0e, 0x6a, 0x07, 0xee, 0x19, 0x2f, 0x18, 0x0f,
	0x19, 0xdf, 0xba, 0x48, 0xc8, 0xb8, 0x85, 0xdb, 0xc6, 0x25, 0x39, 0x50, 0x20, 0xe0, 0x87, 0xff,
	0x44, 0xc4, 0xde, 0x15, 0x4f, 0x5a, 0x20, 0x47, 0xfc, 0xac, 0xd7, 0x82, 0xad, 0xfe, 0x49, 0xee,
	0xa4, 0x4c, 0xa4, 0x90, 0xfb, 0x6e, 0x3f, 0x2a, 0x69, 0xa3, 0x1c, 0xf9, 0x51, 0xbf, 0x0d, 0xcb,
	0x3e, 0x3e, 0x21, 0xf7, 0x50, 0x65, 0x11, 0x93, 0x2c, 0xbd, 0x84, 0xf5, 0xfa, 0x92, 0x29, 0x51,
	0x7f, 0x7e, 0xc6, 0xfb, 0xfe, 0xb7, 0xe7, 0xf7, 0x60, 0xf0, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xc5,
	0x08, 0x7a, 0x29, 0x68, 0x07, 0x00, 0x00,
}
