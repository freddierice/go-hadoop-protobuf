// Code generated by protoc-gen-go.
// source: gopkg.in/freddierice/go-hproto.v1/mapreduce/mr_protos.proto
// DO NOT EDIT!

package hproto_mapreduce

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import hproto_yarn "gopkg.in/freddierice/go-hproto.v1/yarn"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TaskTypeProto int32

const (
	TaskTypeProto_MAP    TaskTypeProto = 1
	TaskTypeProto_REDUCE TaskTypeProto = 2
)

var TaskTypeProto_name = map[int32]string{
	1: "MAP",
	2: "REDUCE",
}
var TaskTypeProto_value = map[string]int32{
	"MAP":    1,
	"REDUCE": 2,
}

func (x TaskTypeProto) Enum() *TaskTypeProto {
	p := new(TaskTypeProto)
	*p = x
	return p
}
func (x TaskTypeProto) String() string {
	return proto.EnumName(TaskTypeProto_name, int32(x))
}
func (x *TaskTypeProto) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TaskTypeProto_value, data, "TaskTypeProto")
	if err != nil {
		return err
	}
	*x = TaskTypeProto(value)
	return nil
}
func (TaskTypeProto) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

type TaskStateProto int32

const (
	TaskStateProto_TS_NEW       TaskStateProto = 1
	TaskStateProto_TS_SCHEDULED TaskStateProto = 2
	TaskStateProto_TS_RUNNING   TaskStateProto = 3
	TaskStateProto_TS_SUCCEEDED TaskStateProto = 4
	TaskStateProto_TS_FAILED    TaskStateProto = 5
	TaskStateProto_TS_KILLED    TaskStateProto = 6
)

var TaskStateProto_name = map[int32]string{
	1: "TS_NEW",
	2: "TS_SCHEDULED",
	3: "TS_RUNNING",
	4: "TS_SUCCEEDED",
	5: "TS_FAILED",
	6: "TS_KILLED",
}
var TaskStateProto_value = map[string]int32{
	"TS_NEW":       1,
	"TS_SCHEDULED": 2,
	"TS_RUNNING":   3,
	"TS_SUCCEEDED": 4,
	"TS_FAILED":    5,
	"TS_KILLED":    6,
}

func (x TaskStateProto) Enum() *TaskStateProto {
	p := new(TaskStateProto)
	*p = x
	return p
}
func (x TaskStateProto) String() string {
	return proto.EnumName(TaskStateProto_name, int32(x))
}
func (x *TaskStateProto) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TaskStateProto_value, data, "TaskStateProto")
	if err != nil {
		return err
	}
	*x = TaskStateProto(value)
	return nil
}
func (TaskStateProto) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

type PhaseProto int32

const (
	PhaseProto_P_STARTING PhaseProto = 1
	PhaseProto_P_MAP      PhaseProto = 2
	PhaseProto_P_SHUFFLE  PhaseProto = 3
	PhaseProto_P_SORT     PhaseProto = 4
	PhaseProto_P_REDUCE   PhaseProto = 5
	PhaseProto_P_CLEANUP  PhaseProto = 6
)

var PhaseProto_name = map[int32]string{
	1: "P_STARTING",
	2: "P_MAP",
	3: "P_SHUFFLE",
	4: "P_SORT",
	5: "P_REDUCE",
	6: "P_CLEANUP",
}
var PhaseProto_value = map[string]int32{
	"P_STARTING": 1,
	"P_MAP":      2,
	"P_SHUFFLE":  3,
	"P_SORT":     4,
	"P_REDUCE":   5,
	"P_CLEANUP":  6,
}

func (x PhaseProto) Enum() *PhaseProto {
	p := new(PhaseProto)
	*p = x
	return p
}
func (x PhaseProto) String() string {
	return proto.EnumName(PhaseProto_name, int32(x))
}
func (x *PhaseProto) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PhaseProto_value, data, "PhaseProto")
	if err != nil {
		return err
	}
	*x = PhaseProto(value)
	return nil
}
func (PhaseProto) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

type TaskAttemptStateProto int32

const (
	TaskAttemptStateProto_TA_NEW            TaskAttemptStateProto = 1
	TaskAttemptStateProto_TA_STARTING       TaskAttemptStateProto = 2
	TaskAttemptStateProto_TA_RUNNING        TaskAttemptStateProto = 3
	TaskAttemptStateProto_TA_COMMIT_PENDING TaskAttemptStateProto = 4
	TaskAttemptStateProto_TA_SUCCEEDED      TaskAttemptStateProto = 5
	TaskAttemptStateProto_TA_FAILED         TaskAttemptStateProto = 6
	TaskAttemptStateProto_TA_KILLED         TaskAttemptStateProto = 7
)

var TaskAttemptStateProto_name = map[int32]string{
	1: "TA_NEW",
	2: "TA_STARTING",
	3: "TA_RUNNING",
	4: "TA_COMMIT_PENDING",
	5: "TA_SUCCEEDED",
	6: "TA_FAILED",
	7: "TA_KILLED",
}
var TaskAttemptStateProto_value = map[string]int32{
	"TA_NEW":            1,
	"TA_STARTING":       2,
	"TA_RUNNING":        3,
	"TA_COMMIT_PENDING": 4,
	"TA_SUCCEEDED":      5,
	"TA_FAILED":         6,
	"TA_KILLED":         7,
}

func (x TaskAttemptStateProto) Enum() *TaskAttemptStateProto {
	p := new(TaskAttemptStateProto)
	*p = x
	return p
}
func (x TaskAttemptStateProto) String() string {
	return proto.EnumName(TaskAttemptStateProto_name, int32(x))
}
func (x *TaskAttemptStateProto) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TaskAttemptStateProto_value, data, "TaskAttemptStateProto")
	if err != nil {
		return err
	}
	*x = TaskAttemptStateProto(value)
	return nil
}
func (TaskAttemptStateProto) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

type JobStateProto int32

const (
	JobStateProto_J_NEW       JobStateProto = 1
	JobStateProto_J_INITED    JobStateProto = 2
	JobStateProto_J_RUNNING   JobStateProto = 3
	JobStateProto_J_SUCCEEDED JobStateProto = 4
	JobStateProto_J_FAILED    JobStateProto = 5
	JobStateProto_J_KILLED    JobStateProto = 6
	JobStateProto_J_ERROR     JobStateProto = 7
)

var JobStateProto_name = map[int32]string{
	1: "J_NEW",
	2: "J_INITED",
	3: "J_RUNNING",
	4: "J_SUCCEEDED",
	5: "J_FAILED",
	6: "J_KILLED",
	7: "J_ERROR",
}
var JobStateProto_value = map[string]int32{
	"J_NEW":       1,
	"J_INITED":    2,
	"J_RUNNING":   3,
	"J_SUCCEEDED": 4,
	"J_FAILED":    5,
	"J_KILLED":    6,
	"J_ERROR":     7,
}

func (x JobStateProto) Enum() *JobStateProto {
	p := new(JobStateProto)
	*p = x
	return p
}
func (x JobStateProto) String() string {
	return proto.EnumName(JobStateProto_name, int32(x))
}
func (x *JobStateProto) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(JobStateProto_value, data, "JobStateProto")
	if err != nil {
		return err
	}
	*x = JobStateProto(value)
	return nil
}
func (JobStateProto) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

type TaskAttemptCompletionEventStatusProto int32

const (
	TaskAttemptCompletionEventStatusProto_TACE_FAILED    TaskAttemptCompletionEventStatusProto = 1
	TaskAttemptCompletionEventStatusProto_TACE_KILLED    TaskAttemptCompletionEventStatusProto = 2
	TaskAttemptCompletionEventStatusProto_TACE_SUCCEEDED TaskAttemptCompletionEventStatusProto = 3
	TaskAttemptCompletionEventStatusProto_TACE_OBSOLETE  TaskAttemptCompletionEventStatusProto = 4
	TaskAttemptCompletionEventStatusProto_TACE_TIPFAILED TaskAttemptCompletionEventStatusProto = 5
)

var TaskAttemptCompletionEventStatusProto_name = map[int32]string{
	1: "TACE_FAILED",
	2: "TACE_KILLED",
	3: "TACE_SUCCEEDED",
	4: "TACE_OBSOLETE",
	5: "TACE_TIPFAILED",
}
var TaskAttemptCompletionEventStatusProto_value = map[string]int32{
	"TACE_FAILED":    1,
	"TACE_KILLED":    2,
	"TACE_SUCCEEDED": 3,
	"TACE_OBSOLETE":  4,
	"TACE_TIPFAILED": 5,
}

func (x TaskAttemptCompletionEventStatusProto) Enum() *TaskAttemptCompletionEventStatusProto {
	p := new(TaskAttemptCompletionEventStatusProto)
	*p = x
	return p
}
func (x TaskAttemptCompletionEventStatusProto) String() string {
	return proto.EnumName(TaskAttemptCompletionEventStatusProto_name, int32(x))
}
func (x *TaskAttemptCompletionEventStatusProto) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TaskAttemptCompletionEventStatusProto_value, data, "TaskAttemptCompletionEventStatusProto")
	if err != nil {
		return err
	}
	*x = TaskAttemptCompletionEventStatusProto(value)
	return nil
}
func (TaskAttemptCompletionEventStatusProto) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{5}
}

type JobIdProto struct {
	AppId            *hproto_yarn.ApplicationIdProto `protobuf:"bytes,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Id               *int32                          `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	XXX_unrecognized []byte                          `json:"-"`
}

func (m *JobIdProto) Reset()                    { *m = JobIdProto{} }
func (m *JobIdProto) String() string            { return proto.CompactTextString(m) }
func (*JobIdProto) ProtoMessage()               {}
func (*JobIdProto) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *JobIdProto) GetAppId() *hproto_yarn.ApplicationIdProto {
	if m != nil {
		return m.AppId
	}
	return nil
}

func (m *JobIdProto) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

type TaskIdProto struct {
	JobId            *JobIdProto    `protobuf:"bytes,1,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
	TaskType         *TaskTypeProto `protobuf:"varint,2,opt,name=task_type,json=taskType,enum=hproto.mapreduce.TaskTypeProto" json:"task_type,omitempty"`
	Id               *int32         `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *TaskIdProto) Reset()                    { *m = TaskIdProto{} }
func (m *TaskIdProto) String() string            { return proto.CompactTextString(m) }
func (*TaskIdProto) ProtoMessage()               {}
func (*TaskIdProto) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *TaskIdProto) GetJobId() *JobIdProto {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *TaskIdProto) GetTaskType() TaskTypeProto {
	if m != nil && m.TaskType != nil {
		return *m.TaskType
	}
	return TaskTypeProto_MAP
}

func (m *TaskIdProto) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

type TaskAttemptIdProto struct {
	TaskId           *TaskIdProto `protobuf:"bytes,1,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	Id               *int32       `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *TaskAttemptIdProto) Reset()                    { *m = TaskAttemptIdProto{} }
func (m *TaskAttemptIdProto) String() string            { return proto.CompactTextString(m) }
func (*TaskAttemptIdProto) ProtoMessage()               {}
func (*TaskAttemptIdProto) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *TaskAttemptIdProto) GetTaskId() *TaskIdProto {
	if m != nil {
		return m.TaskId
	}
	return nil
}

func (m *TaskAttemptIdProto) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

type CounterProto struct {
	Name             *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	DisplayName      *string `protobuf:"bytes,2,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	Value            *int64  `protobuf:"varint,3,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CounterProto) Reset()                    { *m = CounterProto{} }
func (m *CounterProto) String() string            { return proto.CompactTextString(m) }
func (*CounterProto) ProtoMessage()               {}
func (*CounterProto) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *CounterProto) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CounterProto) GetDisplayName() string {
	if m != nil && m.DisplayName != nil {
		return *m.DisplayName
	}
	return ""
}

func (m *CounterProto) GetValue() int64 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

type CounterGroupProto struct {
	Name             *string                  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	DisplayName      *string                  `protobuf:"bytes,2,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	Counters         []*StringCounterMapProto `protobuf:"bytes,3,rep,name=counters" json:"counters,omitempty"`
	XXX_unrecognized []byte                   `json:"-"`
}

func (m *CounterGroupProto) Reset()                    { *m = CounterGroupProto{} }
func (m *CounterGroupProto) String() string            { return proto.CompactTextString(m) }
func (*CounterGroupProto) ProtoMessage()               {}
func (*CounterGroupProto) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *CounterGroupProto) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CounterGroupProto) GetDisplayName() string {
	if m != nil && m.DisplayName != nil {
		return *m.DisplayName
	}
	return ""
}

func (m *CounterGroupProto) GetCounters() []*StringCounterMapProto {
	if m != nil {
		return m.Counters
	}
	return nil
}

type CountersProto struct {
	CounterGroups    []*StringCounterGroupMapProto `protobuf:"bytes,1,rep,name=counter_groups,json=counterGroups" json:"counter_groups,omitempty"`
	XXX_unrecognized []byte                        `json:"-"`
}

func (m *CountersProto) Reset()                    { *m = CountersProto{} }
func (m *CountersProto) String() string            { return proto.CompactTextString(m) }
func (*CountersProto) ProtoMessage()               {}
func (*CountersProto) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *CountersProto) GetCounterGroups() []*StringCounterGroupMapProto {
	if m != nil {
		return m.CounterGroups
	}
	return nil
}

type TaskReportProto struct {
	TaskId            *TaskIdProto          `protobuf:"bytes,1,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	TaskState         *TaskStateProto       `protobuf:"varint,2,opt,name=task_state,json=taskState,enum=hproto.mapreduce.TaskStateProto" json:"task_state,omitempty"`
	Progress          *float32              `protobuf:"fixed32,3,opt,name=progress" json:"progress,omitempty"`
	StartTime         *int64                `protobuf:"varint,4,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	FinishTime        *int64                `protobuf:"varint,5,opt,name=finish_time,json=finishTime" json:"finish_time,omitempty"`
	Counters          *CountersProto        `protobuf:"bytes,6,opt,name=counters" json:"counters,omitempty"`
	RunningAttempts   []*TaskAttemptIdProto `protobuf:"bytes,7,rep,name=running_attempts,json=runningAttempts" json:"running_attempts,omitempty"`
	SuccessfulAttempt *TaskAttemptIdProto   `protobuf:"bytes,8,opt,name=successful_attempt,json=successfulAttempt" json:"successful_attempt,omitempty"`
	Diagnostics       []string              `protobuf:"bytes,9,rep,name=diagnostics" json:"diagnostics,omitempty"`
	XXX_unrecognized  []byte                `json:"-"`
}

func (m *TaskReportProto) Reset()                    { *m = TaskReportProto{} }
func (m *TaskReportProto) String() string            { return proto.CompactTextString(m) }
func (*TaskReportProto) ProtoMessage()               {}
func (*TaskReportProto) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *TaskReportProto) GetTaskId() *TaskIdProto {
	if m != nil {
		return m.TaskId
	}
	return nil
}

func (m *TaskReportProto) GetTaskState() TaskStateProto {
	if m != nil && m.TaskState != nil {
		return *m.TaskState
	}
	return TaskStateProto_TS_NEW
}

func (m *TaskReportProto) GetProgress() float32 {
	if m != nil && m.Progress != nil {
		return *m.Progress
	}
	return 0
}

func (m *TaskReportProto) GetStartTime() int64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *TaskReportProto) GetFinishTime() int64 {
	if m != nil && m.FinishTime != nil {
		return *m.FinishTime
	}
	return 0
}

func (m *TaskReportProto) GetCounters() *CountersProto {
	if m != nil {
		return m.Counters
	}
	return nil
}

func (m *TaskReportProto) GetRunningAttempts() []*TaskAttemptIdProto {
	if m != nil {
		return m.RunningAttempts
	}
	return nil
}

func (m *TaskReportProto) GetSuccessfulAttempt() *TaskAttemptIdProto {
	if m != nil {
		return m.SuccessfulAttempt
	}
	return nil
}

func (m *TaskReportProto) GetDiagnostics() []string {
	if m != nil {
		return m.Diagnostics
	}
	return nil
}

type TaskAttemptReportProto struct {
	TaskAttemptId       *TaskAttemptIdProto           `protobuf:"bytes,1,opt,name=task_attempt_id,json=taskAttemptId" json:"task_attempt_id,omitempty"`
	TaskAttemptState    *TaskAttemptStateProto        `protobuf:"varint,2,opt,name=task_attempt_state,json=taskAttemptState,enum=hproto.mapreduce.TaskAttemptStateProto" json:"task_attempt_state,omitempty"`
	Progress            *float32                      `protobuf:"fixed32,3,opt,name=progress" json:"progress,omitempty"`
	StartTime           *int64                        `protobuf:"varint,4,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	FinishTime          *int64                        `protobuf:"varint,5,opt,name=finish_time,json=finishTime" json:"finish_time,omitempty"`
	Counters            *CountersProto                `protobuf:"bytes,6,opt,name=counters" json:"counters,omitempty"`
	DiagnosticInfo      *string                       `protobuf:"bytes,7,opt,name=diagnostic_info,json=diagnosticInfo" json:"diagnostic_info,omitempty"`
	StateString         *string                       `protobuf:"bytes,8,opt,name=state_string,json=stateString" json:"state_string,omitempty"`
	Phase               *PhaseProto                   `protobuf:"varint,9,opt,name=phase,enum=hproto.mapreduce.PhaseProto" json:"phase,omitempty"`
	ShuffleFinishTime   *int64                        `protobuf:"varint,10,opt,name=shuffle_finish_time,json=shuffleFinishTime" json:"shuffle_finish_time,omitempty"`
	SortFinishTime      *int64                        `protobuf:"varint,11,opt,name=sort_finish_time,json=sortFinishTime" json:"sort_finish_time,omitempty"`
	NodeManagerHost     *string                       `protobuf:"bytes,12,opt,name=node_manager_host,json=nodeManagerHost" json:"node_manager_host,omitempty"`
	NodeManagerPort     *int32                        `protobuf:"varint,13,opt,name=node_manager_port,json=nodeManagerPort" json:"node_manager_port,omitempty"`
	NodeManagerHttpPort *int32                        `protobuf:"varint,14,opt,name=node_manager_http_port,json=nodeManagerHttpPort" json:"node_manager_http_port,omitempty"`
	ContainerId         *hproto_yarn.ContainerIdProto `protobuf:"bytes,15,opt,name=container_id,json=containerId" json:"container_id,omitempty"`
	XXX_unrecognized    []byte                        `json:"-"`
}

func (m *TaskAttemptReportProto) Reset()                    { *m = TaskAttemptReportProto{} }
func (m *TaskAttemptReportProto) String() string            { return proto.CompactTextString(m) }
func (*TaskAttemptReportProto) ProtoMessage()               {}
func (*TaskAttemptReportProto) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

func (m *TaskAttemptReportProto) GetTaskAttemptId() *TaskAttemptIdProto {
	if m != nil {
		return m.TaskAttemptId
	}
	return nil
}

func (m *TaskAttemptReportProto) GetTaskAttemptState() TaskAttemptStateProto {
	if m != nil && m.TaskAttemptState != nil {
		return *m.TaskAttemptState
	}
	return TaskAttemptStateProto_TA_NEW
}

func (m *TaskAttemptReportProto) GetProgress() float32 {
	if m != nil && m.Progress != nil {
		return *m.Progress
	}
	return 0
}

func (m *TaskAttemptReportProto) GetStartTime() int64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *TaskAttemptReportProto) GetFinishTime() int64 {
	if m != nil && m.FinishTime != nil {
		return *m.FinishTime
	}
	return 0
}

func (m *TaskAttemptReportProto) GetCounters() *CountersProto {
	if m != nil {
		return m.Counters
	}
	return nil
}

func (m *TaskAttemptReportProto) GetDiagnosticInfo() string {
	if m != nil && m.DiagnosticInfo != nil {
		return *m.DiagnosticInfo
	}
	return ""
}

func (m *TaskAttemptReportProto) GetStateString() string {
	if m != nil && m.StateString != nil {
		return *m.StateString
	}
	return ""
}

func (m *TaskAttemptReportProto) GetPhase() PhaseProto {
	if m != nil && m.Phase != nil {
		return *m.Phase
	}
	return PhaseProto_P_STARTING
}

func (m *TaskAttemptReportProto) GetShuffleFinishTime() int64 {
	if m != nil && m.ShuffleFinishTime != nil {
		return *m.ShuffleFinishTime
	}
	return 0
}

func (m *TaskAttemptReportProto) GetSortFinishTime() int64 {
	if m != nil && m.SortFinishTime != nil {
		return *m.SortFinishTime
	}
	return 0
}

func (m *TaskAttemptReportProto) GetNodeManagerHost() string {
	if m != nil && m.NodeManagerHost != nil {
		return *m.NodeManagerHost
	}
	return ""
}

func (m *TaskAttemptReportProto) GetNodeManagerPort() int32 {
	if m != nil && m.NodeManagerPort != nil {
		return *m.NodeManagerPort
	}
	return 0
}

func (m *TaskAttemptReportProto) GetNodeManagerHttpPort() int32 {
	if m != nil && m.NodeManagerHttpPort != nil {
		return *m.NodeManagerHttpPort
	}
	return 0
}

func (m *TaskAttemptReportProto) GetContainerId() *hproto_yarn.ContainerIdProto {
	if m != nil {
		return m.ContainerId
	}
	return nil
}

type JobReportProto struct {
	JobId            *JobIdProto                `protobuf:"bytes,1,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
	JobState         *JobStateProto             `protobuf:"varint,2,opt,name=job_state,json=jobState,enum=hproto.mapreduce.JobStateProto" json:"job_state,omitempty"`
	MapProgress      *float32                   `protobuf:"fixed32,3,opt,name=map_progress,json=mapProgress" json:"map_progress,omitempty"`
	ReduceProgress   *float32                   `protobuf:"fixed32,4,opt,name=reduce_progress,json=reduceProgress" json:"reduce_progress,omitempty"`
	CleanupProgress  *float32                   `protobuf:"fixed32,5,opt,name=cleanup_progress,json=cleanupProgress" json:"cleanup_progress,omitempty"`
	SetupProgress    *float32                   `protobuf:"fixed32,6,opt,name=setup_progress,json=setupProgress" json:"setup_progress,omitempty"`
	StartTime        *int64                     `protobuf:"varint,7,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	FinishTime       *int64                     `protobuf:"varint,8,opt,name=finish_time,json=finishTime" json:"finish_time,omitempty"`
	User             *string                    `protobuf:"bytes,9,opt,name=user" json:"user,omitempty"`
	JobName          *string                    `protobuf:"bytes,10,opt,name=jobName" json:"jobName,omitempty"`
	TrackingUrl      *string                    `protobuf:"bytes,11,opt,name=trackingUrl" json:"trackingUrl,omitempty"`
	Diagnostics      *string                    `protobuf:"bytes,12,opt,name=diagnostics" json:"diagnostics,omitempty"`
	JobFile          *string                    `protobuf:"bytes,13,opt,name=jobFile" json:"jobFile,omitempty"`
	AmInfos          []*AMInfoProto             `protobuf:"bytes,14,rep,name=am_infos,json=amInfos" json:"am_infos,omitempty"`
	SubmitTime       *int64                     `protobuf:"varint,15,opt,name=submit_time,json=submitTime" json:"submit_time,omitempty"`
	IsUber           *bool                      `protobuf:"varint,16,opt,name=is_uber,json=isUber,def=0" json:"is_uber,omitempty"`
	JobPriority      *hproto_yarn.PriorityProto `protobuf:"bytes,17,opt,name=jobPriority" json:"jobPriority,omitempty"`
	HistoryFile      *string                    `protobuf:"bytes,18,opt,name=historyFile" json:"historyFile,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *JobReportProto) Reset()                    { *m = JobReportProto{} }
func (m *JobReportProto) String() string            { return proto.CompactTextString(m) }
func (*JobReportProto) ProtoMessage()               {}
func (*JobReportProto) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

const Default_JobReportProto_IsUber bool = false

func (m *JobReportProto) GetJobId() *JobIdProto {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *JobReportProto) GetJobState() JobStateProto {
	if m != nil && m.JobState != nil {
		return *m.JobState
	}
	return JobStateProto_J_NEW
}

func (m *JobReportProto) GetMapProgress() float32 {
	if m != nil && m.MapProgress != nil {
		return *m.MapProgress
	}
	return 0
}

func (m *JobReportProto) GetReduceProgress() float32 {
	if m != nil && m.ReduceProgress != nil {
		return *m.ReduceProgress
	}
	return 0
}

func (m *JobReportProto) GetCleanupProgress() float32 {
	if m != nil && m.CleanupProgress != nil {
		return *m.CleanupProgress
	}
	return 0
}

func (m *JobReportProto) GetSetupProgress() float32 {
	if m != nil && m.SetupProgress != nil {
		return *m.SetupProgress
	}
	return 0
}

func (m *JobReportProto) GetStartTime() int64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *JobReportProto) GetFinishTime() int64 {
	if m != nil && m.FinishTime != nil {
		return *m.FinishTime
	}
	return 0
}

func (m *JobReportProto) GetUser() string {
	if m != nil && m.User != nil {
		return *m.User
	}
	return ""
}

func (m *JobReportProto) GetJobName() string {
	if m != nil && m.JobName != nil {
		return *m.JobName
	}
	return ""
}

func (m *JobReportProto) GetTrackingUrl() string {
	if m != nil && m.TrackingUrl != nil {
		return *m.TrackingUrl
	}
	return ""
}

func (m *JobReportProto) GetDiagnostics() string {
	if m != nil && m.Diagnostics != nil {
		return *m.Diagnostics
	}
	return ""
}

func (m *JobReportProto) GetJobFile() string {
	if m != nil && m.JobFile != nil {
		return *m.JobFile
	}
	return ""
}

func (m *JobReportProto) GetAmInfos() []*AMInfoProto {
	if m != nil {
		return m.AmInfos
	}
	return nil
}

func (m *JobReportProto) GetSubmitTime() int64 {
	if m != nil && m.SubmitTime != nil {
		return *m.SubmitTime
	}
	return 0
}

func (m *JobReportProto) GetIsUber() bool {
	if m != nil && m.IsUber != nil {
		return *m.IsUber
	}
	return Default_JobReportProto_IsUber
}

func (m *JobReportProto) GetJobPriority() *hproto_yarn.PriorityProto {
	if m != nil {
		return m.JobPriority
	}
	return nil
}

func (m *JobReportProto) GetHistoryFile() string {
	if m != nil && m.HistoryFile != nil {
		return *m.HistoryFile
	}
	return ""
}

type AMInfoProto struct {
	ApplicationAttemptId *hproto_yarn.ApplicationAttemptIdProto `protobuf:"bytes,1,opt,name=application_attempt_id,json=applicationAttemptId" json:"application_attempt_id,omitempty"`
	StartTime            *int64                                 `protobuf:"varint,2,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	ContainerId          *hproto_yarn.ContainerIdProto          `protobuf:"bytes,3,opt,name=container_id,json=containerId" json:"container_id,omitempty"`
	NodeManagerHost      *string                                `protobuf:"bytes,4,opt,name=node_manager_host,json=nodeManagerHost" json:"node_manager_host,omitempty"`
	NodeManagerPort      *int32                                 `protobuf:"varint,5,opt,name=node_manager_port,json=nodeManagerPort" json:"node_manager_port,omitempty"`
	NodeManagerHttpPort  *int32                                 `protobuf:"varint,6,opt,name=node_manager_http_port,json=nodeManagerHttpPort" json:"node_manager_http_port,omitempty"`
	XXX_unrecognized     []byte                                 `json:"-"`
}

func (m *AMInfoProto) Reset()                    { *m = AMInfoProto{} }
func (m *AMInfoProto) String() string            { return proto.CompactTextString(m) }
func (*AMInfoProto) ProtoMessage()               {}
func (*AMInfoProto) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{9} }

func (m *AMInfoProto) GetApplicationAttemptId() *hproto_yarn.ApplicationAttemptIdProto {
	if m != nil {
		return m.ApplicationAttemptId
	}
	return nil
}

func (m *AMInfoProto) GetStartTime() int64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *AMInfoProto) GetContainerId() *hproto_yarn.ContainerIdProto {
	if m != nil {
		return m.ContainerId
	}
	return nil
}

func (m *AMInfoProto) GetNodeManagerHost() string {
	if m != nil && m.NodeManagerHost != nil {
		return *m.NodeManagerHost
	}
	return ""
}

func (m *AMInfoProto) GetNodeManagerPort() int32 {
	if m != nil && m.NodeManagerPort != nil {
		return *m.NodeManagerPort
	}
	return 0
}

func (m *AMInfoProto) GetNodeManagerHttpPort() int32 {
	if m != nil && m.NodeManagerHttpPort != nil {
		return *m.NodeManagerHttpPort
	}
	return 0
}

type TaskAttemptCompletionEventProto struct {
	AttemptId              *TaskAttemptIdProto                    `protobuf:"bytes,1,opt,name=attempt_id,json=attemptId" json:"attempt_id,omitempty"`
	Status                 *TaskAttemptCompletionEventStatusProto `protobuf:"varint,2,opt,name=status,enum=hproto.mapreduce.TaskAttemptCompletionEventStatusProto" json:"status,omitempty"`
	MapOutputServerAddress *string                                `protobuf:"bytes,3,opt,name=map_output_server_address,json=mapOutputServerAddress" json:"map_output_server_address,omitempty"`
	AttemptRunTime         *int32                                 `protobuf:"varint,4,opt,name=attempt_run_time,json=attemptRunTime" json:"attempt_run_time,omitempty"`
	EventId                *int32                                 `protobuf:"varint,5,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	XXX_unrecognized       []byte                                 `json:"-"`
}

func (m *TaskAttemptCompletionEventProto) Reset()         { *m = TaskAttemptCompletionEventProto{} }
func (m *TaskAttemptCompletionEventProto) String() string { return proto.CompactTextString(m) }
func (*TaskAttemptCompletionEventProto) ProtoMessage()    {}
func (*TaskAttemptCompletionEventProto) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{10}
}

func (m *TaskAttemptCompletionEventProto) GetAttemptId() *TaskAttemptIdProto {
	if m != nil {
		return m.AttemptId
	}
	return nil
}

func (m *TaskAttemptCompletionEventProto) GetStatus() TaskAttemptCompletionEventStatusProto {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return TaskAttemptCompletionEventStatusProto_TACE_FAILED
}

func (m *TaskAttemptCompletionEventProto) GetMapOutputServerAddress() string {
	if m != nil && m.MapOutputServerAddress != nil {
		return *m.MapOutputServerAddress
	}
	return ""
}

func (m *TaskAttemptCompletionEventProto) GetAttemptRunTime() int32 {
	if m != nil && m.AttemptRunTime != nil {
		return *m.AttemptRunTime
	}
	return 0
}

func (m *TaskAttemptCompletionEventProto) GetEventId() int32 {
	if m != nil && m.EventId != nil {
		return *m.EventId
	}
	return 0
}

type StringCounterMapProto struct {
	Key              *string       `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value            *CounterProto `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *StringCounterMapProto) Reset()                    { *m = StringCounterMapProto{} }
func (m *StringCounterMapProto) String() string            { return proto.CompactTextString(m) }
func (*StringCounterMapProto) ProtoMessage()               {}
func (*StringCounterMapProto) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{11} }

func (m *StringCounterMapProto) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *StringCounterMapProto) GetValue() *CounterProto {
	if m != nil {
		return m.Value
	}
	return nil
}

type StringCounterGroupMapProto struct {
	Key              *string            `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value            *CounterGroupProto `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *StringCounterGroupMapProto) Reset()                    { *m = StringCounterGroupMapProto{} }
func (m *StringCounterGroupMapProto) String() string            { return proto.CompactTextString(m) }
func (*StringCounterGroupMapProto) ProtoMessage()               {}
func (*StringCounterGroupMapProto) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{12} }

func (m *StringCounterGroupMapProto) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *StringCounterGroupMapProto) GetValue() *CounterGroupProto {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*JobIdProto)(nil), "hproto.mapreduce.JobIdProto")
	proto.RegisterType((*TaskIdProto)(nil), "hproto.mapreduce.TaskIdProto")
	proto.RegisterType((*TaskAttemptIdProto)(nil), "hproto.mapreduce.TaskAttemptIdProto")
	proto.RegisterType((*CounterProto)(nil), "hproto.mapreduce.CounterProto")
	proto.RegisterType((*CounterGroupProto)(nil), "hproto.mapreduce.CounterGroupProto")
	proto.RegisterType((*CountersProto)(nil), "hproto.mapreduce.CountersProto")
	proto.RegisterType((*TaskReportProto)(nil), "hproto.mapreduce.TaskReportProto")
	proto.RegisterType((*TaskAttemptReportProto)(nil), "hproto.mapreduce.TaskAttemptReportProto")
	proto.RegisterType((*JobReportProto)(nil), "hproto.mapreduce.JobReportProto")
	proto.RegisterType((*AMInfoProto)(nil), "hproto.mapreduce.AMInfoProto")
	proto.RegisterType((*TaskAttemptCompletionEventProto)(nil), "hproto.mapreduce.TaskAttemptCompletionEventProto")
	proto.RegisterType((*StringCounterMapProto)(nil), "hproto.mapreduce.StringCounterMapProto")
	proto.RegisterType((*StringCounterGroupMapProto)(nil), "hproto.mapreduce.StringCounterGroupMapProto")
	proto.RegisterEnum("hproto.mapreduce.TaskTypeProto", TaskTypeProto_name, TaskTypeProto_value)
	proto.RegisterEnum("hproto.mapreduce.TaskStateProto", TaskStateProto_name, TaskStateProto_value)
	proto.RegisterEnum("hproto.mapreduce.PhaseProto", PhaseProto_name, PhaseProto_value)
	proto.RegisterEnum("hproto.mapreduce.TaskAttemptStateProto", TaskAttemptStateProto_name, TaskAttemptStateProto_value)
	proto.RegisterEnum("hproto.mapreduce.JobStateProto", JobStateProto_name, JobStateProto_value)
	proto.RegisterEnum("hproto.mapreduce.TaskAttemptCompletionEventStatusProto", TaskAttemptCompletionEventStatusProto_name, TaskAttemptCompletionEventStatusProto_value)
}

func init() {
	proto.RegisterFile("gopkg.in/freddierice/go-hproto.v1/mapreduce/mr_protos.proto", fileDescriptor2)
}

var fileDescriptor2 = []byte{
	// 1582 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xcc, 0x58, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0x96, 0xed, 0xf8, 0xef, 0x38, 0xfe, 0xc9, 0xb4, 0x8d, 0xdc, 0x88, 0x36, 0xc5, 0xb4, 0xb4,
	0x44, 0xe0, 0x8a, 0x82, 0x4a, 0x4b, 0x91, 0xc0, 0x75, 0x9c, 0xd6, 0x21, 0xb1, 0xad, 0xb5, 0x2d,
	0x2e, 0xa8, 0xb4, 0xda, 0xd8, 0x1b, 0x67, 0x1b, 0x7b, 0x77, 0xd9, 0xd9, 0x8d, 0x94, 0x7b, 0x2e,
	0x90, 0xb8, 0x80, 0x47, 0xe0, 0x2d, 0x78, 0x05, 0x5e, 0x81, 0x67, 0xe0, 0x21, 0xe0, 0xcc, 0x99,
	0x59, 0xef, 0xda, 0x71, 0xfa, 0x7b, 0xc3, 0x4d, 0xbb, 0xf3, 0x9d, 0x9f, 0x39, 0xdf, 0x99, 0x33,
	0xe7, 0x8c, 0x03, 0x4f, 0x26, 0x8e, 0x7b, 0x3a, 0xa9, 0x5b, 0xf6, 0xfd, 0x63, 0xcf, 0x1c, 0x8f,
	0x2d, 0xd3, 0xb3, 0x46, 0xe6, 0xfd, 0x89, 0xf3, 0xd9, 0x89, 0xeb, 0x39, 0xbe, 0x53, 0x3f, 0xfb,
	0xfc, 0xfe, 0xcc, 0x70, 0x51, 0x14, 0x20, 0x3c, 0xf3, 0x74, 0x42, 0x79, 0x9d, 0xfe, 0x63, 0x15,
	0xa5, 0x34, 0xd7, 0xd8, 0x7a, 0xf4, 0x7a, 0x77, 0xe7, 0x86, 0x67, 0xd3, 0x3f, 0x0b, 0xbe, 0x6a,
	0x03, 0x80, 0x7d, 0xe7, 0xa8, 0x3d, 0xee, 0x91, 0xe7, 0x87, 0x90, 0x31, 0x5c, 0x57, 0xb7, 0xc6,
	0xd5, 0xc4, 0xad, 0xc4, 0xbd, 0xc2, 0x83, 0xed, 0xba, 0x72, 0x20, 0x0c, 0xeb, 0x0d, 0xd7, 0x9d,
	0x5a, 0x23, 0xc3, 0xb7, 0x1c, 0x5b, 0x19, 0x68, 0x69, 0x54, 0x6f, 0x8f, 0x59, 0x09, 0x92, 0x68,
	0x93, 0x44, 0x9b, 0xb4, 0x86, 0x5f, 0xb5, 0xdf, 0x13, 0x50, 0x18, 0x18, 0xfc, 0x34, 0xf4, 0xfb,
	0x05, 0x64, 0x5e, 0x3a, 0x47, 0x91, 0xdf, 0x0f, 0xea, 0xcb, 0x14, 0xea, 0x51, 0x14, 0x5a, 0xfa,
	0xa5, 0xf8, 0x66, 0xdf, 0x40, 0xde, 0x47, 0x1f, 0xba, 0x7f, 0xee, 0x9a, 0xe4, 0xbb, 0x14, 0xc5,
	0x13, 0xd9, 0x89, 0x6d, 0x06, 0xa8, 0x21, 0x4d, 0x73, 0xbe, 0x5a, 0xaa, 0x90, 0x52, 0xf3, 0x90,
	0x5e, 0x00, 0x13, 0xaa, 0x0d, 0xdf, 0x37, 0x67, 0xae, 0x1f, 0x11, 0xce, 0xd2, 0x1e, 0xf3, 0xc8,
	0x6e, 0xac, 0xde, 0x21, 0x0c, 0x2d, 0xe3, 0xd3, 0xe2, 0x02, 0xe1, 0x1f, 0x61, 0xbd, 0xe9, 0x04,
	0xb6, 0x6f, 0x7a, 0xd2, 0x2f, 0x83, 0x35, 0xdb, 0x98, 0x99, 0xe4, 0x34, 0xaf, 0xd1, 0x37, 0xfb,
	0x10, 0xd6, 0xc7, 0x16, 0x77, 0xa7, 0xc6, 0xb9, 0x4e, 0xb2, 0x24, 0xc9, 0x0a, 0x0a, 0xeb, 0x08,
	0x95, 0xab, 0x90, 0x3e, 0x33, 0xa6, 0x81, 0x49, 0x71, 0xa7, 0x34, 0xb9, 0xa8, 0xfd, 0x96, 0x80,
	0x0d, 0xe5, 0xfd, 0x99, 0xe7, 0x04, 0xee, 0x7b, 0x6d, 0xd1, 0x84, 0xdc, 0x48, 0xfa, 0xe2, 0xb8,
	0x4b, 0x0a, 0x29, 0xdf, 0xbd, 0x48, 0xb9, 0xef, 0x7b, 0x96, 0x3d, 0x51, 0x7b, 0x1e, 0x1a, 0xae,
	0x4a, 0x6e, 0x68, 0x58, 0x1b, 0x43, 0x51, 0x09, 0xb9, 0x0c, 0xa6, 0x0f, 0x25, 0x25, 0xd4, 0x27,
	0x22, 0x44, 0x8e, 0x61, 0x09, 0xdf, 0x9f, 0xbe, 0xc6, 0x37, 0xf1, 0x99, 0x6f, 0x50, 0x1c, 0xc5,
	0x50, 0x5e, 0xfb, 0x27, 0x05, 0x65, 0x91, 0x7c, 0xcd, 0x74, 0x1d, 0xcf, 0x7f, 0xbf, 0x03, 0xfb,
	0x16, 0x80, 0xec, 0xb8, 0x6f, 0xf8, 0x61, 0x35, 0xdd, 0x5a, 0x6d, 0xda, 0x17, 0x2a, 0xd2, 0x9a,
	0x0a, 0x90, 0xd6, 0x6c, 0x0b, 0x72, 0xa8, 0x3c, 0xf1, 0x4c, 0xce, 0xe9, 0x74, 0x92, 0xda, 0x7c,
	0xcd, 0x6e, 0x00, 0xa0, 0x5f, 0xcf, 0xd7, 0x7d, 0x0b, 0x93, 0xbe, 0x46, 0x67, 0x97, 0x27, 0x64,
	0x80, 0x00, 0xdb, 0x86, 0xc2, 0xb1, 0x65, 0x5b, 0xfc, 0x44, 0xca, 0xd3, 0x24, 0x07, 0x09, 0x91,
	0xc2, 0x93, 0xd8, 0x99, 0x64, 0x16, 0x2f, 0x5e, 0x14, 0xda, 0x42, 0xc2, 0xa3, 0xb3, 0x60, 0x5d,
	0xa8, 0x78, 0x81, 0x6d, 0x63, 0x4e, 0x75, 0x43, 0x16, 0x37, 0xaf, 0x66, 0x29, 0xf9, 0xb7, 0x57,
	0xf3, 0x5b, 0xbc, 0x02, 0x5a, 0x59, 0x59, 0x2b, 0x98, 0xe3, 0x59, 0x32, 0x1e, 0x8c, 0x46, 0x48,
	0xec, 0x38, 0x98, 0x86, 0x3e, 0xab, 0x39, 0x8a, 0xeb, 0xcd, 0x5c, 0x6e, 0x44, 0xf6, 0x4a, 0xc2,
	0x6e, 0x01, 0x56, 0xa1, 0x31, 0xb1, 0x1d, 0xee, 0x5b, 0x23, 0x5e, 0xcd, 0x63, 0x80, 0x54, 0x98,
	0x73, 0xa8, 0xf6, 0x6f, 0x1a, 0x36, 0x63, 0xbe, 0xe2, 0x87, 0x7e, 0x00, 0x65, 0x3a, 0x3c, 0x15,
	0x4b, 0x74, 0xf8, 0x6f, 0x16, 0x4e, 0xd1, 0x8f, 0x63, 0x6c, 0x08, 0x6c, 0xc1, 0x5b, 0xbc, 0x24,
	0xee, 0xbe, 0xd2, 0x61, 0xac, 0x32, 0x2a, 0xfe, 0x12, 0xfc, 0xff, 0x2d, 0x90, 0xbb, 0x50, 0x8e,
	0xf2, 0xac, 0x5b, 0xf6, 0xb1, 0x83, 0xf5, 0x21, 0xfa, 0x42, 0x29, 0x82, 0xdb, 0x88, 0x8a, 0xee,
	0x41, 0xb9, 0xc0, 0x8c, 0x88, 0x2b, 0x4a, 0x47, 0x8e, 0x87, 0x44, 0x98, 0xbc, 0xb5, 0xec, 0x01,
	0xa4, 0xdd, 0x13, 0x83, 0x9b, 0x78, 0x80, 0x22, 0x5d, 0x2b, 0xfa, 0x78, 0x4f, 0x88, 0x55, 0x1f,
	0x27, 0x55, 0x56, 0x87, 0x2b, 0xfc, 0x24, 0x38, 0x3e, 0x9e, 0x9a, 0x7a, 0x9c, 0x25, 0x10, 0xcb,
	0x0d, 0x25, 0xda, 0x8b, 0xc8, 0xde, 0x83, 0x0a, 0xc7, 0xa3, 0x5f, 0x50, 0x2e, 0x90, 0x72, 0x49,
	0xe0, 0x31, 0xcd, 0x1d, 0xd8, 0xb0, 0x9d, 0xb1, 0xa9, 0xcf, 0x0c, 0xdb, 0x98, 0x60, 0xeb, 0x39,
	0x41, 0x2e, 0xd5, 0x75, 0x8a, 0xba, 0x2c, 0x04, 0x87, 0x12, 0x7f, 0x8e, 0xf0, 0x05, 0x5d, 0x51,
	0x5d, 0xd5, 0x22, 0x35, 0xf0, 0xb8, 0x6e, 0x0f, 0x61, 0x1c, 0x57, 0x9b, 0x8b, 0x7e, 0x7d, 0xdf,
	0x95, 0x06, 0x25, 0x32, 0xb8, 0x12, 0x77, 0x8e, 0x32, 0x32, 0xfa, 0x0e, 0xd6, 0x47, 0x8e, 0xed,
	0x1b, 0x96, 0x8d, 0x16, 0x58, 0xa1, 0xe5, 0xc5, 0xf6, 0x44, 0x13, 0xb4, 0x19, 0x2a, 0x84, 0xa5,
	0x59, 0x18, 0x45, 0x48, 0xed, 0xaf, 0x34, 0x94, 0x70, 0x0c, 0xc6, 0x2b, 0xff, 0x5d, 0x07, 0xa7,
	0x30, 0x8a, 0xd7, 0xf5, 0xf6, 0x4a, 0xbb, 0x58, 0x3d, 0xe7, 0x5e, 0xaa, 0xa5, 0xa8, 0x02, 0x54,
	0xd2, 0x97, 0x6a, 0xb9, 0x30, 0xa3, 0x26, 0x2d, 0xcb, 0x19, 0x2b, 0x4a, 0x3a, 0x89, 0xb4, 0xd6,
	0x48, 0xab, 0x24, 0xe1, 0xb9, 0xe2, 0x27, 0x50, 0x19, 0x4d, 0x4d, 0xc3, 0x0e, 0x62, 0xfe, 0xd2,
	0xa4, 0x59, 0x56, 0xf8, 0x5c, 0xf5, 0x0e, 0x94, 0xb8, 0xe9, 0xc7, 0x15, 0x33, 0xa4, 0x58, 0x24,
	0xb4, 0xb7, 0xfa, 0x26, 0x65, 0x5f, 0x73, 0x93, 0x72, 0x17, 0x6e, 0x12, 0x4e, 0xcd, 0x80, 0x9b,
	0x1e, 0xd5, 0x2f, 0x4e, 0x4d, 0xf1, 0xcd, 0xaa, 0x90, 0x45, 0xf6, 0x62, 0x3a, 0x52, 0x51, 0xe6,
	0xb5, 0x70, 0x29, 0xba, 0x96, 0xef, 0x19, 0xa3, 0x53, 0x2c, 0xfd, 0xa1, 0x37, 0xa5, 0x2a, 0xc4,
	0x0b, 0x11, 0x83, 0x96, 0xfb, 0xda, 0x7a, 0x38, 0x70, 0xe7, 0x90, 0xf2, 0xbe, 0x67, 0x4d, 0x4d,
	0x2a, 0x37, 0xe9, 0x5d, 0x2c, 0xd9, 0x23, 0xc8, 0x19, 0x33, 0xba, 0x90, 0x1c, 0x0b, 0x2b, 0xb5,
	0x7a, 0x98, 0x35, 0x0e, 0xc5, 0xdd, 0x94, 0x87, 0x94, 0x35, 0x66, 0x62, 0xc1, 0x05, 0x4d, 0x1e,
	0x1c, 0xcd, 0x2c, 0x95, 0x86, 0xb2, 0xa4, 0x29, 0x21, 0xa2, 0x79, 0x13, 0xb2, 0x16, 0xd7, 0x83,
	0x23, 0x64, 0x5a, 0x41, 0x61, 0xee, 0xeb, 0xf4, 0xb1, 0x31, 0xe5, 0xa6, 0x96, 0xb1, 0xf8, 0x10,
	0x41, 0x2c, 0x91, 0x02, 0x46, 0xd1, 0xf3, 0x2c, 0xc7, 0xb3, 0xfc, 0xf3, 0xea, 0x06, 0x15, 0xd7,
	0xd6, 0x42, 0xad, 0x86, 0x42, 0x55, 0xa8, 0x31, 0x75, 0x41, 0xfa, 0xc4, 0xe2, 0xbe, 0xe3, 0x9d,
	0x13, 0x2d, 0x26, 0x49, 0xc7, 0xa0, 0xda, 0xdf, 0x49, 0x28, 0xc4, 0x22, 0x67, 0x2f, 0x60, 0xd3,
	0x88, 0x5e, 0x8f, 0x17, 0x1b, 0xf9, 0xc7, 0x97, 0x3d, 0x34, 0x97, 0x5a, 0xf9, 0x55, 0x63, 0x85,
	0x68, 0xa9, 0x28, 0x92, 0xcb, 0x45, 0xb1, 0x7c, 0x33, 0x53, 0x6f, 0x7b, 0x33, 0x57, 0x37, 0x9a,
	0xb5, 0xb7, 0x68, 0x34, 0xe9, 0xb7, 0x6d, 0x34, 0x99, 0x4b, 0x1b, 0x4d, 0xed, 0xcf, 0x24, 0x6c,
	0xc7, 0x86, 0x52, 0xd3, 0x99, 0xb9, 0x53, 0x53, 0x24, 0xa4, 0x75, 0x66, 0xda, 0xaa, 0x6f, 0x34,
	0x01, 0xde, 0x71, 0x58, 0xe6, 0x8d, 0x79, 0x5a, 0xbb, 0x90, 0x11, 0x3d, 0x24, 0xe0, 0xaa, 0x89,
	0x7c, 0xf5, 0x4a, 0x07, 0x4b, 0x71, 0xf4, 0xc9, 0x52, 0x3d, 0xc2, 0xa4, 0x1b, 0xf6, 0x18, 0xae,
	0x8b, 0xd6, 0xe2, 0x04, 0xbe, 0x1b, 0xe0, 0xdc, 0x35, 0xbd, 0x33, 0xe4, 0x6c, 0x8c, 0xc7, 0xf3,
	0x3e, 0x93, 0xd7, 0x36, 0x51, 0xa1, 0x4b, 0xf2, 0x3e, 0x89, 0x1b, 0x52, 0x2a, 0x86, 0x42, 0x48,
	0x08, 0xdf, 0x2b, 0xd1, 0x1c, 0x4d, 0x6b, 0x25, 0x85, 0x6b, 0x81, 0x4d, 0xa7, 0x7d, 0x1d, 0x72,
	0xa6, 0x08, 0x40, 0x10, 0x97, 0x69, 0xcf, 0xd2, 0x1a, 0x1b, 0xac, 0x0e, 0xd7, 0x56, 0xbe, 0x6c,
	0x59, 0x05, 0x52, 0xa7, 0xe6, 0xb9, 0x7a, 0x4a, 0x8b, 0x4f, 0xf6, 0x65, 0xf8, 0x12, 0x4f, 0x52,
	0xee, 0x6e, 0x5e, 0x3a, 0x6e, 0x55, 0xe7, 0x95, 0x2f, 0x75, 0x0b, 0xb6, 0x2e, 0x7f, 0xde, 0xae,
	0xd8, 0xe5, 0xf1, 0xe2, 0x2e, 0x1f, 0x5d, 0xba, 0x4b, 0xf4, 0xee, 0x57, 0x5b, 0xed, 0xdc, 0x86,
	0xe2, 0xc2, 0x4f, 0x1f, 0x96, 0x85, 0xd4, 0x61, 0xa3, 0x57, 0x49, 0x30, 0x80, 0x8c, 0xd6, 0xda,
	0x1d, 0x36, 0x5b, 0x95, 0xe4, 0x8e, 0x0d, 0xa5, 0xc5, 0x27, 0xad, 0x90, 0x0e, 0xfa, 0x7a, 0xa7,
	0xf5, 0x03, 0x6a, 0x56, 0x60, 0x1d, 0xbf, 0xfb, 0xcd, 0xe7, 0xa8, 0x7e, 0xd0, 0xda, 0xad, 0x24,
	0xf1, 0x77, 0x0d, 0x20, 0xa2, 0x0d, 0x3b, 0x9d, 0x76, 0xe7, 0x59, 0x25, 0x15, 0x6a, 0x0c, 0x9b,
	0xcd, 0x56, 0x6b, 0x17, 0x35, 0xd6, 0x58, 0x11, 0xf2, 0x88, 0xec, 0x35, 0xda, 0xc2, 0x20, 0xad,
	0x96, 0xdf, 0xb7, 0x0f, 0xc4, 0x32, 0xb3, 0xa3, 0x03, 0x44, 0x0f, 0x00, 0xe1, 0xad, 0xa7, 0xf7,
	0x07, 0x0d, 0x6d, 0x20, 0xbc, 0x25, 0x58, 0x1e, 0xd2, 0x3d, 0x5d, 0x04, 0x99, 0x14, 0x76, 0x28,
	0x7a, 0x3e, 0xdc, 0xdb, 0x3b, 0x68, 0xe1, 0x3e, 0x18, 0x15, 0x2e, 0xbb, 0xda, 0x00, 0x77, 0x58,
	0x87, 0x5c, 0x4f, 0x57, 0x0c, 0xd2, 0x52, 0xb1, 0x79, 0xd0, 0x6a, 0x74, 0x86, 0x3d, 0xdc, 0xe0,
	0xd7, 0x04, 0x5c, 0x5b, 0xf9, 0x22, 0x23, 0x62, 0x0d, 0x45, 0xac, 0x8c, 0x3f, 0x3f, 0x1b, 0xd1,
	0xce, 0x92, 0x57, 0x23, 0xc6, 0xeb, 0x1a, 0x6c, 0xe0, 0xba, 0xd9, 0x3d, 0x3c, 0x6c, 0x0f, 0xf4,
	0x5e, 0xab, 0xb3, 0x2b, 0xe0, 0x35, 0xa2, 0xdb, 0x88, 0xd1, 0x95, 0xfc, 0x1a, 0x21, 0xdd, 0x8c,
	0x5a, 0x2a, 0xba, 0xd9, 0x9d, 0x9f, 0xa0, 0xb8, 0x30, 0x46, 0x05, 0xc3, 0x7d, 0x15, 0x03, 0xd2,
	0xd8, 0xd7, 0xdb, 0x9d, 0xf6, 0x80, 0x12, 0x8b, 0x86, 0xfb, 0xb1, 0xfd, 0x31, 0xc0, 0xfd, 0x85,
	0xb4, 0x92, 0xf6, 0x3c, 0xab, 0xb4, 0x0a, 0x93, 0xca, 0x0a, 0x90, 0xdd, 0xd7, 0x5b, 0x9a, 0xd6,
	0xd5, 0x70, 0xcb, 0x9f, 0x13, 0x70, 0xe7, 0x8d, 0x6e, 0x9d, 0x4c, 0x42, 0xb3, 0x15, 0x7a, 0x4d,
	0xcc, 0x01, 0xe5, 0x38, 0x89, 0xc3, 0xb0, 0x44, 0x40, 0x14, 0x48, 0x8a, 0x6d, 0x60, 0x5d, 0x09,
	0xac, 0xfb, 0xb4, 0xdf, 0x3d, 0x68, 0x0d, 0x5a, 0x18, 0x5b, 0xa8, 0x36, 0x68, 0xf7, 0xc2, 0x08,
	0x9f, 0x3e, 0x84, 0xdb, 0x8e, 0x37, 0xa9, 0x1b, 0xae, 0x31, 0x3a, 0x31, 0x2f, 0x96, 0xed, 0xd9,
	0x03, 0xf9, 0xf7, 0x85, 0xa7, 0xb9, 0x43, 0x8d, 0xa2, 0xe1, 0xbf, 0x24, 0x12, 0x7f, 0x24, 0x12,
	0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x7e, 0x32, 0x13, 0xcf, 0xf9, 0x10, 0x00, 0x00,
}
