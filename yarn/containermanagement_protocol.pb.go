// Code generated by protoc-gen-go.
// source: gopkg.in/freddierice/go-hproto.v1/yarn/containermanagement_protocol.proto
// DO NOT EDIT!

package hproto_yarn

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for ContainerManagementProtocolService service

type ContainerManagementProtocolServiceClient interface {
	StartContainers(ctx context.Context, in *StartContainersRequestProto, opts ...grpc.CallOption) (*StartContainersResponseProto, error)
	StopContainers(ctx context.Context, in *StopContainersRequestProto, opts ...grpc.CallOption) (*StopContainersResponseProto, error)
	GetContainerStatuses(ctx context.Context, in *GetContainerStatusesRequestProto, opts ...grpc.CallOption) (*GetContainerStatusesResponseProto, error)
	IncreaseContainersResource(ctx context.Context, in *IncreaseContainersResourceRequestProto, opts ...grpc.CallOption) (*IncreaseContainersResourceResponseProto, error)
	SignalToContainer(ctx context.Context, in *SignalContainerRequestProto, opts ...grpc.CallOption) (*SignalContainerResponseProto, error)
}

type containerManagementProtocolServiceClient struct {
	cc *grpc.ClientConn
}

func NewContainerManagementProtocolServiceClient(cc *grpc.ClientConn) ContainerManagementProtocolServiceClient {
	return &containerManagementProtocolServiceClient{cc}
}

func (c *containerManagementProtocolServiceClient) StartContainers(ctx context.Context, in *StartContainersRequestProto, opts ...grpc.CallOption) (*StartContainersResponseProto, error) {
	out := new(StartContainersResponseProto)
	err := grpc.Invoke(ctx, "/hproto.yarn.ContainerManagementProtocolService/startContainers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerManagementProtocolServiceClient) StopContainers(ctx context.Context, in *StopContainersRequestProto, opts ...grpc.CallOption) (*StopContainersResponseProto, error) {
	out := new(StopContainersResponseProto)
	err := grpc.Invoke(ctx, "/hproto.yarn.ContainerManagementProtocolService/stopContainers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerManagementProtocolServiceClient) GetContainerStatuses(ctx context.Context, in *GetContainerStatusesRequestProto, opts ...grpc.CallOption) (*GetContainerStatusesResponseProto, error) {
	out := new(GetContainerStatusesResponseProto)
	err := grpc.Invoke(ctx, "/hproto.yarn.ContainerManagementProtocolService/getContainerStatuses", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerManagementProtocolServiceClient) IncreaseContainersResource(ctx context.Context, in *IncreaseContainersResourceRequestProto, opts ...grpc.CallOption) (*IncreaseContainersResourceResponseProto, error) {
	out := new(IncreaseContainersResourceResponseProto)
	err := grpc.Invoke(ctx, "/hproto.yarn.ContainerManagementProtocolService/increaseContainersResource", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerManagementProtocolServiceClient) SignalToContainer(ctx context.Context, in *SignalContainerRequestProto, opts ...grpc.CallOption) (*SignalContainerResponseProto, error) {
	out := new(SignalContainerResponseProto)
	err := grpc.Invoke(ctx, "/hproto.yarn.ContainerManagementProtocolService/signalToContainer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ContainerManagementProtocolService service

type ContainerManagementProtocolServiceServer interface {
	StartContainers(context.Context, *StartContainersRequestProto) (*StartContainersResponseProto, error)
	StopContainers(context.Context, *StopContainersRequestProto) (*StopContainersResponseProto, error)
	GetContainerStatuses(context.Context, *GetContainerStatusesRequestProto) (*GetContainerStatusesResponseProto, error)
	IncreaseContainersResource(context.Context, *IncreaseContainersResourceRequestProto) (*IncreaseContainersResourceResponseProto, error)
	SignalToContainer(context.Context, *SignalContainerRequestProto) (*SignalContainerResponseProto, error)
}

func RegisterContainerManagementProtocolServiceServer(s *grpc.Server, srv ContainerManagementProtocolServiceServer) {
	s.RegisterService(&_ContainerManagementProtocolService_serviceDesc, srv)
}

func _ContainerManagementProtocolService_StartContainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartContainersRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerManagementProtocolServiceServer).StartContainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.yarn.ContainerManagementProtocolService/StartContainers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerManagementProtocolServiceServer).StartContainers(ctx, req.(*StartContainersRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerManagementProtocolService_StopContainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopContainersRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerManagementProtocolServiceServer).StopContainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.yarn.ContainerManagementProtocolService/StopContainers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerManagementProtocolServiceServer).StopContainers(ctx, req.(*StopContainersRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerManagementProtocolService_GetContainerStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContainerStatusesRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerManagementProtocolServiceServer).GetContainerStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.yarn.ContainerManagementProtocolService/GetContainerStatuses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerManagementProtocolServiceServer).GetContainerStatuses(ctx, req.(*GetContainerStatusesRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerManagementProtocolService_IncreaseContainersResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncreaseContainersResourceRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerManagementProtocolServiceServer).IncreaseContainersResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.yarn.ContainerManagementProtocolService/IncreaseContainersResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerManagementProtocolServiceServer).IncreaseContainersResource(ctx, req.(*IncreaseContainersResourceRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerManagementProtocolService_SignalToContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignalContainerRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerManagementProtocolServiceServer).SignalToContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.yarn.ContainerManagementProtocolService/SignalToContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerManagementProtocolServiceServer).SignalToContainer(ctx, req.(*SignalContainerRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

var _ContainerManagementProtocolService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hproto.yarn.ContainerManagementProtocolService",
	HandlerType: (*ContainerManagementProtocolServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "startContainers",
			Handler:    _ContainerManagementProtocolService_StartContainers_Handler,
		},
		{
			MethodName: "stopContainers",
			Handler:    _ContainerManagementProtocolService_StopContainers_Handler,
		},
		{
			MethodName: "getContainerStatuses",
			Handler:    _ContainerManagementProtocolService_GetContainerStatuses_Handler,
		},
		{
			MethodName: "increaseContainersResource",
			Handler:    _ContainerManagementProtocolService_IncreaseContainersResource_Handler,
		},
		{
			MethodName: "signalToContainer",
			Handler:    _ContainerManagementProtocolService_SignalToContainer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor4,
}

func init() {
	proto.RegisterFile("gopkg.in/freddierice/go-hproto.v1/yarn/containermanagement_protocol.proto", fileDescriptor4)
}

var fileDescriptor4 = []byte{
	// 307 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x92, 0xcd, 0x4a, 0xf4, 0x30,
	0x14, 0x86, 0x29, 0x7c, 0xab, 0x7c, 0xa0, 0x58, 0x5c, 0x55, 0x57, 0x6e, 0x1c, 0x17, 0x93, 0xe2,
	0xcf, 0x05, 0xe8, 0xb8, 0x90, 0x59, 0x08, 0xe2, 0xb8, 0x1f, 0x42, 0xe6, 0x4c, 0x1a, 0x9c, 0xc9,
	0xa9, 0x39, 0xe9, 0x80, 0x57, 0xa0, 0x97, 0xe1, 0x85, 0x79, 0x31, 0x76, 0xd2, 0xb1, 0x26, 0x45,
	0x4b, 0x37, 0x25, 0xf0, 0x3e, 0xef, 0x0f, 0x4d, 0xd8, 0x54, 0x61, 0xf9, 0xac, 0xb8, 0x36, 0xf9,
	0xd2, 0xc2, 0x62, 0xa1, 0xc1, 0x6a, 0x09, 0xb9, 0xc2, 0x71, 0x51, 0x5a, 0x74, 0xc8, 0x37, 0xe7,
	0xf9, 0xab, 0xb0, 0x26, 0x97, 0x68, 0x9c, 0xd0, 0x06, 0xec, 0x5a, 0x18, 0xa1, 0x60, 0x0d, 0xc6,
	0xcd, 0x3d, 0x21, 0x71, 0xc5, 0xfd, 0x21, 0xfd, 0xbf, 0xb3, 0x6c, 0xf9, 0xec, 0x7a, 0x60, 0xee,
	0xf6, 0x33, 0x27, 0xb0, 0x9b, 0x5a, 0x6e, 0x02, 0xa9, 0x89, 0xbb, 0xf8, 0xfc, 0xc7, 0x4e, 0x6e,
	0xbf, 0x5b, 0xef, 0xdb, 0xd6, 0x87, 0x5d, 0xe9, 0xac, 0xf1, 0xa4, 0x4b, 0xb6, 0x4f, 0x4e, 0x58,
	0xd7, 0xa2, 0x94, 0x8e, 0x78, 0xb0, 0x84, 0xcf, 0x62, 0xf5, 0x11, 0x5e, 0x2a, 0xa0, 0x26, 0x26,
	0x3b, 0xeb, 0x27, 0xa9, 0x44, 0x43, 0xe0, 0xd1, 0x54, 0xb2, 0x3d, 0x72, 0x58, 0x06, 0x35, 0xa7,
	0x1d, 0x73, 0x28, 0x46, 0x2d, 0xa3, 0x5e, 0x30, 0x2c, 0xa9, 0xd8, 0xa1, 0x82, 0x9f, 0x09, 0xf5,
	0x20, 0x57, 0x11, 0x50, 0x3a, 0x8e, 0x12, 0xee, 0x7e, 0x41, 0xa2, 0x42, 0x3e, 0x00, 0x0f, 0x6b,
	0xdf, 0x12, 0x96, 0x69, 0x23, 0x2d, 0x08, 0x82, 0x68, 0x1a, 0x56, 0xb6, 0xfe, 0xc5, 0x97, 0x51,
	0xdc, 0xf4, 0x4f, 0x30, 0xda, 0x70, 0x35, 0xd8, 0x14, 0x2e, 0x29, 0xd8, 0x01, 0x69, 0x65, 0xc4,
	0xea, 0x09, 0x5b, 0xb4, 0x7b, 0x9f, 0x5e, 0x6f, 0xd5, 0xbe, 0xfb, 0xec, 0x92, 0x41, 0xd3, 0xe4,
	0x86, 0x1d, 0xa3, 0x55, 0x5c, 0x94, 0x42, 0x16, 0x10, 0xd9, 0xfc, 0x71, 0x72, 0xd4, 0xf3, 0xf6,
	0xde, 0x93, 0xe4, 0x23, 0x49, 0xbe, 0x02, 0x00, 0x00, 0xff, 0xff, 0x15, 0x20, 0x9e, 0x3e, 0x3c,
	0x03, 0x00, 0x00,
}
