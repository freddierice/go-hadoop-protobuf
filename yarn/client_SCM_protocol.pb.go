// Code generated by protoc-gen-go.
// source: gopkg.in/freddierice/go-hproto.v1/yarn/client_SCM_protocol.proto
// DO NOT EDIT!

package hproto_yarn

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for ClientSCMProtocolService service

type ClientSCMProtocolServiceClient interface {
	Use(ctx context.Context, in *UseSharedCacheResourceRequestProto, opts ...grpc.CallOption) (*UseSharedCacheResourceResponseProto, error)
	Release(ctx context.Context, in *ReleaseSharedCacheResourceRequestProto, opts ...grpc.CallOption) (*ReleaseSharedCacheResourceResponseProto, error)
}

type clientSCMProtocolServiceClient struct {
	cc *grpc.ClientConn
}

func NewClientSCMProtocolServiceClient(cc *grpc.ClientConn) ClientSCMProtocolServiceClient {
	return &clientSCMProtocolServiceClient{cc}
}

func (c *clientSCMProtocolServiceClient) Use(ctx context.Context, in *UseSharedCacheResourceRequestProto, opts ...grpc.CallOption) (*UseSharedCacheResourceResponseProto, error) {
	out := new(UseSharedCacheResourceResponseProto)
	err := grpc.Invoke(ctx, "/hproto.yarn.ClientSCMProtocolService/use", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientSCMProtocolServiceClient) Release(ctx context.Context, in *ReleaseSharedCacheResourceRequestProto, opts ...grpc.CallOption) (*ReleaseSharedCacheResourceResponseProto, error) {
	out := new(ReleaseSharedCacheResourceResponseProto)
	err := grpc.Invoke(ctx, "/hproto.yarn.ClientSCMProtocolService/release", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ClientSCMProtocolService service

type ClientSCMProtocolServiceServer interface {
	Use(context.Context, *UseSharedCacheResourceRequestProto) (*UseSharedCacheResourceResponseProto, error)
	Release(context.Context, *ReleaseSharedCacheResourceRequestProto) (*ReleaseSharedCacheResourceResponseProto, error)
}

func RegisterClientSCMProtocolServiceServer(s *grpc.Server, srv ClientSCMProtocolServiceServer) {
	s.RegisterService(&_ClientSCMProtocolService_serviceDesc, srv)
}

func _ClientSCMProtocolService_Use_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UseSharedCacheResourceRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientSCMProtocolServiceServer).Use(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.yarn.ClientSCMProtocolService/Use",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientSCMProtocolServiceServer).Use(ctx, req.(*UseSharedCacheResourceRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientSCMProtocolService_Release_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseSharedCacheResourceRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientSCMProtocolServiceServer).Release(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.yarn.ClientSCMProtocolService/Release",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientSCMProtocolServiceServer).Release(ctx, req.(*ReleaseSharedCacheResourceRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClientSCMProtocolService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hproto.yarn.ClientSCMProtocolService",
	HandlerType: (*ClientSCMProtocolServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "use",
			Handler:    _ClientSCMProtocolService_Use_Handler,
		},
		{
			MethodName: "release",
			Handler:    _ClientSCMProtocolService_Release_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor3,
}

func init() {
	proto.RegisterFile("gopkg.in/freddierice/go-hproto.v1/yarn/client_SCM_protocol.proto", fileDescriptor3)
}

var fileDescriptor3 = []byte{
	// 229 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x90, 0xbf, 0x4a, 0x04, 0x31,
	0x10, 0xc6, 0x09, 0x16, 0x42, 0xac, 0xdc, 0x4a, 0x0e, 0x5f, 0xc1, 0xc4, 0x7f, 0x60, 0x2b, 0xb7,
	0xb5, 0x20, 0xb7, 0x58, 0x2f, 0x21, 0x37, 0x6e, 0x82, 0x4b, 0x26, 0xce, 0x64, 0x0f, 0x7c, 0x03,
	0x1f, 0xc3, 0xe7, 0xb4, 0x32, 0x9b, 0x5c, 0x71, 0x87, 0xc5, 0x6d, 0x93, 0x0c, 0x99, 0xef, 0xfb,
	0xfd, 0x20, 0xf2, 0x79, 0xc0, 0xf8, 0x31, 0x28, 0x1f, 0xf4, 0x3b, 0xc1, 0x76, 0xeb, 0x81, 0xbc,
	0x05, 0x3d, 0xe0, 0x8d, 0x8b, 0x84, 0x09, 0xd5, 0xee, 0x4e, 0x7f, 0x19, 0x0a, 0xda, 0x8e, 0x1e,
	0x42, 0xea, 0xbb, 0xf6, 0xa5, 0x2f, 0x0b, 0x8b, 0xa3, 0x2a, 0x43, 0x73, 0xb1, 0x4f, 0xce, 0xb1,
	0xd5, 0x52, 0xdc, 0x7c, 0xf4, 0x0c, 0xb4, 0xcb, 0xeb, 0x0a, 0xe4, 0x8a, 0xbb, 0xff, 0x15, 0xf2,
	0xaa, 0x2d, 0xb2, 0xec, 0x7a, 0xdd, 0xab, 0xba, 0x9a, 0x6c, 0x9c, 0x3c, 0x9b, 0x18, 0x1a, 0xad,
	0x0e, 0x9c, 0xea, 0x8d, 0xa1, 0x73, 0x26, 0xeb, 0x5a, 0x63, 0x1d, 0x6c, 0x80, 0x71, 0x22, 0x9b,
	0xef, 0xcf, 0x09, 0x38, 0x15, 0xc2, 0xea, 0x76, 0x51, 0x81, 0x23, 0x06, 0x86, 0xd2, 0x68, 0x92,
	0x3c, 0x27, 0x18, 0xc1, 0x64, 0xdb, 0xc3, 0x51, 0x79, 0x53, 0x5f, 0x4f, 0x19, 0x1f, 0x17, 0x97,
	0x0e, 0xac, 0xeb, 0x27, 0x79, 0x8d, 0x34, 0x28, 0x13, 0xe7, 0xc8, 0x11, 0xa1, 0x8c, 0xeb, 0xcb,
	0x7f, 0x3f, 0xf3, 0x2d, 0xc4, 0x8f, 0x10, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa8, 0x34, 0xd8,
	0xd2, 0xc7, 0x01, 0x00, 0x00,
}
