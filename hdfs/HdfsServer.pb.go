// Code generated by protoc-gen-go.
// source: gopkg.in/freddierice/go-hproto.v1/hdfs/HdfsServer.proto
// DO NOT EDIT!

package hproto_hdfs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// *
// State of a block replica at a datanode
type ReplicaStateProto int32

const (
	ReplicaStateProto_FINALIZED ReplicaStateProto = 0
	ReplicaStateProto_RBW       ReplicaStateProto = 1
	ReplicaStateProto_RWR       ReplicaStateProto = 2
	ReplicaStateProto_RUR       ReplicaStateProto = 3
	ReplicaStateProto_TEMPORARY ReplicaStateProto = 4
)

var ReplicaStateProto_name = map[int32]string{
	0: "FINALIZED",
	1: "RBW",
	2: "RWR",
	3: "RUR",
	4: "TEMPORARY",
}
var ReplicaStateProto_value = map[string]int32{
	"FINALIZED": 0,
	"RBW":       1,
	"RWR":       2,
	"RUR":       3,
	"TEMPORARY": 4,
}

func (x ReplicaStateProto) Enum() *ReplicaStateProto {
	p := new(ReplicaStateProto)
	*p = x
	return p
}
func (x ReplicaStateProto) String() string {
	return proto.EnumName(ReplicaStateProto_name, int32(x))
}
func (x *ReplicaStateProto) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ReplicaStateProto_value, data, "ReplicaStateProto")
	if err != nil {
		return err
	}
	*x = ReplicaStateProto(value)
	return nil
}
func (ReplicaStateProto) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

type NamenodeCommandProto_Type int32

const (
	NamenodeCommandProto_NamenodeCommand   NamenodeCommandProto_Type = 0
	NamenodeCommandProto_CheckPointCommand NamenodeCommandProto_Type = 1
)

var NamenodeCommandProto_Type_name = map[int32]string{
	0: "NamenodeCommand",
	1: "CheckPointCommand",
}
var NamenodeCommandProto_Type_value = map[string]int32{
	"NamenodeCommand":   0,
	"CheckPointCommand": 1,
}

func (x NamenodeCommandProto_Type) Enum() *NamenodeCommandProto_Type {
	p := new(NamenodeCommandProto_Type)
	*p = x
	return p
}
func (x NamenodeCommandProto_Type) String() string {
	return proto.EnumName(NamenodeCommandProto_Type_name, int32(x))
}
func (x *NamenodeCommandProto_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(NamenodeCommandProto_Type_value, data, "NamenodeCommandProto_Type")
	if err != nil {
		return err
	}
	*x = NamenodeCommandProto_Type(value)
	return nil
}
func (NamenodeCommandProto_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{10, 0}
}

type NamenodeRegistrationProto_NamenodeRoleProto int32

const (
	NamenodeRegistrationProto_NAMENODE   NamenodeRegistrationProto_NamenodeRoleProto = 1
	NamenodeRegistrationProto_BACKUP     NamenodeRegistrationProto_NamenodeRoleProto = 2
	NamenodeRegistrationProto_CHECKPOINT NamenodeRegistrationProto_NamenodeRoleProto = 3
)

var NamenodeRegistrationProto_NamenodeRoleProto_name = map[int32]string{
	1: "NAMENODE",
	2: "BACKUP",
	3: "CHECKPOINT",
}
var NamenodeRegistrationProto_NamenodeRoleProto_value = map[string]int32{
	"NAMENODE":   1,
	"BACKUP":     2,
	"CHECKPOINT": 3,
}

func (x NamenodeRegistrationProto_NamenodeRoleProto) Enum() *NamenodeRegistrationProto_NamenodeRoleProto {
	p := new(NamenodeRegistrationProto_NamenodeRoleProto)
	*p = x
	return p
}
func (x NamenodeRegistrationProto_NamenodeRoleProto) String() string {
	return proto.EnumName(NamenodeRegistrationProto_NamenodeRoleProto_name, int32(x))
}
func (x *NamenodeRegistrationProto_NamenodeRoleProto) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(NamenodeRegistrationProto_NamenodeRoleProto_value, data, "NamenodeRegistrationProto_NamenodeRoleProto")
	if err != nil {
		return err
	}
	*x = NamenodeRegistrationProto_NamenodeRoleProto(value)
	return nil
}
func (NamenodeRegistrationProto_NamenodeRoleProto) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{14, 0}
}

// *
// Block access token information
type BlockKeyProto struct {
	KeyId            *uint32 `protobuf:"varint,1,req,name=keyId" json:"keyId,omitempty"`
	ExpiryDate       *uint64 `protobuf:"varint,2,req,name=expiryDate" json:"expiryDate,omitempty"`
	KeyBytes         []byte  `protobuf:"bytes,3,opt,name=keyBytes" json:"keyBytes,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BlockKeyProto) Reset()                    { *m = BlockKeyProto{} }
func (m *BlockKeyProto) String() string            { return proto.CompactTextString(m) }
func (*BlockKeyProto) ProtoMessage()               {}
func (*BlockKeyProto) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *BlockKeyProto) GetKeyId() uint32 {
	if m != nil && m.KeyId != nil {
		return *m.KeyId
	}
	return 0
}

func (m *BlockKeyProto) GetExpiryDate() uint64 {
	if m != nil && m.ExpiryDate != nil {
		return *m.ExpiryDate
	}
	return 0
}

func (m *BlockKeyProto) GetKeyBytes() []byte {
	if m != nil {
		return m.KeyBytes
	}
	return nil
}

// *
// Current key and set of block keys at the namenode.
type ExportedBlockKeysProto struct {
	IsBlockTokenEnabled *bool            `protobuf:"varint,1,req,name=isBlockTokenEnabled" json:"isBlockTokenEnabled,omitempty"`
	KeyUpdateInterval   *uint64          `protobuf:"varint,2,req,name=keyUpdateInterval" json:"keyUpdateInterval,omitempty"`
	TokenLifeTime       *uint64          `protobuf:"varint,3,req,name=tokenLifeTime" json:"tokenLifeTime,omitempty"`
	CurrentKey          *BlockKeyProto   `protobuf:"bytes,4,req,name=currentKey" json:"currentKey,omitempty"`
	AllKeys             []*BlockKeyProto `protobuf:"bytes,5,rep,name=allKeys" json:"allKeys,omitempty"`
	XXX_unrecognized    []byte           `json:"-"`
}

func (m *ExportedBlockKeysProto) Reset()                    { *m = ExportedBlockKeysProto{} }
func (m *ExportedBlockKeysProto) String() string            { return proto.CompactTextString(m) }
func (*ExportedBlockKeysProto) ProtoMessage()               {}
func (*ExportedBlockKeysProto) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *ExportedBlockKeysProto) GetIsBlockTokenEnabled() bool {
	if m != nil && m.IsBlockTokenEnabled != nil {
		return *m.IsBlockTokenEnabled
	}
	return false
}

func (m *ExportedBlockKeysProto) GetKeyUpdateInterval() uint64 {
	if m != nil && m.KeyUpdateInterval != nil {
		return *m.KeyUpdateInterval
	}
	return 0
}

func (m *ExportedBlockKeysProto) GetTokenLifeTime() uint64 {
	if m != nil && m.TokenLifeTime != nil {
		return *m.TokenLifeTime
	}
	return 0
}

func (m *ExportedBlockKeysProto) GetCurrentKey() *BlockKeyProto {
	if m != nil {
		return m.CurrentKey
	}
	return nil
}

func (m *ExportedBlockKeysProto) GetAllKeys() []*BlockKeyProto {
	if m != nil {
		return m.AllKeys
	}
	return nil
}

// *
// Block and datanodes where is it located
type BlockWithLocationsProto struct {
	Block            *BlockProto        `protobuf:"bytes,1,req,name=block" json:"block,omitempty"`
	DatanodeUuids    []string           `protobuf:"bytes,2,rep,name=datanodeUuids" json:"datanodeUuids,omitempty"`
	StorageUuids     []string           `protobuf:"bytes,3,rep,name=storageUuids" json:"storageUuids,omitempty"`
	StorageTypes     []StorageTypeProto `protobuf:"varint,4,rep,name=storageTypes,enum=hproto.hdfs.StorageTypeProto" json:"storageTypes,omitempty"`
	Indices          []byte             `protobuf:"bytes,5,opt,name=indices" json:"indices,omitempty"`
	DataBlockNum     *uint32            `protobuf:"varint,6,opt,name=dataBlockNum" json:"dataBlockNum,omitempty"`
	CellSize         *uint32            `protobuf:"varint,7,opt,name=cellSize" json:"cellSize,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *BlockWithLocationsProto) Reset()                    { *m = BlockWithLocationsProto{} }
func (m *BlockWithLocationsProto) String() string            { return proto.CompactTextString(m) }
func (*BlockWithLocationsProto) ProtoMessage()               {}
func (*BlockWithLocationsProto) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *BlockWithLocationsProto) GetBlock() *BlockProto {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *BlockWithLocationsProto) GetDatanodeUuids() []string {
	if m != nil {
		return m.DatanodeUuids
	}
	return nil
}

func (m *BlockWithLocationsProto) GetStorageUuids() []string {
	if m != nil {
		return m.StorageUuids
	}
	return nil
}

func (m *BlockWithLocationsProto) GetStorageTypes() []StorageTypeProto {
	if m != nil {
		return m.StorageTypes
	}
	return nil
}

func (m *BlockWithLocationsProto) GetIndices() []byte {
	if m != nil {
		return m.Indices
	}
	return nil
}

func (m *BlockWithLocationsProto) GetDataBlockNum() uint32 {
	if m != nil && m.DataBlockNum != nil {
		return *m.DataBlockNum
	}
	return 0
}

func (m *BlockWithLocationsProto) GetCellSize() uint32 {
	if m != nil && m.CellSize != nil {
		return *m.CellSize
	}
	return 0
}

// *
// List of block with locations
type BlocksWithLocationsProto struct {
	Blocks           []*BlockWithLocationsProto `protobuf:"bytes,1,rep,name=blocks" json:"blocks,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *BlocksWithLocationsProto) Reset()                    { *m = BlocksWithLocationsProto{} }
func (m *BlocksWithLocationsProto) String() string            { return proto.CompactTextString(m) }
func (*BlocksWithLocationsProto) ProtoMessage()               {}
func (*BlocksWithLocationsProto) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *BlocksWithLocationsProto) GetBlocks() []*BlockWithLocationsProto {
	if m != nil {
		return m.Blocks
	}
	return nil
}

// *
// Editlog information with available transactions
type RemoteEditLogProto struct {
	StartTxId        *uint64 `protobuf:"varint,1,req,name=startTxId" json:"startTxId,omitempty"`
	EndTxId          *uint64 `protobuf:"varint,2,req,name=endTxId" json:"endTxId,omitempty"`
	IsInProgress     *bool   `protobuf:"varint,3,opt,name=isInProgress,def=0" json:"isInProgress,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RemoteEditLogProto) Reset()                    { *m = RemoteEditLogProto{} }
func (m *RemoteEditLogProto) String() string            { return proto.CompactTextString(m) }
func (*RemoteEditLogProto) ProtoMessage()               {}
func (*RemoteEditLogProto) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

const Default_RemoteEditLogProto_IsInProgress bool = false

func (m *RemoteEditLogProto) GetStartTxId() uint64 {
	if m != nil && m.StartTxId != nil {
		return *m.StartTxId
	}
	return 0
}

func (m *RemoteEditLogProto) GetEndTxId() uint64 {
	if m != nil && m.EndTxId != nil {
		return *m.EndTxId
	}
	return 0
}

func (m *RemoteEditLogProto) GetIsInProgress() bool {
	if m != nil && m.IsInProgress != nil {
		return *m.IsInProgress
	}
	return Default_RemoteEditLogProto_IsInProgress
}

// *
// Enumeration of editlogs available on a remote namenode
type RemoteEditLogManifestProto struct {
	Logs             []*RemoteEditLogProto `protobuf:"bytes,1,rep,name=logs" json:"logs,omitempty"`
	CommittedTxnId   *uint64               `protobuf:"varint,2,req,name=committedTxnId" json:"committedTxnId,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *RemoteEditLogManifestProto) Reset()                    { *m = RemoteEditLogManifestProto{} }
func (m *RemoteEditLogManifestProto) String() string            { return proto.CompactTextString(m) }
func (*RemoteEditLogManifestProto) ProtoMessage()               {}
func (*RemoteEditLogManifestProto) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *RemoteEditLogManifestProto) GetLogs() []*RemoteEditLogProto {
	if m != nil {
		return m.Logs
	}
	return nil
}

func (m *RemoteEditLogManifestProto) GetCommittedTxnId() uint64 {
	if m != nil && m.CommittedTxnId != nil {
		return *m.CommittedTxnId
	}
	return 0
}

// *
// Namespace information that describes namespace on a namenode
type NamespaceInfoProto struct {
	BuildVersion     *string           `protobuf:"bytes,1,req,name=buildVersion" json:"buildVersion,omitempty"`
	Unused           *uint32           `protobuf:"varint,2,req,name=unused" json:"unused,omitempty"`
	BlockPoolID      *string           `protobuf:"bytes,3,req,name=blockPoolID" json:"blockPoolID,omitempty"`
	StorageInfo      *StorageInfoProto `protobuf:"bytes,4,req,name=storageInfo" json:"storageInfo,omitempty"`
	SoftwareVersion  *string           `protobuf:"bytes,5,req,name=softwareVersion" json:"softwareVersion,omitempty"`
	Capabilities     *uint64           `protobuf:"varint,6,opt,name=capabilities,def=0" json:"capabilities,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *NamespaceInfoProto) Reset()                    { *m = NamespaceInfoProto{} }
func (m *NamespaceInfoProto) String() string            { return proto.CompactTextString(m) }
func (*NamespaceInfoProto) ProtoMessage()               {}
func (*NamespaceInfoProto) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

const Default_NamespaceInfoProto_Capabilities uint64 = 0

func (m *NamespaceInfoProto) GetBuildVersion() string {
	if m != nil && m.BuildVersion != nil {
		return *m.BuildVersion
	}
	return ""
}

func (m *NamespaceInfoProto) GetUnused() uint32 {
	if m != nil && m.Unused != nil {
		return *m.Unused
	}
	return 0
}

func (m *NamespaceInfoProto) GetBlockPoolID() string {
	if m != nil && m.BlockPoolID != nil {
		return *m.BlockPoolID
	}
	return ""
}

func (m *NamespaceInfoProto) GetStorageInfo() *StorageInfoProto {
	if m != nil {
		return m.StorageInfo
	}
	return nil
}

func (m *NamespaceInfoProto) GetSoftwareVersion() string {
	if m != nil && m.SoftwareVersion != nil {
		return *m.SoftwareVersion
	}
	return ""
}

func (m *NamespaceInfoProto) GetCapabilities() uint64 {
	if m != nil && m.Capabilities != nil {
		return *m.Capabilities
	}
	return Default_NamespaceInfoProto_Capabilities
}

// *
// Block that needs to be recovered with at a given location
type RecoveringBlockProto struct {
	NewGenStamp   *uint64                   `protobuf:"varint,1,req,name=newGenStamp" json:"newGenStamp,omitempty"`
	Block         *LocatedBlockProto        `protobuf:"bytes,2,req,name=block" json:"block,omitempty"`
	TruncateBlock *BlockProto               `protobuf:"bytes,3,opt,name=truncateBlock" json:"truncateBlock,omitempty"`
	EcPolicy      *ErasureCodingPolicyProto `protobuf:"bytes,4,opt,name=ecPolicy" json:"ecPolicy,omitempty"`
	// block indices of striped internal blocks for each storage in LocatedBlock
	BlockIndices     []byte `protobuf:"bytes,5,opt,name=blockIndices" json:"blockIndices,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RecoveringBlockProto) Reset()                    { *m = RecoveringBlockProto{} }
func (m *RecoveringBlockProto) String() string            { return proto.CompactTextString(m) }
func (*RecoveringBlockProto) ProtoMessage()               {}
func (*RecoveringBlockProto) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

func (m *RecoveringBlockProto) GetNewGenStamp() uint64 {
	if m != nil && m.NewGenStamp != nil {
		return *m.NewGenStamp
	}
	return 0
}

func (m *RecoveringBlockProto) GetBlock() *LocatedBlockProto {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *RecoveringBlockProto) GetTruncateBlock() *BlockProto {
	if m != nil {
		return m.TruncateBlock
	}
	return nil
}

func (m *RecoveringBlockProto) GetEcPolicy() *ErasureCodingPolicyProto {
	if m != nil {
		return m.EcPolicy
	}
	return nil
}

func (m *RecoveringBlockProto) GetBlockIndices() []byte {
	if m != nil {
		return m.BlockIndices
	}
	return nil
}

// *
// Unique signature to identify checkpoint transactions.
type CheckpointSignatureProto struct {
	BlockPoolId              *string           `protobuf:"bytes,1,req,name=blockPoolId" json:"blockPoolId,omitempty"`
	MostRecentCheckpointTxId *uint64           `protobuf:"varint,2,req,name=mostRecentCheckpointTxId" json:"mostRecentCheckpointTxId,omitempty"`
	CurSegmentTxId           *uint64           `protobuf:"varint,3,req,name=curSegmentTxId" json:"curSegmentTxId,omitempty"`
	StorageInfo              *StorageInfoProto `protobuf:"bytes,4,req,name=storageInfo" json:"storageInfo,omitempty"`
	XXX_unrecognized         []byte            `json:"-"`
}

func (m *CheckpointSignatureProto) Reset()                    { *m = CheckpointSignatureProto{} }
func (m *CheckpointSignatureProto) String() string            { return proto.CompactTextString(m) }
func (*CheckpointSignatureProto) ProtoMessage()               {}
func (*CheckpointSignatureProto) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

func (m *CheckpointSignatureProto) GetBlockPoolId() string {
	if m != nil && m.BlockPoolId != nil {
		return *m.BlockPoolId
	}
	return ""
}

func (m *CheckpointSignatureProto) GetMostRecentCheckpointTxId() uint64 {
	if m != nil && m.MostRecentCheckpointTxId != nil {
		return *m.MostRecentCheckpointTxId
	}
	return 0
}

func (m *CheckpointSignatureProto) GetCurSegmentTxId() uint64 {
	if m != nil && m.CurSegmentTxId != nil {
		return *m.CurSegmentTxId
	}
	return 0
}

func (m *CheckpointSignatureProto) GetStorageInfo() *StorageInfoProto {
	if m != nil {
		return m.StorageInfo
	}
	return nil
}

// *
// Command returned from primary to checkpointing namenode.
// This command has checkpoint signature that identifies
// checkpoint transaction and is needed for further
// communication related to checkpointing.
type CheckpointCommandProto struct {
	// Unique signature to identify checkpoint transation
	Signature *CheckpointSignatureProto `protobuf:"bytes,1,req,name=signature" json:"signature,omitempty"`
	// If true, return transfer image to primary upon the completion of checkpoint
	NeedToReturnImage *bool  `protobuf:"varint,2,req,name=needToReturnImage" json:"needToReturnImage,omitempty"`
	XXX_unrecognized  []byte `json:"-"`
}

func (m *CheckpointCommandProto) Reset()                    { *m = CheckpointCommandProto{} }
func (m *CheckpointCommandProto) String() string            { return proto.CompactTextString(m) }
func (*CheckpointCommandProto) ProtoMessage()               {}
func (*CheckpointCommandProto) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{9} }

func (m *CheckpointCommandProto) GetSignature() *CheckpointSignatureProto {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *CheckpointCommandProto) GetNeedToReturnImage() bool {
	if m != nil && m.NeedToReturnImage != nil {
		return *m.NeedToReturnImage
	}
	return false
}

// *
// Command sent from one namenode to another namenode.
type NamenodeCommandProto struct {
	Action           *uint32                    `protobuf:"varint,1,req,name=action" json:"action,omitempty"`
	Type             *NamenodeCommandProto_Type `protobuf:"varint,2,req,name=type,enum=hproto.hdfs.NamenodeCommandProto_Type" json:"type,omitempty"`
	CheckpointCmd    *CheckpointCommandProto    `protobuf:"bytes,3,opt,name=checkpointCmd" json:"checkpointCmd,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *NamenodeCommandProto) Reset()                    { *m = NamenodeCommandProto{} }
func (m *NamenodeCommandProto) String() string            { return proto.CompactTextString(m) }
func (*NamenodeCommandProto) ProtoMessage()               {}
func (*NamenodeCommandProto) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{10} }

func (m *NamenodeCommandProto) GetAction() uint32 {
	if m != nil && m.Action != nil {
		return *m.Action
	}
	return 0
}

func (m *NamenodeCommandProto) GetType() NamenodeCommandProto_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return NamenodeCommandProto_NamenodeCommand
}

func (m *NamenodeCommandProto) GetCheckpointCmd() *CheckpointCommandProto {
	if m != nil {
		return m.CheckpointCmd
	}
	return nil
}

// *
// void request
type VersionRequestProto struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *VersionRequestProto) Reset()                    { *m = VersionRequestProto{} }
func (m *VersionRequestProto) String() string            { return proto.CompactTextString(m) }
func (*VersionRequestProto) ProtoMessage()               {}
func (*VersionRequestProto) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{11} }

// *
// Version response from namenode.
type VersionResponseProto struct {
	Info             *NamespaceInfoProto `protobuf:"bytes,1,req,name=info" json:"info,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *VersionResponseProto) Reset()                    { *m = VersionResponseProto{} }
func (m *VersionResponseProto) String() string            { return proto.CompactTextString(m) }
func (*VersionResponseProto) ProtoMessage()               {}
func (*VersionResponseProto) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{12} }

func (m *VersionResponseProto) GetInfo() *NamespaceInfoProto {
	if m != nil {
		return m.Info
	}
	return nil
}

// *
// Common node information shared by all the nodes in the cluster
type StorageInfoProto struct {
	LayoutVersion    *uint32 `protobuf:"varint,1,req,name=layoutVersion" json:"layoutVersion,omitempty"`
	NamespceID       *uint32 `protobuf:"varint,2,req,name=namespceID" json:"namespceID,omitempty"`
	ClusterID        *string `protobuf:"bytes,3,req,name=clusterID" json:"clusterID,omitempty"`
	CTime            *uint64 `protobuf:"varint,4,req,name=cTime" json:"cTime,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *StorageInfoProto) Reset()                    { *m = StorageInfoProto{} }
func (m *StorageInfoProto) String() string            { return proto.CompactTextString(m) }
func (*StorageInfoProto) ProtoMessage()               {}
func (*StorageInfoProto) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{13} }

func (m *StorageInfoProto) GetLayoutVersion() uint32 {
	if m != nil && m.LayoutVersion != nil {
		return *m.LayoutVersion
	}
	return 0
}

func (m *StorageInfoProto) GetNamespceID() uint32 {
	if m != nil && m.NamespceID != nil {
		return *m.NamespceID
	}
	return 0
}

func (m *StorageInfoProto) GetClusterID() string {
	if m != nil && m.ClusterID != nil {
		return *m.ClusterID
	}
	return ""
}

func (m *StorageInfoProto) GetCTime() uint64 {
	if m != nil && m.CTime != nil {
		return *m.CTime
	}
	return 0
}

// *
// Information sent by a namenode to identify itself to the primary namenode.
type NamenodeRegistrationProto struct {
	RpcAddress       *string                                      `protobuf:"bytes,1,req,name=rpcAddress" json:"rpcAddress,omitempty"`
	HttpAddress      *string                                      `protobuf:"bytes,2,req,name=httpAddress" json:"httpAddress,omitempty"`
	StorageInfo      *StorageInfoProto                            `protobuf:"bytes,3,req,name=storageInfo" json:"storageInfo,omitempty"`
	Role             *NamenodeRegistrationProto_NamenodeRoleProto `protobuf:"varint,4,opt,name=role,enum=hproto.hdfs.NamenodeRegistrationProto_NamenodeRoleProto,def=1" json:"role,omitempty"`
	XXX_unrecognized []byte                                       `json:"-"`
}

func (m *NamenodeRegistrationProto) Reset()                    { *m = NamenodeRegistrationProto{} }
func (m *NamenodeRegistrationProto) String() string            { return proto.CompactTextString(m) }
func (*NamenodeRegistrationProto) ProtoMessage()               {}
func (*NamenodeRegistrationProto) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{14} }

const Default_NamenodeRegistrationProto_Role NamenodeRegistrationProto_NamenodeRoleProto = NamenodeRegistrationProto_NAMENODE

func (m *NamenodeRegistrationProto) GetRpcAddress() string {
	if m != nil && m.RpcAddress != nil {
		return *m.RpcAddress
	}
	return ""
}

func (m *NamenodeRegistrationProto) GetHttpAddress() string {
	if m != nil && m.HttpAddress != nil {
		return *m.HttpAddress
	}
	return ""
}

func (m *NamenodeRegistrationProto) GetStorageInfo() *StorageInfoProto {
	if m != nil {
		return m.StorageInfo
	}
	return nil
}

func (m *NamenodeRegistrationProto) GetRole() NamenodeRegistrationProto_NamenodeRoleProto {
	if m != nil && m.Role != nil {
		return *m.Role
	}
	return Default_NamenodeRegistrationProto_Role
}

func init() {
	proto.RegisterType((*BlockKeyProto)(nil), "hproto.hdfs.BlockKeyProto")
	proto.RegisterType((*ExportedBlockKeysProto)(nil), "hproto.hdfs.ExportedBlockKeysProto")
	proto.RegisterType((*BlockWithLocationsProto)(nil), "hproto.hdfs.BlockWithLocationsProto")
	proto.RegisterType((*BlocksWithLocationsProto)(nil), "hproto.hdfs.BlocksWithLocationsProto")
	proto.RegisterType((*RemoteEditLogProto)(nil), "hproto.hdfs.RemoteEditLogProto")
	proto.RegisterType((*RemoteEditLogManifestProto)(nil), "hproto.hdfs.RemoteEditLogManifestProto")
	proto.RegisterType((*NamespaceInfoProto)(nil), "hproto.hdfs.NamespaceInfoProto")
	proto.RegisterType((*RecoveringBlockProto)(nil), "hproto.hdfs.RecoveringBlockProto")
	proto.RegisterType((*CheckpointSignatureProto)(nil), "hproto.hdfs.CheckpointSignatureProto")
	proto.RegisterType((*CheckpointCommandProto)(nil), "hproto.hdfs.CheckpointCommandProto")
	proto.RegisterType((*NamenodeCommandProto)(nil), "hproto.hdfs.NamenodeCommandProto")
	proto.RegisterType((*VersionRequestProto)(nil), "hproto.hdfs.VersionRequestProto")
	proto.RegisterType((*VersionResponseProto)(nil), "hproto.hdfs.VersionResponseProto")
	proto.RegisterType((*StorageInfoProto)(nil), "hproto.hdfs.StorageInfoProto")
	proto.RegisterType((*NamenodeRegistrationProto)(nil), "hproto.hdfs.NamenodeRegistrationProto")
	proto.RegisterEnum("hproto.hdfs.ReplicaStateProto", ReplicaStateProto_name, ReplicaStateProto_value)
	proto.RegisterEnum("hproto.hdfs.NamenodeCommandProto_Type", NamenodeCommandProto_Type_name, NamenodeCommandProto_Type_value)
	proto.RegisterEnum("hproto.hdfs.NamenodeRegistrationProto_NamenodeRoleProto", NamenodeRegistrationProto_NamenodeRoleProto_name, NamenodeRegistrationProto_NamenodeRoleProto_value)
}

func init() {
	proto.RegisterFile("gopkg.in/freddierice/go-hproto.v1/hdfs/HdfsServer.proto", fileDescriptor2)
}

var fileDescriptor2 = []byte{
	// 1272 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x56, 0x5b, 0x73, 0xdb, 0x44,
	0x14, 0xc6, 0x97, 0xdc, 0x4e, 0xe2, 0xd4, 0xd9, 0xa6, 0xad, 0xc9, 0x40, 0x9b, 0x11, 0x6d, 0x27,
	0x30, 0xd4, 0x69, 0x0d, 0x33, 0x30, 0x99, 0x76, 0x18, 0xdb, 0x31, 0xd4, 0x93, 0xd4, 0xf5, 0xac,
	0x9d, 0x16, 0x78, 0x53, 0xa4, 0xb5, 0xb2, 0x13, 0x59, 0x2b, 0xa4, 0x55, 0x1b, 0xf3, 0xcc, 0x1b,
	0x3c, 0xf0, 0xc0, 0x0f, 0xe0, 0x1f, 0xf0, 0xc4, 0x0f, 0xe2, 0x91, 0x7f, 0xc1, 0xd9, 0x95, 0x6c,
	0x6b, 0xe3, 0x84, 0xcb, 0xf0, 0xe2, 0xf1, 0x9e, 0xcb, 0x77, 0x2e, 0x7b, 0xbe, 0xb3, 0x82, 0xcf,
	0x3c, 0x11, 0x9e, 0x7b, 0x75, 0x1e, 0xec, 0x8f, 0x22, 0xe6, 0xba, 0x9c, 0x45, 0xdc, 0x61, 0xfb,
	0x9e, 0x78, 0x74, 0x16, 0x46, 0x42, 0x8a, 0xfa, 0x9b, 0x27, 0xfb, 0x67, 0xee, 0x28, 0xde, 0x7f,
	0x8e, 0x3f, 0x03, 0x16, 0xbd, 0x61, 0x51, 0x5d, 0x2b, 0xc8, 0x7a, 0x66, 0xa0, 0xb4, 0x3b, 0x4f,
	0xfe, 0x25, 0x8a, 0xfa, 0x49, 0xfd, 0x2d, 0x1b, 0x2a, 0x2d, 0x5f, 0x38, 0xe7, 0x47, 0x6c, 0xd2,
	0xd7, 0x80, 0xdb, 0xb0, 0x74, 0xce, 0x26, 0x5d, 0xb7, 0x56, 0xd8, 0x2d, 0xee, 0x55, 0x68, 0x7a,
	0x20, 0x77, 0x01, 0xd8, 0x45, 0xc8, 0xa3, 0xc9, 0xa1, 0x2d, 0x59, 0xad, 0x88, 0xaa, 0x32, 0xcd,
	0x49, 0xc8, 0x0e, 0xac, 0xa2, 0x61, 0x6b, 0x22, 0x59, 0x5c, 0x2b, 0xed, 0x16, 0xf6, 0x36, 0xe8,
	0xec, 0x6c, 0xfd, 0x5c, 0x84, 0xdb, 0x9d, 0x8b, 0x50, 0x44, 0x92, 0xb9, 0xd3, 0x58, 0x71, 0x1a,
	0xec, 0x31, 0xdc, 0xe4, 0xb1, 0x96, 0x0d, 0xc5, 0x39, 0x0b, 0x3a, 0x81, 0x7d, 0xea, 0xb3, 0x34,
	0xf4, 0x2a, 0xbd, 0x4a, 0x45, 0x3e, 0x86, 0x2d, 0x04, 0x3e, 0x09, 0x5d, 0x8c, 0xda, 0x0d, 0x24,
	0xb6, 0xc2, 0xf6, 0xb3, 0x7c, 0x16, 0x15, 0xe4, 0x3e, 0x54, 0xa4, 0xf2, 0x3e, 0xe6, 0x23, 0x36,
	0xe4, 0x63, 0x86, 0xb9, 0x29, 0x4b, 0x53, 0x48, 0x0e, 0x00, 0x9c, 0x24, 0x8a, 0x58, 0x20, 0x31,
	0xb3, 0x5a, 0x19, 0x4d, 0xd6, 0x1b, 0x3b, 0xf5, 0x5c, 0x63, 0xeb, 0x46, 0x8b, 0x68, 0xce, 0x9a,
	0x7c, 0x0a, 0x2b, 0xb6, 0xef, 0xab, 0x8a, 0x6a, 0x4b, 0xbb, 0xa5, 0x7f, 0x70, 0x9c, 0x9a, 0x5a,
	0xbf, 0x15, 0xe1, 0x8e, 0x56, 0xbd, 0xe6, 0xf2, 0xec, 0x58, 0x38, 0xb6, 0xe4, 0x22, 0xc8, 0x7a,
	0xf2, 0x08, 0x96, 0x4e, 0x95, 0x4a, 0x77, 0x61, 0xbd, 0x71, 0x67, 0x11, 0x2f, 0x05, 0x4b, 0xad,
	0x54, 0x89, 0x58, 0xb2, 0x1d, 0x08, 0x97, 0x9d, 0x24, 0xdc, 0x8d, 0xb1, 0x19, 0xa5, 0xbd, 0x35,
	0x6a, 0x0a, 0x89, 0x05, 0x1b, 0xb1, 0x14, 0x91, 0xed, 0x65, 0x46, 0x25, 0x6d, 0x64, 0xc8, 0x48,
	0x73, 0x66, 0x33, 0x9c, 0x84, 0x78, 0x8f, 0x65, 0xb4, 0xd9, 0x6c, 0xbc, 0x6f, 0xc4, 0x1f, 0xcc,
	0x0d, 0xd2, 0x2c, 0x0c, 0x17, 0x52, 0x83, 0x15, 0x1e, 0xb8, 0x38, 0x74, 0xaa, 0x1b, 0x6a, 0x0a,
	0xa6, 0x47, 0x95, 0x80, 0xca, 0x48, 0xe7, 0xdf, 0x4b, 0xc6, 0xb5, 0x65, 0x54, 0x57, 0xa8, 0x21,
	0x53, 0x43, 0xe4, 0x30, 0xdf, 0x1f, 0xf0, 0xef, 0x59, 0x6d, 0x45, 0xeb, 0x67, 0x67, 0xeb, 0x6b,
	0xa8, 0x69, 0xbb, 0xf8, 0x8a, 0x8e, 0x3d, 0x85, 0x65, 0xdd, 0x8b, 0x18, 0x5b, 0xa6, 0xae, 0xe0,
	0xfe, 0x62, 0xcb, 0x16, 0xbd, 0x68, 0xe6, 0x63, 0xbd, 0x05, 0x42, 0xd9, 0x58, 0x48, 0xd6, 0x71,
	0xb9, 0x3c, 0x16, 0x5e, 0x8a, 0xf9, 0x1e, 0xac, 0xc5, 0xd2, 0x8e, 0xe4, 0xf0, 0x22, 0xa3, 0x42,
	0x99, 0xce, 0x05, 0xaa, 0x4e, 0x16, 0xb8, 0x5a, 0x97, 0xce, 0xde, 0xf4, 0x48, 0x3e, 0x84, 0x0d,
	0x1e, 0x77, 0x03, 0x04, 0xf1, 0x22, 0x16, 0xa7, 0x64, 0x58, 0x3d, 0x58, 0x1a, 0xd9, 0x7e, 0xcc,
	0xa8, 0xa1, 0xb2, 0x26, 0xb0, 0x63, 0x04, 0x7e, 0x61, 0x07, 0x38, 0x91, 0xb1, 0x4c, 0x13, 0xf8,
	0x04, 0xca, 0xbe, 0xf0, 0xa6, 0x25, 0xdd, 0x33, 0x4a, 0x5a, 0xcc, 0x97, 0x6a, 0x63, 0xf2, 0x10,
	0x36, 0x1d, 0x31, 0x1e, 0x73, 0x89, 0x54, 0x1b, 0x5e, 0x04, 0xb3, 0xf4, 0x2e, 0x49, 0xad, 0x1f,
	0x8a, 0x40, 0x7a, 0xf6, 0x98, 0xc5, 0xa1, 0xed, 0x20, 0x5b, 0x46, 0x22, 0x8d, 0x89, 0x97, 0x74,
	0x9a, 0x70, 0xdf, 0x7d, 0xc5, 0xa2, 0x18, 0x1b, 0xa5, 0xeb, 0xc6, 0x29, 0xc9, 0xcb, 0xc8, 0x6d,
	0x58, 0x4e, 0x82, 0x24, 0x66, 0x29, 0x74, 0x85, 0x66, 0x27, 0xb2, 0x0b, 0xeb, 0xba, 0xa1, 0x7d,
	0x21, 0xfc, 0xee, 0xa1, 0x26, 0xda, 0x1a, 0xcd, 0x8b, 0xc8, 0x17, 0xb0, 0x9e, 0x0d, 0x8b, 0x8a,
	0x98, 0xf1, 0xec, 0xca, 0xf1, 0x9a, 0x65, 0x44, 0xf3, 0x1e, 0x64, 0x0f, 0x6e, 0xc4, 0x62, 0x24,
	0xdf, 0xda, 0x11, 0x9b, 0x66, 0xb8, 0xa4, 0xc3, 0x5c, 0x16, 0x93, 0x07, 0xb0, 0xe1, 0xd8, 0xa1,
	0x7d, 0xca, 0x7d, 0x2e, 0x39, 0x0e, 0xa3, 0x9a, 0xb6, 0xf2, 0x41, 0xe1, 0x31, 0x35, 0xc4, 0xd6,
	0x2f, 0x45, 0xd8, 0xa6, 0xcc, 0x11, 0xb8, 0x4e, 0x79, 0xe0, 0xcd, 0xb9, 0xa5, 0x8a, 0x09, 0xd8,
	0xdb, 0xaf, 0x58, 0x30, 0x90, 0xf6, 0x38, 0xcc, 0xee, 0x3f, 0x2f, 0x42, 0xde, 0x67, 0x2c, 0x2d,
	0xea, 0x32, 0xee, 0x1a, 0x65, 0xe8, 0x49, 0xcb, 0x96, 0x9d, 0x41, 0xd6, 0x67, 0xb8, 0x8f, 0xa2,
	0x24, 0x50, 0x5a, 0xad, 0xd4, 0xe3, 0xf1, 0x37, 0x1c, 0x37, 0xad, 0x91, 0xa1, 0xab, 0xcc, 0xe9,
	0x0b, 0x9f, 0x3b, 0x6a, 0x4d, 0x29, 0xcf, 0x07, 0x86, 0x67, 0x27, 0xb2, 0xe3, 0x24, 0x62, 0x6d,
	0xe1, 0x62, 0x39, 0xa9, 0x5d, 0x8a, 0x33, 0x73, 0xd3, 0x57, 0xac, 0xb0, 0xba, 0x06, 0x4d, 0x0d,
	0x99, 0xf5, 0x47, 0x01, 0x6a, 0xed, 0x33, 0xe6, 0x9c, 0x87, 0x82, 0x07, 0x72, 0xc0, 0xbd, 0xc0,
	0x96, 0x08, 0x3b, 0x6b, 0xcd, 0xfc, 0x52, 0xdd, 0x6c, 0x44, 0xf2, 0x22, 0x5c, 0xa7, 0xb5, 0xb1,
	0x88, 0x25, 0x36, 0x16, 0x77, 0xe4, 0x1c, 0x27, 0xc7, 0x96, 0x6b, 0xf5, 0x7a, 0x80, 0x93, 0x68,
	0xc0, 0xbc, 0x31, 0xcb, 0x3c, 0x4a, 0xd9, 0x00, 0x1b, 0xd2, 0xff, 0x3d, 0x4b, 0xd6, 0x8f, 0x05,
	0xb8, 0x3d, 0x8f, 0xdd, 0x46, 0x7a, 0xd8, 0x81, 0x9b, 0x56, 0xd8, 0x46, 0xea, 0x4f, 0x6b, 0xce,
	0x96, 0xb0, 0xd9, 0xe6, 0xeb, 0x7a, 0x43, 0xe7, 0x7e, 0xea, 0x9d, 0x0a, 0x18, 0xd2, 0x4d, 0x50,
	0x86, 0xe7, 0xa0, 0x3b, 0xc6, 0xc0, 0xba, 0xfa, 0x55, 0xba, 0xa8, 0xb0, 0xfe, 0x2c, 0xc0, 0xb6,
	0xe2, 0xa3, 0x5a, 0xd8, 0x46, 0x2e, 0xc8, 0x36, 0xdb, 0x91, 0x53, 0x2e, 0x22, 0xdb, 0xd2, 0x13,
	0xf6, 0xb8, 0x2c, 0x71, 0xe3, 0x6a, 0xc4, 0xcd, 0xc6, 0x43, 0x23, 0xbd, 0xab, 0x80, 0xea, 0x6a,
	0x3f, 0x53, 0xed, 0x43, 0xba, 0x50, 0x71, 0xe6, 0x95, 0x8f, 0xdd, 0x6c, 0x08, 0x3f, 0xb8, 0xa6,
	0xc6, 0x3c, 0x0c, 0x35, 0x3d, 0xad, 0x06, 0x94, 0x15, 0x30, 0xb9, 0x09, 0x37, 0x2e, 0x45, 0xad,
	0xbe, 0x43, 0x6e, 0xc1, 0x96, 0x46, 0xe9, 0xe7, 0x50, 0xaa, 0x05, 0xeb, 0x16, 0xdc, 0xcc, 0x68,
	0x4a, 0xd9, 0x77, 0xc9, 0x74, 0xdf, 0x59, 0x47, 0xb0, 0x3d, 0x13, 0xc7, 0x21, 0x6e, 0x69, 0x36,
	0xdb, 0x83, 0x5c, 0x5d, 0x71, 0x7a, 0x11, 0xf7, 0x16, 0x2a, 0x35, 0x57, 0x18, 0xd5, 0xc6, 0xd6,
	0x4f, 0x05, 0xa8, 0x5e, 0xbe, 0x7f, 0xf5, 0x52, 0xfa, 0xf6, 0x44, 0x24, 0x32, 0xbf, 0xde, 0x2a,
	0xd4, 0x14, 0xaa, 0x2f, 0x9d, 0x40, 0xc3, 0x22, 0xea, 0x61, 0xb6, 0xe3, 0x72, 0x12, 0xf5, 0x30,
	0x38, 0x7e, 0x12, 0xe3, 0x07, 0xc6, 0x6c, 0xcb, 0xcd, 0x05, 0xea, 0xeb, 0xc9, 0xd1, 0x1f, 0x1a,
	0x65, 0x3d, 0xb6, 0xe9, 0xc1, 0xfa, 0xbd, 0x08, 0xef, 0x4e, 0xfb, 0x43, 0x99, 0xc7, 0x63, 0x19,
	0xe9, 0x97, 0x28, 0xcd, 0x0b, 0x23, 0x46, 0xa1, 0xd3, 0x74, 0x5d, 0xfd, 0x60, 0xa4, 0x84, 0xca,
	0x49, 0x14, 0xe3, 0xce, 0xa4, 0x0c, 0xa7, 0x06, 0xc5, 0x94, 0x71, 0x39, 0xd1, 0x65, 0x36, 0x94,
	0xfe, 0xf3, 0x66, 0x7d, 0x05, 0xe5, 0x48, 0xf8, 0x4c, 0x2f, 0x95, 0xcd, 0xc6, 0xe7, 0x57, 0x8e,
	0xd3, 0x42, 0xe2, 0x73, 0x0d, 0xba, 0x6a, 0xc9, 0xc1, 0x6a, 0xaf, 0xf9, 0xa2, 0xd3, 0x7b, 0x79,
	0xd8, 0xa1, 0x1a, 0xcf, 0x7a, 0x06, 0x5b, 0x0b, 0x46, 0x64, 0x03, 0x66, 0x66, 0xd5, 0x02, 0x01,
	0x58, 0x6e, 0x35, 0xdb, 0x47, 0x27, 0xfd, 0x6a, 0x91, 0x6c, 0x02, 0xb4, 0x9f, 0x77, 0xda, 0x47,
	0xfd, 0x97, 0xdd, 0xde, 0xb0, 0x5a, 0xfa, 0xe8, 0x18, 0xb6, 0x28, 0x0b, 0x71, 0x6f, 0xd9, 0xb8,
	0x74, 0x65, 0xe6, 0x5e, 0x81, 0xb5, 0x2f, 0xbb, 0xbd, 0xe6, 0x71, 0xf7, 0xdb, 0xce, 0x21, 0x4e,
	0xd9, 0x0a, 0x94, 0x68, 0xeb, 0x35, 0x02, 0xa9, 0x3f, 0xaf, 0x29, 0xa2, 0xa8, 0x3f, 0x27, 0xb4,
	0x5a, 0x52, 0x96, 0xc3, 0xce, 0x8b, 0xfe, 0x4b, 0xda, 0xa4, 0xdf, 0x54, 0xcb, 0xad, 0xa7, 0xf0,
	0x40, 0x44, 0x5e, 0x1d, 0x1f, 0x00, 0x1c, 0x62, 0xa3, 0x44, 0xfd, 0xd7, 0x11, 0x7e, 0xfa, 0xa7,
	0x55, 0x9d, 0x7f, 0x65, 0xeb, 0x90, 0xf1, 0xaf, 0x85, 0xc2, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff,
	0xe4, 0xa0, 0x74, 0x62, 0xa2, 0x0b, 0x00, 0x00,
}
