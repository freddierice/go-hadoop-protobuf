// Code generated by protoc-gen-go.
// source: gopkg.in/freddierice/go-hproto.v1/hdfs/ClientDatanodeProtocol.proto
// DO NOT EDIT!

package hproto_hdfs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import hproto_common "gopkg.in/freddierice/go-hproto.v1/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// *
// block - block for which visible length is requested
type GetReplicaVisibleLengthRequestProto struct {
	Block            *ExtendedBlockProto `protobuf:"bytes,1,req,name=block" json:"block,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *GetReplicaVisibleLengthRequestProto) Reset()         { *m = GetReplicaVisibleLengthRequestProto{} }
func (m *GetReplicaVisibleLengthRequestProto) String() string { return proto.CompactTextString(m) }
func (*GetReplicaVisibleLengthRequestProto) ProtoMessage()    {}
func (*GetReplicaVisibleLengthRequestProto) Descriptor() ([]byte, []int) {
	return fileDescriptor6, []int{0}
}

func (m *GetReplicaVisibleLengthRequestProto) GetBlock() *ExtendedBlockProto {
	if m != nil {
		return m.Block
	}
	return nil
}

// *
// length - visible length of the block
type GetReplicaVisibleLengthResponseProto struct {
	Length           *uint64 `protobuf:"varint,1,req,name=length" json:"length,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GetReplicaVisibleLengthResponseProto) Reset()         { *m = GetReplicaVisibleLengthResponseProto{} }
func (m *GetReplicaVisibleLengthResponseProto) String() string { return proto.CompactTextString(m) }
func (*GetReplicaVisibleLengthResponseProto) ProtoMessage()    {}
func (*GetReplicaVisibleLengthResponseProto) Descriptor() ([]byte, []int) {
	return fileDescriptor6, []int{1}
}

func (m *GetReplicaVisibleLengthResponseProto) GetLength() uint64 {
	if m != nil && m.Length != nil {
		return *m.Length
	}
	return 0
}

// *
// void request
type RefreshNamenodesRequestProto struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *RefreshNamenodesRequestProto) Reset()                    { *m = RefreshNamenodesRequestProto{} }
func (m *RefreshNamenodesRequestProto) String() string            { return proto.CompactTextString(m) }
func (*RefreshNamenodesRequestProto) ProtoMessage()               {}
func (*RefreshNamenodesRequestProto) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{2} }

// *
// void response
type RefreshNamenodesResponseProto struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *RefreshNamenodesResponseProto) Reset()                    { *m = RefreshNamenodesResponseProto{} }
func (m *RefreshNamenodesResponseProto) String() string            { return proto.CompactTextString(m) }
func (*RefreshNamenodesResponseProto) ProtoMessage()               {}
func (*RefreshNamenodesResponseProto) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{3} }

// *
// blockPool - block pool to be deleted
// force - if false, delete the block pool only if it is empty.
//         if true, delete the block pool even if it has blocks.
type DeleteBlockPoolRequestProto struct {
	BlockPool        *string `protobuf:"bytes,1,req,name=blockPool" json:"blockPool,omitempty"`
	Force            *bool   `protobuf:"varint,2,req,name=force" json:"force,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DeleteBlockPoolRequestProto) Reset()                    { *m = DeleteBlockPoolRequestProto{} }
func (m *DeleteBlockPoolRequestProto) String() string            { return proto.CompactTextString(m) }
func (*DeleteBlockPoolRequestProto) ProtoMessage()               {}
func (*DeleteBlockPoolRequestProto) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{4} }

func (m *DeleteBlockPoolRequestProto) GetBlockPool() string {
	if m != nil && m.BlockPool != nil {
		return *m.BlockPool
	}
	return ""
}

func (m *DeleteBlockPoolRequestProto) GetForce() bool {
	if m != nil && m.Force != nil {
		return *m.Force
	}
	return false
}

// *
// void response
type DeleteBlockPoolResponseProto struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *DeleteBlockPoolResponseProto) Reset()                    { *m = DeleteBlockPoolResponseProto{} }
func (m *DeleteBlockPoolResponseProto) String() string            { return proto.CompactTextString(m) }
func (*DeleteBlockPoolResponseProto) ProtoMessage()               {}
func (*DeleteBlockPoolResponseProto) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{5} }

// *
// Gets the file information where block and its metadata is stored
// block - block for which path information is being requested
// token - block token
//
// This message is deprecated in favor of file descriptor passing.
type GetBlockLocalPathInfoRequestProto struct {
	Block            *ExtendedBlockProto       `protobuf:"bytes,1,req,name=block" json:"block,omitempty"`
	Token            *hproto_common.TokenProto `protobuf:"bytes,2,req,name=token" json:"token,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *GetBlockLocalPathInfoRequestProto) Reset()         { *m = GetBlockLocalPathInfoRequestProto{} }
func (m *GetBlockLocalPathInfoRequestProto) String() string { return proto.CompactTextString(m) }
func (*GetBlockLocalPathInfoRequestProto) ProtoMessage()    {}
func (*GetBlockLocalPathInfoRequestProto) Descriptor() ([]byte, []int) {
	return fileDescriptor6, []int{6}
}

func (m *GetBlockLocalPathInfoRequestProto) GetBlock() *ExtendedBlockProto {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *GetBlockLocalPathInfoRequestProto) GetToken() *hproto_common.TokenProto {
	if m != nil {
		return m.Token
	}
	return nil
}

// *
// block - block for which file path information is being returned
// localPath - file path where the block data is stored
// localMetaPath - file path where the block meta data is stored
//
// This message is deprecated in favor of file descriptor passing.
type GetBlockLocalPathInfoResponseProto struct {
	Block            *ExtendedBlockProto `protobuf:"bytes,1,req,name=block" json:"block,omitempty"`
	LocalPath        *string             `protobuf:"bytes,2,req,name=localPath" json:"localPath,omitempty"`
	LocalMetaPath    *string             `protobuf:"bytes,3,req,name=localMetaPath" json:"localMetaPath,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *GetBlockLocalPathInfoResponseProto) Reset()         { *m = GetBlockLocalPathInfoResponseProto{} }
func (m *GetBlockLocalPathInfoResponseProto) String() string { return proto.CompactTextString(m) }
func (*GetBlockLocalPathInfoResponseProto) ProtoMessage()    {}
func (*GetBlockLocalPathInfoResponseProto) Descriptor() ([]byte, []int) {
	return fileDescriptor6, []int{7}
}

func (m *GetBlockLocalPathInfoResponseProto) GetBlock() *ExtendedBlockProto {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *GetBlockLocalPathInfoResponseProto) GetLocalPath() string {
	if m != nil && m.LocalPath != nil {
		return *m.LocalPath
	}
	return ""
}

func (m *GetBlockLocalPathInfoResponseProto) GetLocalMetaPath() string {
	if m != nil && m.LocalMetaPath != nil {
		return *m.LocalMetaPath
	}
	return ""
}

// *
// forUpgrade - if true, clients are advised to wait for restart and quick
//              upgrade restart is instrumented. Otherwise, datanode does
//              the regular shutdown.
type ShutdownDatanodeRequestProto struct {
	ForUpgrade       *bool  `protobuf:"varint,1,req,name=forUpgrade" json:"forUpgrade,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ShutdownDatanodeRequestProto) Reset()                    { *m = ShutdownDatanodeRequestProto{} }
func (m *ShutdownDatanodeRequestProto) String() string            { return proto.CompactTextString(m) }
func (*ShutdownDatanodeRequestProto) ProtoMessage()               {}
func (*ShutdownDatanodeRequestProto) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{8} }

func (m *ShutdownDatanodeRequestProto) GetForUpgrade() bool {
	if m != nil && m.ForUpgrade != nil {
		return *m.ForUpgrade
	}
	return false
}

type ShutdownDatanodeResponseProto struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *ShutdownDatanodeResponseProto) Reset()                    { *m = ShutdownDatanodeResponseProto{} }
func (m *ShutdownDatanodeResponseProto) String() string            { return proto.CompactTextString(m) }
func (*ShutdownDatanodeResponseProto) ProtoMessage()               {}
func (*ShutdownDatanodeResponseProto) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{9} }

// * Tell datanode to evict active clients that are writing
type EvictWritersRequestProto struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *EvictWritersRequestProto) Reset()                    { *m = EvictWritersRequestProto{} }
func (m *EvictWritersRequestProto) String() string            { return proto.CompactTextString(m) }
func (*EvictWritersRequestProto) ProtoMessage()               {}
func (*EvictWritersRequestProto) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{10} }

type EvictWritersResponseProto struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *EvictWritersResponseProto) Reset()                    { *m = EvictWritersResponseProto{} }
func (m *EvictWritersResponseProto) String() string            { return proto.CompactTextString(m) }
func (*EvictWritersResponseProto) ProtoMessage()               {}
func (*EvictWritersResponseProto) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{11} }

// *
// Ping datanode for liveness and quick info
type GetDatanodeInfoRequestProto struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *GetDatanodeInfoRequestProto) Reset()                    { *m = GetDatanodeInfoRequestProto{} }
func (m *GetDatanodeInfoRequestProto) String() string            { return proto.CompactTextString(m) }
func (*GetDatanodeInfoRequestProto) ProtoMessage()               {}
func (*GetDatanodeInfoRequestProto) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{12} }

type GetDatanodeInfoResponseProto struct {
	LocalInfo        *DatanodeLocalInfoProto `protobuf:"bytes,1,req,name=localInfo" json:"localInfo,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *GetDatanodeInfoResponseProto) Reset()                    { *m = GetDatanodeInfoResponseProto{} }
func (m *GetDatanodeInfoResponseProto) String() string            { return proto.CompactTextString(m) }
func (*GetDatanodeInfoResponseProto) ProtoMessage()               {}
func (*GetDatanodeInfoResponseProto) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{13} }

func (m *GetDatanodeInfoResponseProto) GetLocalInfo() *DatanodeLocalInfoProto {
	if m != nil {
		return m.LocalInfo
	}
	return nil
}

type TriggerBlockReportRequestProto struct {
	Incremental      *bool  `protobuf:"varint,1,req,name=incremental" json:"incremental,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *TriggerBlockReportRequestProto) Reset()                    { *m = TriggerBlockReportRequestProto{} }
func (m *TriggerBlockReportRequestProto) String() string            { return proto.CompactTextString(m) }
func (*TriggerBlockReportRequestProto) ProtoMessage()               {}
func (*TriggerBlockReportRequestProto) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{14} }

func (m *TriggerBlockReportRequestProto) GetIncremental() bool {
	if m != nil && m.Incremental != nil {
		return *m.Incremental
	}
	return false
}

type TriggerBlockReportResponseProto struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *TriggerBlockReportResponseProto) Reset()         { *m = TriggerBlockReportResponseProto{} }
func (m *TriggerBlockReportResponseProto) String() string { return proto.CompactTextString(m) }
func (*TriggerBlockReportResponseProto) ProtoMessage()    {}
func (*TriggerBlockReportResponseProto) Descriptor() ([]byte, []int) {
	return fileDescriptor6, []int{15}
}

type GetBalancerBandwidthRequestProto struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *GetBalancerBandwidthRequestProto) Reset()         { *m = GetBalancerBandwidthRequestProto{} }
func (m *GetBalancerBandwidthRequestProto) String() string { return proto.CompactTextString(m) }
func (*GetBalancerBandwidthRequestProto) ProtoMessage()    {}
func (*GetBalancerBandwidthRequestProto) Descriptor() ([]byte, []int) {
	return fileDescriptor6, []int{16}
}

// *
// bandwidth - balancer bandwidth value of the datanode.
type GetBalancerBandwidthResponseProto struct {
	Bandwidth        *uint64 `protobuf:"varint,1,req,name=bandwidth" json:"bandwidth,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GetBalancerBandwidthResponseProto) Reset()         { *m = GetBalancerBandwidthResponseProto{} }
func (m *GetBalancerBandwidthResponseProto) String() string { return proto.CompactTextString(m) }
func (*GetBalancerBandwidthResponseProto) ProtoMessage()    {}
func (*GetBalancerBandwidthResponseProto) Descriptor() ([]byte, []int) {
	return fileDescriptor6, []int{17}
}

func (m *GetBalancerBandwidthResponseProto) GetBandwidth() uint64 {
	if m != nil && m.Bandwidth != nil {
		return *m.Bandwidth
	}
	return 0
}

// *
// This message allows a client to submit a disk
// balancer plan to a data node.
type SubmitDiskBalancerPlanRequestProto struct {
	PlanID           *string `protobuf:"bytes,1,req,name=planID" json:"planID,omitempty"`
	Plan             *string `protobuf:"bytes,2,req,name=plan" json:"plan,omitempty"`
	PlanVersion      *uint64 `protobuf:"varint,3,opt,name=planVersion" json:"planVersion,omitempty"`
	IgnoreDateCheck  *bool   `protobuf:"varint,4,opt,name=ignoreDateCheck" json:"ignoreDateCheck,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SubmitDiskBalancerPlanRequestProto) Reset()         { *m = SubmitDiskBalancerPlanRequestProto{} }
func (m *SubmitDiskBalancerPlanRequestProto) String() string { return proto.CompactTextString(m) }
func (*SubmitDiskBalancerPlanRequestProto) ProtoMessage()    {}
func (*SubmitDiskBalancerPlanRequestProto) Descriptor() ([]byte, []int) {
	return fileDescriptor6, []int{18}
}

func (m *SubmitDiskBalancerPlanRequestProto) GetPlanID() string {
	if m != nil && m.PlanID != nil {
		return *m.PlanID
	}
	return ""
}

func (m *SubmitDiskBalancerPlanRequestProto) GetPlan() string {
	if m != nil && m.Plan != nil {
		return *m.Plan
	}
	return ""
}

func (m *SubmitDiskBalancerPlanRequestProto) GetPlanVersion() uint64 {
	if m != nil && m.PlanVersion != nil {
		return *m.PlanVersion
	}
	return 0
}

func (m *SubmitDiskBalancerPlanRequestProto) GetIgnoreDateCheck() bool {
	if m != nil && m.IgnoreDateCheck != nil {
		return *m.IgnoreDateCheck
	}
	return false
}

// *
// Response from the DataNode on Plan Submit request
type SubmitDiskBalancerPlanResponseProto struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *SubmitDiskBalancerPlanResponseProto) Reset()         { *m = SubmitDiskBalancerPlanResponseProto{} }
func (m *SubmitDiskBalancerPlanResponseProto) String() string { return proto.CompactTextString(m) }
func (*SubmitDiskBalancerPlanResponseProto) ProtoMessage()    {}
func (*SubmitDiskBalancerPlanResponseProto) Descriptor() ([]byte, []int) {
	return fileDescriptor6, []int{19}
}

// *
// This message describes a request to cancel an
// outstanding disk balancer plan
type CancelPlanRequestProto struct {
	PlanID           *string `protobuf:"bytes,1,req,name=planID" json:"planID,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CancelPlanRequestProto) Reset()                    { *m = CancelPlanRequestProto{} }
func (m *CancelPlanRequestProto) String() string            { return proto.CompactTextString(m) }
func (*CancelPlanRequestProto) ProtoMessage()               {}
func (*CancelPlanRequestProto) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{20} }

func (m *CancelPlanRequestProto) GetPlanID() string {
	if m != nil && m.PlanID != nil {
		return *m.PlanID
	}
	return ""
}

// *
// This is the response for the cancellation request
type CancelPlanResponseProto struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CancelPlanResponseProto) Reset()                    { *m = CancelPlanResponseProto{} }
func (m *CancelPlanResponseProto) String() string            { return proto.CompactTextString(m) }
func (*CancelPlanResponseProto) ProtoMessage()               {}
func (*CancelPlanResponseProto) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{21} }

// *
// This message allows a client to query data node to see
// if a disk balancer plan is executing and if so what is
// the status.
type QueryPlanStatusRequestProto struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *QueryPlanStatusRequestProto) Reset()                    { *m = QueryPlanStatusRequestProto{} }
func (m *QueryPlanStatusRequestProto) String() string            { return proto.CompactTextString(m) }
func (*QueryPlanStatusRequestProto) ProtoMessage()               {}
func (*QueryPlanStatusRequestProto) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{22} }

// *
// This message describes a plan if it is in progress
type QueryPlanStatusResponseProto struct {
	Result           *uint32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	PlanID           *string `protobuf:"bytes,2,opt,name=planID" json:"planID,omitempty"`
	CurrentStatus    *string `protobuf:"bytes,3,opt,name=currentStatus" json:"currentStatus,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *QueryPlanStatusResponseProto) Reset()                    { *m = QueryPlanStatusResponseProto{} }
func (m *QueryPlanStatusResponseProto) String() string            { return proto.CompactTextString(m) }
func (*QueryPlanStatusResponseProto) ProtoMessage()               {}
func (*QueryPlanStatusResponseProto) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{23} }

func (m *QueryPlanStatusResponseProto) GetResult() uint32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func (m *QueryPlanStatusResponseProto) GetPlanID() string {
	if m != nil && m.PlanID != nil {
		return *m.PlanID
	}
	return ""
}

func (m *QueryPlanStatusResponseProto) GetCurrentStatus() string {
	if m != nil && m.CurrentStatus != nil {
		return *m.CurrentStatus
	}
	return ""
}

// *
// This message sends a request to data node get a specific setting
// that is used by disk balancer.
type DiskBalancerSettingRequestProto struct {
	Key              *string `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DiskBalancerSettingRequestProto) Reset()         { *m = DiskBalancerSettingRequestProto{} }
func (m *DiskBalancerSettingRequestProto) String() string { return proto.CompactTextString(m) }
func (*DiskBalancerSettingRequestProto) ProtoMessage()    {}
func (*DiskBalancerSettingRequestProto) Descriptor() ([]byte, []int) {
	return fileDescriptor6, []int{24}
}

func (m *DiskBalancerSettingRequestProto) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

// *
// Response that describes the value of requested disk balancer setting.
type DiskBalancerSettingResponseProto struct {
	Value            *string `protobuf:"bytes,1,req,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DiskBalancerSettingResponseProto) Reset()         { *m = DiskBalancerSettingResponseProto{} }
func (m *DiskBalancerSettingResponseProto) String() string { return proto.CompactTextString(m) }
func (*DiskBalancerSettingResponseProto) ProtoMessage()    {}
func (*DiskBalancerSettingResponseProto) Descriptor() ([]byte, []int) {
	return fileDescriptor6, []int{25}
}

func (m *DiskBalancerSettingResponseProto) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*GetReplicaVisibleLengthRequestProto)(nil), "hproto.hdfs.GetReplicaVisibleLengthRequestProto")
	proto.RegisterType((*GetReplicaVisibleLengthResponseProto)(nil), "hproto.hdfs.GetReplicaVisibleLengthResponseProto")
	proto.RegisterType((*RefreshNamenodesRequestProto)(nil), "hproto.hdfs.RefreshNamenodesRequestProto")
	proto.RegisterType((*RefreshNamenodesResponseProto)(nil), "hproto.hdfs.RefreshNamenodesResponseProto")
	proto.RegisterType((*DeleteBlockPoolRequestProto)(nil), "hproto.hdfs.DeleteBlockPoolRequestProto")
	proto.RegisterType((*DeleteBlockPoolResponseProto)(nil), "hproto.hdfs.DeleteBlockPoolResponseProto")
	proto.RegisterType((*GetBlockLocalPathInfoRequestProto)(nil), "hproto.hdfs.GetBlockLocalPathInfoRequestProto")
	proto.RegisterType((*GetBlockLocalPathInfoResponseProto)(nil), "hproto.hdfs.GetBlockLocalPathInfoResponseProto")
	proto.RegisterType((*ShutdownDatanodeRequestProto)(nil), "hproto.hdfs.ShutdownDatanodeRequestProto")
	proto.RegisterType((*ShutdownDatanodeResponseProto)(nil), "hproto.hdfs.ShutdownDatanodeResponseProto")
	proto.RegisterType((*EvictWritersRequestProto)(nil), "hproto.hdfs.EvictWritersRequestProto")
	proto.RegisterType((*EvictWritersResponseProto)(nil), "hproto.hdfs.EvictWritersResponseProto")
	proto.RegisterType((*GetDatanodeInfoRequestProto)(nil), "hproto.hdfs.GetDatanodeInfoRequestProto")
	proto.RegisterType((*GetDatanodeInfoResponseProto)(nil), "hproto.hdfs.GetDatanodeInfoResponseProto")
	proto.RegisterType((*TriggerBlockReportRequestProto)(nil), "hproto.hdfs.TriggerBlockReportRequestProto")
	proto.RegisterType((*TriggerBlockReportResponseProto)(nil), "hproto.hdfs.TriggerBlockReportResponseProto")
	proto.RegisterType((*GetBalancerBandwidthRequestProto)(nil), "hproto.hdfs.GetBalancerBandwidthRequestProto")
	proto.RegisterType((*GetBalancerBandwidthResponseProto)(nil), "hproto.hdfs.GetBalancerBandwidthResponseProto")
	proto.RegisterType((*SubmitDiskBalancerPlanRequestProto)(nil), "hproto.hdfs.SubmitDiskBalancerPlanRequestProto")
	proto.RegisterType((*SubmitDiskBalancerPlanResponseProto)(nil), "hproto.hdfs.SubmitDiskBalancerPlanResponseProto")
	proto.RegisterType((*CancelPlanRequestProto)(nil), "hproto.hdfs.CancelPlanRequestProto")
	proto.RegisterType((*CancelPlanResponseProto)(nil), "hproto.hdfs.CancelPlanResponseProto")
	proto.RegisterType((*QueryPlanStatusRequestProto)(nil), "hproto.hdfs.QueryPlanStatusRequestProto")
	proto.RegisterType((*QueryPlanStatusResponseProto)(nil), "hproto.hdfs.QueryPlanStatusResponseProto")
	proto.RegisterType((*DiskBalancerSettingRequestProto)(nil), "hproto.hdfs.DiskBalancerSettingRequestProto")
	proto.RegisterType((*DiskBalancerSettingResponseProto)(nil), "hproto.hdfs.DiskBalancerSettingResponseProto")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for ClientDatanodeProtocolService service

type ClientDatanodeProtocolServiceClient interface {
	// *
	// Returns the visible length of the replica
	GetReplicaVisibleLength(ctx context.Context, in *GetReplicaVisibleLengthRequestProto, opts ...grpc.CallOption) (*GetReplicaVisibleLengthResponseProto, error)
	// *
	// Refresh the list of federated namenodes from updated configuration.
	// Adds new namenodes and stops the deleted namenodes.
	RefreshNamenodes(ctx context.Context, in *RefreshNamenodesRequestProto, opts ...grpc.CallOption) (*RefreshNamenodesResponseProto, error)
	// *
	// Delete the block pool from the datanode.
	DeleteBlockPool(ctx context.Context, in *DeleteBlockPoolRequestProto, opts ...grpc.CallOption) (*DeleteBlockPoolResponseProto, error)
	// *
	// Retrieves the path names of the block file and metadata file stored on the
	// local file system.
	GetBlockLocalPathInfo(ctx context.Context, in *GetBlockLocalPathInfoRequestProto, opts ...grpc.CallOption) (*GetBlockLocalPathInfoResponseProto, error)
	ShutdownDatanode(ctx context.Context, in *ShutdownDatanodeRequestProto, opts ...grpc.CallOption) (*ShutdownDatanodeResponseProto, error)
	EvictWriters(ctx context.Context, in *EvictWritersRequestProto, opts ...grpc.CallOption) (*EvictWritersResponseProto, error)
	GetDatanodeInfo(ctx context.Context, in *GetDatanodeInfoRequestProto, opts ...grpc.CallOption) (*GetDatanodeInfoResponseProto, error)
	GetReconfigurationStatus(ctx context.Context, in *GetReconfigurationStatusRequestProto, opts ...grpc.CallOption) (*GetReconfigurationStatusResponseProto, error)
	StartReconfiguration(ctx context.Context, in *StartReconfigurationRequestProto, opts ...grpc.CallOption) (*StartReconfigurationResponseProto, error)
	ListReconfigurableProperties(ctx context.Context, in *ListReconfigurablePropertiesRequestProto, opts ...grpc.CallOption) (*ListReconfigurablePropertiesResponseProto, error)
	TriggerBlockReport(ctx context.Context, in *TriggerBlockReportRequestProto, opts ...grpc.CallOption) (*TriggerBlockReportResponseProto, error)
	// *
	// Returns the balancer bandwidth value of datanode.
	GetBalancerBandwidth(ctx context.Context, in *GetBalancerBandwidthRequestProto, opts ...grpc.CallOption) (*GetBalancerBandwidthResponseProto, error)
	// *
	// Submit a disk balancer plan for execution
	SubmitDiskBalancerPlan(ctx context.Context, in *SubmitDiskBalancerPlanRequestProto, opts ...grpc.CallOption) (*SubmitDiskBalancerPlanResponseProto, error)
	// *
	// Cancel an executing plan
	CancelDiskBalancerPlan(ctx context.Context, in *CancelPlanRequestProto, opts ...grpc.CallOption) (*CancelPlanResponseProto, error)
	// *
	// Gets the status of an executing Plan
	QueryDiskBalancerPlan(ctx context.Context, in *QueryPlanStatusRequestProto, opts ...grpc.CallOption) (*QueryPlanStatusResponseProto, error)
	// *
	//  Gets run-time settings of Disk Balancer.
	GetDiskBalancerSetting(ctx context.Context, in *DiskBalancerSettingRequestProto, opts ...grpc.CallOption) (*DiskBalancerSettingResponseProto, error)
}

type clientDatanodeProtocolServiceClient struct {
	cc *grpc.ClientConn
}

func NewClientDatanodeProtocolServiceClient(cc *grpc.ClientConn) ClientDatanodeProtocolServiceClient {
	return &clientDatanodeProtocolServiceClient{cc}
}

func (c *clientDatanodeProtocolServiceClient) GetReplicaVisibleLength(ctx context.Context, in *GetReplicaVisibleLengthRequestProto, opts ...grpc.CallOption) (*GetReplicaVisibleLengthResponseProto, error) {
	out := new(GetReplicaVisibleLengthResponseProto)
	err := grpc.Invoke(ctx, "/hproto.hdfs.ClientDatanodeProtocolService/getReplicaVisibleLength", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientDatanodeProtocolServiceClient) RefreshNamenodes(ctx context.Context, in *RefreshNamenodesRequestProto, opts ...grpc.CallOption) (*RefreshNamenodesResponseProto, error) {
	out := new(RefreshNamenodesResponseProto)
	err := grpc.Invoke(ctx, "/hproto.hdfs.ClientDatanodeProtocolService/refreshNamenodes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientDatanodeProtocolServiceClient) DeleteBlockPool(ctx context.Context, in *DeleteBlockPoolRequestProto, opts ...grpc.CallOption) (*DeleteBlockPoolResponseProto, error) {
	out := new(DeleteBlockPoolResponseProto)
	err := grpc.Invoke(ctx, "/hproto.hdfs.ClientDatanodeProtocolService/deleteBlockPool", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientDatanodeProtocolServiceClient) GetBlockLocalPathInfo(ctx context.Context, in *GetBlockLocalPathInfoRequestProto, opts ...grpc.CallOption) (*GetBlockLocalPathInfoResponseProto, error) {
	out := new(GetBlockLocalPathInfoResponseProto)
	err := grpc.Invoke(ctx, "/hproto.hdfs.ClientDatanodeProtocolService/getBlockLocalPathInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientDatanodeProtocolServiceClient) ShutdownDatanode(ctx context.Context, in *ShutdownDatanodeRequestProto, opts ...grpc.CallOption) (*ShutdownDatanodeResponseProto, error) {
	out := new(ShutdownDatanodeResponseProto)
	err := grpc.Invoke(ctx, "/hproto.hdfs.ClientDatanodeProtocolService/shutdownDatanode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientDatanodeProtocolServiceClient) EvictWriters(ctx context.Context, in *EvictWritersRequestProto, opts ...grpc.CallOption) (*EvictWritersResponseProto, error) {
	out := new(EvictWritersResponseProto)
	err := grpc.Invoke(ctx, "/hproto.hdfs.ClientDatanodeProtocolService/evictWriters", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientDatanodeProtocolServiceClient) GetDatanodeInfo(ctx context.Context, in *GetDatanodeInfoRequestProto, opts ...grpc.CallOption) (*GetDatanodeInfoResponseProto, error) {
	out := new(GetDatanodeInfoResponseProto)
	err := grpc.Invoke(ctx, "/hproto.hdfs.ClientDatanodeProtocolService/getDatanodeInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientDatanodeProtocolServiceClient) GetReconfigurationStatus(ctx context.Context, in *GetReconfigurationStatusRequestProto, opts ...grpc.CallOption) (*GetReconfigurationStatusResponseProto, error) {
	out := new(GetReconfigurationStatusResponseProto)
	err := grpc.Invoke(ctx, "/hproto.hdfs.ClientDatanodeProtocolService/getReconfigurationStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientDatanodeProtocolServiceClient) StartReconfiguration(ctx context.Context, in *StartReconfigurationRequestProto, opts ...grpc.CallOption) (*StartReconfigurationResponseProto, error) {
	out := new(StartReconfigurationResponseProto)
	err := grpc.Invoke(ctx, "/hproto.hdfs.ClientDatanodeProtocolService/startReconfiguration", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientDatanodeProtocolServiceClient) ListReconfigurableProperties(ctx context.Context, in *ListReconfigurablePropertiesRequestProto, opts ...grpc.CallOption) (*ListReconfigurablePropertiesResponseProto, error) {
	out := new(ListReconfigurablePropertiesResponseProto)
	err := grpc.Invoke(ctx, "/hproto.hdfs.ClientDatanodeProtocolService/listReconfigurableProperties", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientDatanodeProtocolServiceClient) TriggerBlockReport(ctx context.Context, in *TriggerBlockReportRequestProto, opts ...grpc.CallOption) (*TriggerBlockReportResponseProto, error) {
	out := new(TriggerBlockReportResponseProto)
	err := grpc.Invoke(ctx, "/hproto.hdfs.ClientDatanodeProtocolService/triggerBlockReport", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientDatanodeProtocolServiceClient) GetBalancerBandwidth(ctx context.Context, in *GetBalancerBandwidthRequestProto, opts ...grpc.CallOption) (*GetBalancerBandwidthResponseProto, error) {
	out := new(GetBalancerBandwidthResponseProto)
	err := grpc.Invoke(ctx, "/hproto.hdfs.ClientDatanodeProtocolService/getBalancerBandwidth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientDatanodeProtocolServiceClient) SubmitDiskBalancerPlan(ctx context.Context, in *SubmitDiskBalancerPlanRequestProto, opts ...grpc.CallOption) (*SubmitDiskBalancerPlanResponseProto, error) {
	out := new(SubmitDiskBalancerPlanResponseProto)
	err := grpc.Invoke(ctx, "/hproto.hdfs.ClientDatanodeProtocolService/submitDiskBalancerPlan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientDatanodeProtocolServiceClient) CancelDiskBalancerPlan(ctx context.Context, in *CancelPlanRequestProto, opts ...grpc.CallOption) (*CancelPlanResponseProto, error) {
	out := new(CancelPlanResponseProto)
	err := grpc.Invoke(ctx, "/hproto.hdfs.ClientDatanodeProtocolService/cancelDiskBalancerPlan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientDatanodeProtocolServiceClient) QueryDiskBalancerPlan(ctx context.Context, in *QueryPlanStatusRequestProto, opts ...grpc.CallOption) (*QueryPlanStatusResponseProto, error) {
	out := new(QueryPlanStatusResponseProto)
	err := grpc.Invoke(ctx, "/hproto.hdfs.ClientDatanodeProtocolService/queryDiskBalancerPlan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientDatanodeProtocolServiceClient) GetDiskBalancerSetting(ctx context.Context, in *DiskBalancerSettingRequestProto, opts ...grpc.CallOption) (*DiskBalancerSettingResponseProto, error) {
	out := new(DiskBalancerSettingResponseProto)
	err := grpc.Invoke(ctx, "/hproto.hdfs.ClientDatanodeProtocolService/getDiskBalancerSetting", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ClientDatanodeProtocolService service

type ClientDatanodeProtocolServiceServer interface {
	// *
	// Returns the visible length of the replica
	GetReplicaVisibleLength(context.Context, *GetReplicaVisibleLengthRequestProto) (*GetReplicaVisibleLengthResponseProto, error)
	// *
	// Refresh the list of federated namenodes from updated configuration.
	// Adds new namenodes and stops the deleted namenodes.
	RefreshNamenodes(context.Context, *RefreshNamenodesRequestProto) (*RefreshNamenodesResponseProto, error)
	// *
	// Delete the block pool from the datanode.
	DeleteBlockPool(context.Context, *DeleteBlockPoolRequestProto) (*DeleteBlockPoolResponseProto, error)
	// *
	// Retrieves the path names of the block file and metadata file stored on the
	// local file system.
	GetBlockLocalPathInfo(context.Context, *GetBlockLocalPathInfoRequestProto) (*GetBlockLocalPathInfoResponseProto, error)
	ShutdownDatanode(context.Context, *ShutdownDatanodeRequestProto) (*ShutdownDatanodeResponseProto, error)
	EvictWriters(context.Context, *EvictWritersRequestProto) (*EvictWritersResponseProto, error)
	GetDatanodeInfo(context.Context, *GetDatanodeInfoRequestProto) (*GetDatanodeInfoResponseProto, error)
	GetReconfigurationStatus(context.Context, *GetReconfigurationStatusRequestProto) (*GetReconfigurationStatusResponseProto, error)
	StartReconfiguration(context.Context, *StartReconfigurationRequestProto) (*StartReconfigurationResponseProto, error)
	ListReconfigurableProperties(context.Context, *ListReconfigurablePropertiesRequestProto) (*ListReconfigurablePropertiesResponseProto, error)
	TriggerBlockReport(context.Context, *TriggerBlockReportRequestProto) (*TriggerBlockReportResponseProto, error)
	// *
	// Returns the balancer bandwidth value of datanode.
	GetBalancerBandwidth(context.Context, *GetBalancerBandwidthRequestProto) (*GetBalancerBandwidthResponseProto, error)
	// *
	// Submit a disk balancer plan for execution
	SubmitDiskBalancerPlan(context.Context, *SubmitDiskBalancerPlanRequestProto) (*SubmitDiskBalancerPlanResponseProto, error)
	// *
	// Cancel an executing plan
	CancelDiskBalancerPlan(context.Context, *CancelPlanRequestProto) (*CancelPlanResponseProto, error)
	// *
	// Gets the status of an executing Plan
	QueryDiskBalancerPlan(context.Context, *QueryPlanStatusRequestProto) (*QueryPlanStatusResponseProto, error)
	// *
	//  Gets run-time settings of Disk Balancer.
	GetDiskBalancerSetting(context.Context, *DiskBalancerSettingRequestProto) (*DiskBalancerSettingResponseProto, error)
}

func RegisterClientDatanodeProtocolServiceServer(s *grpc.Server, srv ClientDatanodeProtocolServiceServer) {
	s.RegisterService(&_ClientDatanodeProtocolService_serviceDesc, srv)
}

func _ClientDatanodeProtocolService_GetReplicaVisibleLength_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReplicaVisibleLengthRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientDatanodeProtocolServiceServer).GetReplicaVisibleLength(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.hdfs.ClientDatanodeProtocolService/GetReplicaVisibleLength",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientDatanodeProtocolServiceServer).GetReplicaVisibleLength(ctx, req.(*GetReplicaVisibleLengthRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientDatanodeProtocolService_RefreshNamenodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshNamenodesRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientDatanodeProtocolServiceServer).RefreshNamenodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.hdfs.ClientDatanodeProtocolService/RefreshNamenodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientDatanodeProtocolServiceServer).RefreshNamenodes(ctx, req.(*RefreshNamenodesRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientDatanodeProtocolService_DeleteBlockPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBlockPoolRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientDatanodeProtocolServiceServer).DeleteBlockPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.hdfs.ClientDatanodeProtocolService/DeleteBlockPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientDatanodeProtocolServiceServer).DeleteBlockPool(ctx, req.(*DeleteBlockPoolRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientDatanodeProtocolService_GetBlockLocalPathInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockLocalPathInfoRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientDatanodeProtocolServiceServer).GetBlockLocalPathInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.hdfs.ClientDatanodeProtocolService/GetBlockLocalPathInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientDatanodeProtocolServiceServer).GetBlockLocalPathInfo(ctx, req.(*GetBlockLocalPathInfoRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientDatanodeProtocolService_ShutdownDatanode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownDatanodeRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientDatanodeProtocolServiceServer).ShutdownDatanode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.hdfs.ClientDatanodeProtocolService/ShutdownDatanode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientDatanodeProtocolServiceServer).ShutdownDatanode(ctx, req.(*ShutdownDatanodeRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientDatanodeProtocolService_EvictWriters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvictWritersRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientDatanodeProtocolServiceServer).EvictWriters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.hdfs.ClientDatanodeProtocolService/EvictWriters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientDatanodeProtocolServiceServer).EvictWriters(ctx, req.(*EvictWritersRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientDatanodeProtocolService_GetDatanodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatanodeInfoRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientDatanodeProtocolServiceServer).GetDatanodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.hdfs.ClientDatanodeProtocolService/GetDatanodeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientDatanodeProtocolServiceServer).GetDatanodeInfo(ctx, req.(*GetDatanodeInfoRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientDatanodeProtocolService_GetReconfigurationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReconfigurationStatusRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientDatanodeProtocolServiceServer).GetReconfigurationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.hdfs.ClientDatanodeProtocolService/GetReconfigurationStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientDatanodeProtocolServiceServer).GetReconfigurationStatus(ctx, req.(*GetReconfigurationStatusRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientDatanodeProtocolService_StartReconfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartReconfigurationRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientDatanodeProtocolServiceServer).StartReconfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.hdfs.ClientDatanodeProtocolService/StartReconfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientDatanodeProtocolServiceServer).StartReconfiguration(ctx, req.(*StartReconfigurationRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientDatanodeProtocolService_ListReconfigurableProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReconfigurablePropertiesRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientDatanodeProtocolServiceServer).ListReconfigurableProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.hdfs.ClientDatanodeProtocolService/ListReconfigurableProperties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientDatanodeProtocolServiceServer).ListReconfigurableProperties(ctx, req.(*ListReconfigurablePropertiesRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientDatanodeProtocolService_TriggerBlockReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerBlockReportRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientDatanodeProtocolServiceServer).TriggerBlockReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.hdfs.ClientDatanodeProtocolService/TriggerBlockReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientDatanodeProtocolServiceServer).TriggerBlockReport(ctx, req.(*TriggerBlockReportRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientDatanodeProtocolService_GetBalancerBandwidth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalancerBandwidthRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientDatanodeProtocolServiceServer).GetBalancerBandwidth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.hdfs.ClientDatanodeProtocolService/GetBalancerBandwidth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientDatanodeProtocolServiceServer).GetBalancerBandwidth(ctx, req.(*GetBalancerBandwidthRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientDatanodeProtocolService_SubmitDiskBalancerPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitDiskBalancerPlanRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientDatanodeProtocolServiceServer).SubmitDiskBalancerPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.hdfs.ClientDatanodeProtocolService/SubmitDiskBalancerPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientDatanodeProtocolServiceServer).SubmitDiskBalancerPlan(ctx, req.(*SubmitDiskBalancerPlanRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientDatanodeProtocolService_CancelDiskBalancerPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelPlanRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientDatanodeProtocolServiceServer).CancelDiskBalancerPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.hdfs.ClientDatanodeProtocolService/CancelDiskBalancerPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientDatanodeProtocolServiceServer).CancelDiskBalancerPlan(ctx, req.(*CancelPlanRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientDatanodeProtocolService_QueryDiskBalancerPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPlanStatusRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientDatanodeProtocolServiceServer).QueryDiskBalancerPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.hdfs.ClientDatanodeProtocolService/QueryDiskBalancerPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientDatanodeProtocolServiceServer).QueryDiskBalancerPlan(ctx, req.(*QueryPlanStatusRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientDatanodeProtocolService_GetDiskBalancerSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiskBalancerSettingRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientDatanodeProtocolServiceServer).GetDiskBalancerSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.hdfs.ClientDatanodeProtocolService/GetDiskBalancerSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientDatanodeProtocolServiceServer).GetDiskBalancerSetting(ctx, req.(*DiskBalancerSettingRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClientDatanodeProtocolService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hproto.hdfs.ClientDatanodeProtocolService",
	HandlerType: (*ClientDatanodeProtocolServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getReplicaVisibleLength",
			Handler:    _ClientDatanodeProtocolService_GetReplicaVisibleLength_Handler,
		},
		{
			MethodName: "refreshNamenodes",
			Handler:    _ClientDatanodeProtocolService_RefreshNamenodes_Handler,
		},
		{
			MethodName: "deleteBlockPool",
			Handler:    _ClientDatanodeProtocolService_DeleteBlockPool_Handler,
		},
		{
			MethodName: "getBlockLocalPathInfo",
			Handler:    _ClientDatanodeProtocolService_GetBlockLocalPathInfo_Handler,
		},
		{
			MethodName: "shutdownDatanode",
			Handler:    _ClientDatanodeProtocolService_ShutdownDatanode_Handler,
		},
		{
			MethodName: "evictWriters",
			Handler:    _ClientDatanodeProtocolService_EvictWriters_Handler,
		},
		{
			MethodName: "getDatanodeInfo",
			Handler:    _ClientDatanodeProtocolService_GetDatanodeInfo_Handler,
		},
		{
			MethodName: "getReconfigurationStatus",
			Handler:    _ClientDatanodeProtocolService_GetReconfigurationStatus_Handler,
		},
		{
			MethodName: "startReconfiguration",
			Handler:    _ClientDatanodeProtocolService_StartReconfiguration_Handler,
		},
		{
			MethodName: "listReconfigurableProperties",
			Handler:    _ClientDatanodeProtocolService_ListReconfigurableProperties_Handler,
		},
		{
			MethodName: "triggerBlockReport",
			Handler:    _ClientDatanodeProtocolService_TriggerBlockReport_Handler,
		},
		{
			MethodName: "getBalancerBandwidth",
			Handler:    _ClientDatanodeProtocolService_GetBalancerBandwidth_Handler,
		},
		{
			MethodName: "submitDiskBalancerPlan",
			Handler:    _ClientDatanodeProtocolService_SubmitDiskBalancerPlan_Handler,
		},
		{
			MethodName: "cancelDiskBalancerPlan",
			Handler:    _ClientDatanodeProtocolService_CancelDiskBalancerPlan_Handler,
		},
		{
			MethodName: "queryDiskBalancerPlan",
			Handler:    _ClientDatanodeProtocolService_QueryDiskBalancerPlan_Handler,
		},
		{
			MethodName: "getDiskBalancerSetting",
			Handler:    _ClientDatanodeProtocolService_GetDiskBalancerSetting_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor6,
}

func init() {
	proto.RegisterFile("gopkg.in/freddierice/go-hproto.v1/hdfs/ClientDatanodeProtocol.proto", fileDescriptor6)
}

var fileDescriptor6 = []byte{
	// 1105 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x57, 0xdd, 0x6e, 0xdc, 0x44,
	0x14, 0x96, 0xd3, 0x04, 0xa5, 0x27, 0x94, 0x56, 0xa3, 0x36, 0x4d, 0x9c, 0xcd, 0x4f, 0x9d, 0x04,
	0xa5, 0x40, 0x76, 0x93, 0xa0, 0x02, 0x57, 0x48, 0x4d, 0x52, 0xa1, 0x8a, 0x80, 0x52, 0x6f, 0x29,
	0x37, 0x70, 0xe1, 0xd8, 0x67, 0xbd, 0xa3, 0x75, 0x3c, 0xdb, 0xf1, 0x38, 0x6d, 0x84, 0x84, 0xc4,
	0x1d, 0x12, 0xe2, 0x0d, 0x90, 0xe0, 0xb1, 0x78, 0x1c, 0xc6, 0x63, 0x2f, 0x99, 0xb1, 0xbd, 0x5e,
	0x83, 0x7a, 0x93, 0xdd, 0x99, 0xf3, 0x9d, 0x9f, 0xf9, 0xe6, 0x9c, 0xf9, 0x36, 0x70, 0x12, 0xb2,
	0xf1, 0x28, 0xec, 0xd2, 0xb8, 0x37, 0xe0, 0x18, 0x04, 0x14, 0x39, 0xf5, 0xb1, 0x17, 0xb2, 0xfd,
	0xe1, 0x98, 0x33, 0xc1, 0xba, 0x57, 0x87, 0xbd, 0x61, 0x30, 0x48, 0x7a, 0x27, 0x11, 0xc5, 0x58,
	0x9c, 0x7a, 0xc2, 0x8b, 0x59, 0x80, 0xe7, 0x99, 0xcd, 0x67, 0x51, 0x57, 0x81, 0xc8, 0x52, 0x01,
	0xce, 0x90, 0xf6, 0xe7, 0xb3, 0x23, 0xfa, 0xec, 0xf2, 0x92, 0xc5, 0xbd, 0x3e, 0xfa, 0x29, 0xa7,
	0xe2, 0x3a, 0x8f, 0x62, 0x1f, 0xb6, 0x2c, 0x25, 0xfb, 0x53, 0xb8, 0x9c, 0xb6, 0x74, 0x71, 0xd1,
	0x67, 0xf1, 0x80, 0x86, 0x29, 0xf7, 0x04, 0x65, 0xb1, 0x59, 0xbe, 0xf3, 0x03, 0x6c, 0x7f, 0x85,
	0xc2, 0xc5, 0x71, 0x44, 0x7d, 0xef, 0x15, 0x4d, 0xe8, 0x45, 0x84, 0x67, 0x18, 0x87, 0x62, 0xe8,
	0xe2, 0xeb, 0x14, 0x13, 0xa1, 0xf0, 0xe4, 0x09, 0x2c, 0x5c, 0x44, 0xcc, 0x1f, 0xad, 0x58, 0x5b,
	0x73, 0x7b, 0x4b, 0x47, 0x9b, 0x5d, 0xed, 0xd4, 0xdd, 0x67, 0x6f, 0x05, 0xc6, 0x01, 0x06, 0xc7,
	0x19, 0x42, 0xe1, 0xdd, 0x1c, 0xed, 0x7c, 0x09, 0x3b, 0x53, 0xa3, 0x27, 0x63, 0x16, 0x27, 0x39,
	0x9b, 0x64, 0x19, 0xde, 0x8b, 0xd4, 0xb6, 0x8a, 0x3f, 0xef, 0x16, 0x2b, 0x67, 0x03, 0x3a, 0x2e,
	0xca, 0xe3, 0x25, 0xc3, 0x6f, 0xbd, 0x4b, 0xcc, 0xd8, 0x4f, 0xf4, 0xb2, 0x9c, 0x4d, 0x58, 0xaf,
	0xda, 0xb5, 0xc0, 0xce, 0x0b, 0x58, 0x3b, 0xc5, 0x08, 0x05, 0xe6, 0xb5, 0x31, 0x16, 0x19, 0xc7,
	0xea, 0xc0, 0xed, 0x8b, 0x89, 0x41, 0xa5, 0xbe, 0xed, 0xde, 0x6c, 0x90, 0xfb, 0xb0, 0x30, 0x60,
	0xdc, 0xc7, 0x95, 0x39, 0x69, 0x59, 0x74, 0xf3, 0x45, 0x56, 0x53, 0x25, 0xa4, 0x9e, 0xf2, 0x37,
	0x0b, 0x1e, 0xc9, 0x43, 0x2b, 0xeb, 0x19, 0xf3, 0xbd, 0xe8, 0xdc, 0x13, 0xc3, 0xe7, 0xf1, 0x80,
	0xbd, 0x03, 0x42, 0x49, 0x0f, 0x16, 0x04, 0x1b, 0x61, 0xac, 0x4a, 0x5a, 0x3a, 0x5a, 0x9d, 0xb8,
	0xe5, 0x5d, 0xd5, 0x7d, 0x99, 0xd9, 0x0a, 0x07, 0x85, 0x73, 0xfe, 0xb4, 0xc0, 0x99, 0x52, 0x8d,
	0x7e, 0x01, 0xff, 0xb3, 0x1c, 0xc9, 0x5f, 0x34, 0x09, 0xaa, 0x4a, 0x92, 0xfc, 0xfd, 0xbb, 0x41,
	0x76, 0xe0, 0x8e, 0x5a, 0x7c, 0x83, 0xc2, 0x53, 0x88, 0x5b, 0x0a, 0x61, 0x6e, 0xca, 0x1e, 0xe9,
	0xf4, 0x87, 0xa9, 0x08, 0xd8, 0x9b, 0x78, 0x32, 0x62, 0x06, 0x53, 0x1b, 0x00, 0x92, 0xf8, 0xef,
	0xc6, 0x21, 0xf7, 0x02, 0x54, 0xf5, 0x2d, 0xba, 0xda, 0x4e, 0xd6, 0x03, 0x55, 0x7f, 0xfd, 0x42,
	0x6c, 0x58, 0x79, 0x76, 0x45, 0x7d, 0xf1, 0xbd, 0x9c, 0x37, 0xe4, 0x66, 0x03, 0xad, 0xc1, 0xaa,
	0x69, 0xd3, 0x1d, 0xd7, 0x61, 0x4d, 0x52, 0x37, 0x09, 0x5a, 0xbe, 0x42, 0xc7, 0x83, 0x4e, 0xc5,
	0xac, 0x73, 0xfa, 0xb4, 0x20, 0x27, 0xb3, 0x14, 0xbc, 0x6e, 0x1b, 0xbc, 0x4e, 0x5c, 0xcf, 0x26,
	0xa8, 0x9c, 0xdb, 0x1b, 0x2f, 0xe7, 0x18, 0x36, 0x5e, 0x72, 0x1a, 0x86, 0xc8, 0x15, 0xf7, 0x72,
	0x90, 0x18, 0x17, 0x06, 0x3b, 0x5b, 0xb0, 0x44, 0x63, 0x9f, 0xa3, 0xec, 0x7e, 0xe1, 0x45, 0x05,
	0x3d, 0xfa, 0x96, 0xf3, 0x08, 0x36, 0xeb, 0x62, 0xe8, 0x07, 0x75, 0x60, 0x2b, 0xeb, 0x11, 0x2f,
	0xf2, 0x62, 0x5f, 0xc2, 0xbc, 0x38, 0x78, 0x43, 0x03, 0xf3, 0x05, 0x70, 0x9e, 0xe6, 0x5d, 0x5d,
	0xc5, 0xe8, 0x47, 0xce, 0xe6, 0x69, 0x62, 0x29, 0x46, 0xf9, 0x66, 0xc3, 0xf9, 0x43, 0xf6, 0x62,
	0x3f, 0xbd, 0xb8, 0xa4, 0xe2, 0x94, 0x26, 0xa3, 0x49, 0xa8, 0x73, 0xf9, 0x61, 0x1c, 0x49, 0x3e,
	0x06, 0x63, 0xb9, 0xf7, 0xfc, 0xb4, 0x98, 0xc8, 0x62, 0x45, 0x08, 0xcc, 0x67, 0xdf, 0x8a, 0x3e,
	0x53, 0xdf, 0xb3, 0xe3, 0x67, 0x9f, 0xaf, 0xe4, 0xdd, 0xc9, 0xb7, 0x4d, 0x36, 0x98, 0x25, 0x53,
	0xea, 0x5b, 0x64, 0x0f, 0xee, 0xd2, 0x30, 0x66, 0x1c, 0x25, 0xdb, 0x78, 0x32, 0x44, 0xd9, 0xe3,
	0xf3, 0x12, 0xb5, 0xe8, 0x96, 0xb7, 0x9d, 0x5d, 0xd8, 0x9e, 0x56, 0x9d, 0x4e, 0xd6, 0x01, 0x2c,
	0x9f, 0x64, 0xa6, 0xa8, 0x6d, 0xe1, 0xce, 0x2a, 0x3c, 0xd4, 0x3d, 0x4a, 0x2d, 0xf6, 0x22, 0x45,
	0x7e, 0x9d, 0x59, 0xfa, 0xc2, 0x13, 0xa9, 0xd9, 0x9e, 0x02, 0x3a, 0x15, 0x73, 0xe9, 0xdd, 0x94,
	0x8f, 0x5f, 0x1a, 0x09, 0x99, 0xd1, 0xda, 0xbb, 0xe3, 0x16, 0x2b, 0xad, 0x92, 0x39, 0xb9, 0x7f,
	0x43, 0xa1, 0x9c, 0x48, 0x29, 0x3b, 0x5c, 0x36, 0x46, 0x1e, 0x4d, 0x11, 0x26, 0x27, 0xd2, 0xd8,
	0x74, 0x3e, 0x85, 0x4d, 0x9d, 0x82, 0x3e, 0x0a, 0x41, 0xe3, 0xd0, 0x38, 0xea, 0x3d, 0xb8, 0x35,
	0xc2, 0xeb, 0xe2, 0x9c, 0xd9, 0x57, 0xe7, 0x0b, 0xd8, 0xaa, 0x75, 0xd2, 0xcb, 0x95, 0x0f, 0xea,
	0x95, 0x17, 0xa5, 0x58, 0xf8, 0xe5, 0x8b, 0xa3, 0xbf, 0x3f, 0x80, 0xf5, 0x7a, 0x89, 0xed, 0x23,
	0x97, 0xc3, 0x89, 0xe4, 0x67, 0x78, 0x18, 0xd6, 0xcb, 0x08, 0x39, 0x30, 0x26, 0xaa, 0x85, 0x94,
	0xd9, 0x87, 0xed, 0x3c, 0xf4, 0xba, 0x29, 0xdc, 0xe3, 0x25, 0x99, 0x21, 0x8f, 0x8d, 0x30, 0x4d,
	0x2a, 0x65, 0x7f, 0x34, 0x03, 0xaa, 0xa7, 0x1a, 0xc0, 0xdd, 0xc0, 0x54, 0x17, 0xb2, 0x67, 0x3e,
	0x1a, 0xd3, 0xe5, 0xcc, 0x7e, 0xdc, 0x8c, 0xd4, 0xf3, 0xbc, 0x85, 0x07, 0x61, 0x9d, 0x2c, 0x90,
	0x6e, 0x99, 0x9e, 0x66, 0x21, 0xb3, 0x7b, 0x6d, 0xf0, 0x25, 0x32, 0x93, 0xd2, 0x7b, 0x5d, 0x22,
	0xb3, 0x49, 0x0e, 0x4a, 0x64, 0x36, 0xbe, 0xfc, 0xe4, 0x47, 0x78, 0x1f, 0xb5, 0xd7, 0x9d, 0xec,
	0x9a, 0xb2, 0x36, 0x45, 0x14, 0xec, 0x0f, 0x1b, 0x60, 0xa5, 0xbb, 0x0a, 0x4d, 0x01, 0x28, 0xdd,
	0x55, 0x83, 0x7a, 0x94, 0xee, 0xaa, 0x51, 0x48, 0x7e, 0xb1, 0x60, 0x45, 0xf5, 0xbf, 0xf1, 0x43,
	0x2e, 0x1f, 0x56, 0x52, 0xd3, 0xce, 0x35, 0x30, 0x23, 0xf5, 0x51, 0x4b, 0x17, 0xbd, 0x86, 0x14,
	0xee, 0x27, 0xc2, 0xe3, 0x65, 0x28, 0xd9, 0x37, 0xaf, 0xa3, 0x06, 0x62, 0xa4, 0xee, 0xb6, 0x80,
	0xeb, 0x69, 0x7f, 0xb7, 0xa0, 0x13, 0xd1, 0x44, 0x07, 0xc9, 0x19, 0x95, 0xb6, 0x31, 0x72, 0x41,
	0xe5, 0x18, 0x3e, 0x31, 0x02, 0x9e, 0x35, 0x40, 0x8d, 0x3a, 0x3e, 0xfb, 0x0f, 0x6e, 0x7a, 0x3d,
	0x0c, 0x88, 0xa8, 0x88, 0x29, 0xf9, 0xd8, 0x88, 0xd6, 0xac, 0xd8, 0xf6, 0x27, 0x33, 0xc1, 0x25,
	0xde, 0xc3, 0x1a, 0xd9, 0x2d, 0xf1, 0x3e, 0x4b, 0xbd, 0xed, 0x6e, 0x0b, 0xb8, 0x9e, 0xf6, 0x27,
	0x58, 0x4e, 0x6a, 0xb5, 0x90, 0x98, 0xf3, 0x3e, 0x5b, 0xce, 0xed, 0x83, 0x56, 0x0e, 0x7a, 0x72,
	0x1f, 0x96, 0x7d, 0xa5, 0x97, 0x95, 0xe4, 0xe6, 0xef, 0xa7, 0x7a, 0x19, 0xb6, 0x77, 0xa6, 0x82,
	0xf4, 0x24, 0x11, 0x3c, 0x78, 0x9d, 0x49, 0x6b, 0x25, 0x87, 0x39, 0xc2, 0x0d, 0xea, 0x5c, 0x1a,
	0xe1, 0x46, 0xa1, 0x4e, 0x61, 0x39, 0x7b, 0x2a, 0xaa, 0x02, 0x49, 0xcc, 0x76, 0x98, 0xa1, 0xbb,
	0xf6, 0xfe, 0x6c, 0xb4, 0x96, 0xf6, 0xf8, 0x6b, 0xd8, 0x65, 0x3c, 0xec, 0x7a, 0x63, 0xcf, 0x1f,
	0xa2, 0xe1, 0x3a, 0x36, 0xfe, 0x0d, 0x3c, 0xee, 0xd4, 0x0b, 0xb0, 0xfa, 0x4c, 0x7e, 0xb5, 0xac,
	0xbf, 0x2c, 0xeb, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x60, 0x81, 0xb5, 0xde, 0x2f, 0x0f, 0x00,
	0x00,
}
