// Code generated by protoc-gen-go.
// source: gopkg.in/freddierice/go-hproto.v1/hdfs/qjournal/QJournalProtocol.proto
// DO NOT EDIT!

/*
Package hproto_hdfs_qjournal is a generated protocol buffer package.

It is generated from these files:
	gopkg.in/freddierice/go-hproto.v1/hdfs/qjournal/QJournalProtocol.proto

It has these top-level messages:
	JournalIdProto
	RequestInfoProto
	SegmentStateProto
	PersistedRecoveryPaxosData
	JournalRequestProto
	JournalResponseProto
	HeartbeatRequestProto
	HeartbeatResponseProto
	StartLogSegmentRequestProto
	StartLogSegmentResponseProto
	FinalizeLogSegmentRequestProto
	FinalizeLogSegmentResponseProto
	PurgeLogsRequestProto
	PurgeLogsResponseProto
	IsFormattedRequestProto
	IsFormattedResponseProto
	GetJournalCTimeRequestProto
	GetJournalCTimeResponseProto
	DoPreUpgradeRequestProto
	DoPreUpgradeResponseProto
	DoUpgradeRequestProto
	DoUpgradeResponseProto
	DoFinalizeRequestProto
	DoFinalizeResponseProto
	CanRollBackRequestProto
	CanRollBackResponseProto
	DoRollbackRequestProto
	DoRollbackResponseProto
	DiscardSegmentsRequestProto
	DiscardSegmentsResponseProto
	GetJournalStateRequestProto
	GetJournalStateResponseProto
	FormatRequestProto
	FormatResponseProto
	NewEpochRequestProto
	NewEpochResponseProto
	GetEditLogManifestRequestProto
	GetEditLogManifestResponseProto
	PrepareRecoveryRequestProto
	PrepareRecoveryResponseProto
	AcceptRecoveryRequestProto
	AcceptRecoveryResponseProto
*/
package hproto_hdfs_qjournal

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "gopkg.in/freddierice/go-hproto.v1/hdfs"
import hproto_hdfs1 "gopkg.in/freddierice/go-hproto.v1/hdfs"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type JournalIdProto struct {
	Identifier       *string `protobuf:"bytes,1,req,name=identifier" json:"identifier,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *JournalIdProto) Reset()                    { *m = JournalIdProto{} }
func (m *JournalIdProto) String() string            { return proto.CompactTextString(m) }
func (*JournalIdProto) ProtoMessage()               {}
func (*JournalIdProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *JournalIdProto) GetIdentifier() string {
	if m != nil && m.Identifier != nil {
		return *m.Identifier
	}
	return ""
}

type RequestInfoProto struct {
	JournalId       *JournalIdProto `protobuf:"bytes,1,req,name=journalId" json:"journalId,omitempty"`
	Epoch           *uint64         `protobuf:"varint,2,req,name=epoch" json:"epoch,omitempty"`
	IpcSerialNumber *uint64         `protobuf:"varint,3,req,name=ipcSerialNumber" json:"ipcSerialNumber,omitempty"`
	// Whenever a writer makes a request, it informs
	// the node of the latest committed txid. This may
	// be higher than the transaction data included in the
	// request itself, eg in the case that the node has
	// fallen behind.
	CommittedTxId    *uint64 `protobuf:"varint,4,opt,name=committedTxId" json:"committedTxId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RequestInfoProto) Reset()                    { *m = RequestInfoProto{} }
func (m *RequestInfoProto) String() string            { return proto.CompactTextString(m) }
func (*RequestInfoProto) ProtoMessage()               {}
func (*RequestInfoProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RequestInfoProto) GetJournalId() *JournalIdProto {
	if m != nil {
		return m.JournalId
	}
	return nil
}

func (m *RequestInfoProto) GetEpoch() uint64 {
	if m != nil && m.Epoch != nil {
		return *m.Epoch
	}
	return 0
}

func (m *RequestInfoProto) GetIpcSerialNumber() uint64 {
	if m != nil && m.IpcSerialNumber != nil {
		return *m.IpcSerialNumber
	}
	return 0
}

func (m *RequestInfoProto) GetCommittedTxId() uint64 {
	if m != nil && m.CommittedTxId != nil {
		return *m.CommittedTxId
	}
	return 0
}

type SegmentStateProto struct {
	StartTxId        *uint64 `protobuf:"varint,1,req,name=startTxId" json:"startTxId,omitempty"`
	EndTxId          *uint64 `protobuf:"varint,2,req,name=endTxId" json:"endTxId,omitempty"`
	IsInProgress     *bool   `protobuf:"varint,3,req,name=isInProgress" json:"isInProgress,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SegmentStateProto) Reset()                    { *m = SegmentStateProto{} }
func (m *SegmentStateProto) String() string            { return proto.CompactTextString(m) }
func (*SegmentStateProto) ProtoMessage()               {}
func (*SegmentStateProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SegmentStateProto) GetStartTxId() uint64 {
	if m != nil && m.StartTxId != nil {
		return *m.StartTxId
	}
	return 0
}

func (m *SegmentStateProto) GetEndTxId() uint64 {
	if m != nil && m.EndTxId != nil {
		return *m.EndTxId
	}
	return 0
}

func (m *SegmentStateProto) GetIsInProgress() bool {
	if m != nil && m.IsInProgress != nil {
		return *m.IsInProgress
	}
	return false
}

// *
// The storage format used on local disk for previously
// accepted decisions.
type PersistedRecoveryPaxosData struct {
	SegmentState     *SegmentStateProto `protobuf:"bytes,1,req,name=segmentState" json:"segmentState,omitempty"`
	AcceptedInEpoch  *uint64            `protobuf:"varint,2,req,name=acceptedInEpoch" json:"acceptedInEpoch,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *PersistedRecoveryPaxosData) Reset()                    { *m = PersistedRecoveryPaxosData{} }
func (m *PersistedRecoveryPaxosData) String() string            { return proto.CompactTextString(m) }
func (*PersistedRecoveryPaxosData) ProtoMessage()               {}
func (*PersistedRecoveryPaxosData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PersistedRecoveryPaxosData) GetSegmentState() *SegmentStateProto {
	if m != nil {
		return m.SegmentState
	}
	return nil
}

func (m *PersistedRecoveryPaxosData) GetAcceptedInEpoch() uint64 {
	if m != nil && m.AcceptedInEpoch != nil {
		return *m.AcceptedInEpoch
	}
	return 0
}

type JournalRequestProto struct {
	ReqInfo          *RequestInfoProto `protobuf:"bytes,1,req,name=reqInfo" json:"reqInfo,omitempty"`
	FirstTxnId       *uint64           `protobuf:"varint,2,req,name=firstTxnId" json:"firstTxnId,omitempty"`
	NumTxns          *uint32           `protobuf:"varint,3,req,name=numTxns" json:"numTxns,omitempty"`
	Records          []byte            `protobuf:"bytes,4,req,name=records" json:"records,omitempty"`
	SegmentTxnId     *uint64           `protobuf:"varint,5,req,name=segmentTxnId" json:"segmentTxnId,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *JournalRequestProto) Reset()                    { *m = JournalRequestProto{} }
func (m *JournalRequestProto) String() string            { return proto.CompactTextString(m) }
func (*JournalRequestProto) ProtoMessage()               {}
func (*JournalRequestProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *JournalRequestProto) GetReqInfo() *RequestInfoProto {
	if m != nil {
		return m.ReqInfo
	}
	return nil
}

func (m *JournalRequestProto) GetFirstTxnId() uint64 {
	if m != nil && m.FirstTxnId != nil {
		return *m.FirstTxnId
	}
	return 0
}

func (m *JournalRequestProto) GetNumTxns() uint32 {
	if m != nil && m.NumTxns != nil {
		return *m.NumTxns
	}
	return 0
}

func (m *JournalRequestProto) GetRecords() []byte {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *JournalRequestProto) GetSegmentTxnId() uint64 {
	if m != nil && m.SegmentTxnId != nil {
		return *m.SegmentTxnId
	}
	return 0
}

type JournalResponseProto struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *JournalResponseProto) Reset()                    { *m = JournalResponseProto{} }
func (m *JournalResponseProto) String() string            { return proto.CompactTextString(m) }
func (*JournalResponseProto) ProtoMessage()               {}
func (*JournalResponseProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type HeartbeatRequestProto struct {
	ReqInfo          *RequestInfoProto `protobuf:"bytes,1,req,name=reqInfo" json:"reqInfo,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *HeartbeatRequestProto) Reset()                    { *m = HeartbeatRequestProto{} }
func (m *HeartbeatRequestProto) String() string            { return proto.CompactTextString(m) }
func (*HeartbeatRequestProto) ProtoMessage()               {}
func (*HeartbeatRequestProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *HeartbeatRequestProto) GetReqInfo() *RequestInfoProto {
	if m != nil {
		return m.ReqInfo
	}
	return nil
}

type HeartbeatResponseProto struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *HeartbeatResponseProto) Reset()                    { *m = HeartbeatResponseProto{} }
func (m *HeartbeatResponseProto) String() string            { return proto.CompactTextString(m) }
func (*HeartbeatResponseProto) ProtoMessage()               {}
func (*HeartbeatResponseProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

// *
// startLogSegment()
type StartLogSegmentRequestProto struct {
	ReqInfo          *RequestInfoProto `protobuf:"bytes,1,req,name=reqInfo" json:"reqInfo,omitempty"`
	Txid             *uint64           `protobuf:"varint,2,req,name=txid" json:"txid,omitempty"`
	LayoutVersion    *int32            `protobuf:"zigzag32,3,opt,name=layoutVersion" json:"layoutVersion,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *StartLogSegmentRequestProto) Reset()                    { *m = StartLogSegmentRequestProto{} }
func (m *StartLogSegmentRequestProto) String() string            { return proto.CompactTextString(m) }
func (*StartLogSegmentRequestProto) ProtoMessage()               {}
func (*StartLogSegmentRequestProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *StartLogSegmentRequestProto) GetReqInfo() *RequestInfoProto {
	if m != nil {
		return m.ReqInfo
	}
	return nil
}

func (m *StartLogSegmentRequestProto) GetTxid() uint64 {
	if m != nil && m.Txid != nil {
		return *m.Txid
	}
	return 0
}

func (m *StartLogSegmentRequestProto) GetLayoutVersion() int32 {
	if m != nil && m.LayoutVersion != nil {
		return *m.LayoutVersion
	}
	return 0
}

type StartLogSegmentResponseProto struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *StartLogSegmentResponseProto) Reset()                    { *m = StartLogSegmentResponseProto{} }
func (m *StartLogSegmentResponseProto) String() string            { return proto.CompactTextString(m) }
func (*StartLogSegmentResponseProto) ProtoMessage()               {}
func (*StartLogSegmentResponseProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

// *
// finalizeLogSegment()
type FinalizeLogSegmentRequestProto struct {
	ReqInfo          *RequestInfoProto `protobuf:"bytes,1,req,name=reqInfo" json:"reqInfo,omitempty"`
	StartTxId        *uint64           `protobuf:"varint,2,req,name=startTxId" json:"startTxId,omitempty"`
	EndTxId          *uint64           `protobuf:"varint,3,req,name=endTxId" json:"endTxId,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *FinalizeLogSegmentRequestProto) Reset()                    { *m = FinalizeLogSegmentRequestProto{} }
func (m *FinalizeLogSegmentRequestProto) String() string            { return proto.CompactTextString(m) }
func (*FinalizeLogSegmentRequestProto) ProtoMessage()               {}
func (*FinalizeLogSegmentRequestProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *FinalizeLogSegmentRequestProto) GetReqInfo() *RequestInfoProto {
	if m != nil {
		return m.ReqInfo
	}
	return nil
}

func (m *FinalizeLogSegmentRequestProto) GetStartTxId() uint64 {
	if m != nil && m.StartTxId != nil {
		return *m.StartTxId
	}
	return 0
}

func (m *FinalizeLogSegmentRequestProto) GetEndTxId() uint64 {
	if m != nil && m.EndTxId != nil {
		return *m.EndTxId
	}
	return 0
}

type FinalizeLogSegmentResponseProto struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *FinalizeLogSegmentResponseProto) Reset()         { *m = FinalizeLogSegmentResponseProto{} }
func (m *FinalizeLogSegmentResponseProto) String() string { return proto.CompactTextString(m) }
func (*FinalizeLogSegmentResponseProto) ProtoMessage()    {}
func (*FinalizeLogSegmentResponseProto) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{11}
}

// *
// purgeLogs()
type PurgeLogsRequestProto struct {
	ReqInfo          *RequestInfoProto `protobuf:"bytes,1,req,name=reqInfo" json:"reqInfo,omitempty"`
	MinTxIdToKeep    *uint64           `protobuf:"varint,2,req,name=minTxIdToKeep" json:"minTxIdToKeep,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *PurgeLogsRequestProto) Reset()                    { *m = PurgeLogsRequestProto{} }
func (m *PurgeLogsRequestProto) String() string            { return proto.CompactTextString(m) }
func (*PurgeLogsRequestProto) ProtoMessage()               {}
func (*PurgeLogsRequestProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *PurgeLogsRequestProto) GetReqInfo() *RequestInfoProto {
	if m != nil {
		return m.ReqInfo
	}
	return nil
}

func (m *PurgeLogsRequestProto) GetMinTxIdToKeep() uint64 {
	if m != nil && m.MinTxIdToKeep != nil {
		return *m.MinTxIdToKeep
	}
	return 0
}

type PurgeLogsResponseProto struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *PurgeLogsResponseProto) Reset()                    { *m = PurgeLogsResponseProto{} }
func (m *PurgeLogsResponseProto) String() string            { return proto.CompactTextString(m) }
func (*PurgeLogsResponseProto) ProtoMessage()               {}
func (*PurgeLogsResponseProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

// *
// isFormatted()
type IsFormattedRequestProto struct {
	Jid              *JournalIdProto `protobuf:"bytes,1,req,name=jid" json:"jid,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *IsFormattedRequestProto) Reset()                    { *m = IsFormattedRequestProto{} }
func (m *IsFormattedRequestProto) String() string            { return proto.CompactTextString(m) }
func (*IsFormattedRequestProto) ProtoMessage()               {}
func (*IsFormattedRequestProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *IsFormattedRequestProto) GetJid() *JournalIdProto {
	if m != nil {
		return m.Jid
	}
	return nil
}

type IsFormattedResponseProto struct {
	IsFormatted      *bool  `protobuf:"varint,1,req,name=isFormatted" json:"isFormatted,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *IsFormattedResponseProto) Reset()                    { *m = IsFormattedResponseProto{} }
func (m *IsFormattedResponseProto) String() string            { return proto.CompactTextString(m) }
func (*IsFormattedResponseProto) ProtoMessage()               {}
func (*IsFormattedResponseProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *IsFormattedResponseProto) GetIsFormatted() bool {
	if m != nil && m.IsFormatted != nil {
		return *m.IsFormatted
	}
	return false
}

// *
// getJournalCTime()
type GetJournalCTimeRequestProto struct {
	Jid              *JournalIdProto `protobuf:"bytes,1,req,name=jid" json:"jid,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *GetJournalCTimeRequestProto) Reset()                    { *m = GetJournalCTimeRequestProto{} }
func (m *GetJournalCTimeRequestProto) String() string            { return proto.CompactTextString(m) }
func (*GetJournalCTimeRequestProto) ProtoMessage()               {}
func (*GetJournalCTimeRequestProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *GetJournalCTimeRequestProto) GetJid() *JournalIdProto {
	if m != nil {
		return m.Jid
	}
	return nil
}

type GetJournalCTimeResponseProto struct {
	ResultCTime      *int64 `protobuf:"varint,1,req,name=resultCTime" json:"resultCTime,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GetJournalCTimeResponseProto) Reset()                    { *m = GetJournalCTimeResponseProto{} }
func (m *GetJournalCTimeResponseProto) String() string            { return proto.CompactTextString(m) }
func (*GetJournalCTimeResponseProto) ProtoMessage()               {}
func (*GetJournalCTimeResponseProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *GetJournalCTimeResponseProto) GetResultCTime() int64 {
	if m != nil && m.ResultCTime != nil {
		return *m.ResultCTime
	}
	return 0
}

// *
// doPreUpgrade()
type DoPreUpgradeRequestProto struct {
	Jid              *JournalIdProto `protobuf:"bytes,1,req,name=jid" json:"jid,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *DoPreUpgradeRequestProto) Reset()                    { *m = DoPreUpgradeRequestProto{} }
func (m *DoPreUpgradeRequestProto) String() string            { return proto.CompactTextString(m) }
func (*DoPreUpgradeRequestProto) ProtoMessage()               {}
func (*DoPreUpgradeRequestProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *DoPreUpgradeRequestProto) GetJid() *JournalIdProto {
	if m != nil {
		return m.Jid
	}
	return nil
}

type DoPreUpgradeResponseProto struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *DoPreUpgradeResponseProto) Reset()                    { *m = DoPreUpgradeResponseProto{} }
func (m *DoPreUpgradeResponseProto) String() string            { return proto.CompactTextString(m) }
func (*DoPreUpgradeResponseProto) ProtoMessage()               {}
func (*DoPreUpgradeResponseProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

// *
// doUpgrade()
type DoUpgradeRequestProto struct {
	Jid              *JournalIdProto                `protobuf:"bytes,1,req,name=jid" json:"jid,omitempty"`
	SInfo            *hproto_hdfs1.StorageInfoProto `protobuf:"bytes,2,req,name=sInfo" json:"sInfo,omitempty"`
	XXX_unrecognized []byte                         `json:"-"`
}

func (m *DoUpgradeRequestProto) Reset()                    { *m = DoUpgradeRequestProto{} }
func (m *DoUpgradeRequestProto) String() string            { return proto.CompactTextString(m) }
func (*DoUpgradeRequestProto) ProtoMessage()               {}
func (*DoUpgradeRequestProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *DoUpgradeRequestProto) GetJid() *JournalIdProto {
	if m != nil {
		return m.Jid
	}
	return nil
}

func (m *DoUpgradeRequestProto) GetSInfo() *hproto_hdfs1.StorageInfoProto {
	if m != nil {
		return m.SInfo
	}
	return nil
}

type DoUpgradeResponseProto struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *DoUpgradeResponseProto) Reset()                    { *m = DoUpgradeResponseProto{} }
func (m *DoUpgradeResponseProto) String() string            { return proto.CompactTextString(m) }
func (*DoUpgradeResponseProto) ProtoMessage()               {}
func (*DoUpgradeResponseProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

// *
// doFinalize()
type DoFinalizeRequestProto struct {
	Jid              *JournalIdProto `protobuf:"bytes,1,req,name=jid" json:"jid,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *DoFinalizeRequestProto) Reset()                    { *m = DoFinalizeRequestProto{} }
func (m *DoFinalizeRequestProto) String() string            { return proto.CompactTextString(m) }
func (*DoFinalizeRequestProto) ProtoMessage()               {}
func (*DoFinalizeRequestProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *DoFinalizeRequestProto) GetJid() *JournalIdProto {
	if m != nil {
		return m.Jid
	}
	return nil
}

type DoFinalizeResponseProto struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *DoFinalizeResponseProto) Reset()                    { *m = DoFinalizeResponseProto{} }
func (m *DoFinalizeResponseProto) String() string            { return proto.CompactTextString(m) }
func (*DoFinalizeResponseProto) ProtoMessage()               {}
func (*DoFinalizeResponseProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

// *
// canRollBack()
type CanRollBackRequestProto struct {
	Jid                 *JournalIdProto                `protobuf:"bytes,1,req,name=jid" json:"jid,omitempty"`
	Storage             *hproto_hdfs1.StorageInfoProto `protobuf:"bytes,2,req,name=storage" json:"storage,omitempty"`
	PrevStorage         *hproto_hdfs1.StorageInfoProto `protobuf:"bytes,3,req,name=prevStorage" json:"prevStorage,omitempty"`
	TargetLayoutVersion *int32                         `protobuf:"varint,4,req,name=targetLayoutVersion" json:"targetLayoutVersion,omitempty"`
	XXX_unrecognized    []byte                         `json:"-"`
}

func (m *CanRollBackRequestProto) Reset()                    { *m = CanRollBackRequestProto{} }
func (m *CanRollBackRequestProto) String() string            { return proto.CompactTextString(m) }
func (*CanRollBackRequestProto) ProtoMessage()               {}
func (*CanRollBackRequestProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *CanRollBackRequestProto) GetJid() *JournalIdProto {
	if m != nil {
		return m.Jid
	}
	return nil
}

func (m *CanRollBackRequestProto) GetStorage() *hproto_hdfs1.StorageInfoProto {
	if m != nil {
		return m.Storage
	}
	return nil
}

func (m *CanRollBackRequestProto) GetPrevStorage() *hproto_hdfs1.StorageInfoProto {
	if m != nil {
		return m.PrevStorage
	}
	return nil
}

func (m *CanRollBackRequestProto) GetTargetLayoutVersion() int32 {
	if m != nil && m.TargetLayoutVersion != nil {
		return *m.TargetLayoutVersion
	}
	return 0
}

type CanRollBackResponseProto struct {
	CanRollBack      *bool  `protobuf:"varint,1,req,name=canRollBack" json:"canRollBack,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CanRollBackResponseProto) Reset()                    { *m = CanRollBackResponseProto{} }
func (m *CanRollBackResponseProto) String() string            { return proto.CompactTextString(m) }
func (*CanRollBackResponseProto) ProtoMessage()               {}
func (*CanRollBackResponseProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *CanRollBackResponseProto) GetCanRollBack() bool {
	if m != nil && m.CanRollBack != nil {
		return *m.CanRollBack
	}
	return false
}

// *
// doRollback()
type DoRollbackRequestProto struct {
	Jid              *JournalIdProto `protobuf:"bytes,1,req,name=jid" json:"jid,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *DoRollbackRequestProto) Reset()                    { *m = DoRollbackRequestProto{} }
func (m *DoRollbackRequestProto) String() string            { return proto.CompactTextString(m) }
func (*DoRollbackRequestProto) ProtoMessage()               {}
func (*DoRollbackRequestProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *DoRollbackRequestProto) GetJid() *JournalIdProto {
	if m != nil {
		return m.Jid
	}
	return nil
}

type DoRollbackResponseProto struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *DoRollbackResponseProto) Reset()                    { *m = DoRollbackResponseProto{} }
func (m *DoRollbackResponseProto) String() string            { return proto.CompactTextString(m) }
func (*DoRollbackResponseProto) ProtoMessage()               {}
func (*DoRollbackResponseProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

// *
// discardSegments()
type DiscardSegmentsRequestProto struct {
	Jid              *JournalIdProto `protobuf:"bytes,1,req,name=jid" json:"jid,omitempty"`
	StartTxId        *uint64         `protobuf:"varint,2,req,name=startTxId" json:"startTxId,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *DiscardSegmentsRequestProto) Reset()                    { *m = DiscardSegmentsRequestProto{} }
func (m *DiscardSegmentsRequestProto) String() string            { return proto.CompactTextString(m) }
func (*DiscardSegmentsRequestProto) ProtoMessage()               {}
func (*DiscardSegmentsRequestProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *DiscardSegmentsRequestProto) GetJid() *JournalIdProto {
	if m != nil {
		return m.Jid
	}
	return nil
}

func (m *DiscardSegmentsRequestProto) GetStartTxId() uint64 {
	if m != nil && m.StartTxId != nil {
		return *m.StartTxId
	}
	return 0
}

type DiscardSegmentsResponseProto struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *DiscardSegmentsResponseProto) Reset()                    { *m = DiscardSegmentsResponseProto{} }
func (m *DiscardSegmentsResponseProto) String() string            { return proto.CompactTextString(m) }
func (*DiscardSegmentsResponseProto) ProtoMessage()               {}
func (*DiscardSegmentsResponseProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

// *
// getJournalState()
type GetJournalStateRequestProto struct {
	Jid              *JournalIdProto `protobuf:"bytes,1,req,name=jid" json:"jid,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *GetJournalStateRequestProto) Reset()                    { *m = GetJournalStateRequestProto{} }
func (m *GetJournalStateRequestProto) String() string            { return proto.CompactTextString(m) }
func (*GetJournalStateRequestProto) ProtoMessage()               {}
func (*GetJournalStateRequestProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *GetJournalStateRequestProto) GetJid() *JournalIdProto {
	if m != nil {
		return m.Jid
	}
	return nil
}

type GetJournalStateResponseProto struct {
	LastPromisedEpoch *uint64 `protobuf:"varint,1,req,name=lastPromisedEpoch" json:"lastPromisedEpoch,omitempty"`
	// Deprecated by fromURL
	HttpPort         *uint32 `protobuf:"varint,2,req,name=httpPort" json:"httpPort,omitempty"`
	FromURL          *string `protobuf:"bytes,3,opt,name=fromURL" json:"fromURL,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GetJournalStateResponseProto) Reset()                    { *m = GetJournalStateResponseProto{} }
func (m *GetJournalStateResponseProto) String() string            { return proto.CompactTextString(m) }
func (*GetJournalStateResponseProto) ProtoMessage()               {}
func (*GetJournalStateResponseProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *GetJournalStateResponseProto) GetLastPromisedEpoch() uint64 {
	if m != nil && m.LastPromisedEpoch != nil {
		return *m.LastPromisedEpoch
	}
	return 0
}

func (m *GetJournalStateResponseProto) GetHttpPort() uint32 {
	if m != nil && m.HttpPort != nil {
		return *m.HttpPort
	}
	return 0
}

func (m *GetJournalStateResponseProto) GetFromURL() string {
	if m != nil && m.FromURL != nil {
		return *m.FromURL
	}
	return ""
}

// *
// format()
type FormatRequestProto struct {
	Jid              *JournalIdProto                  `protobuf:"bytes,1,req,name=jid" json:"jid,omitempty"`
	NsInfo           *hproto_hdfs1.NamespaceInfoProto `protobuf:"bytes,2,req,name=nsInfo" json:"nsInfo,omitempty"`
	XXX_unrecognized []byte                           `json:"-"`
}

func (m *FormatRequestProto) Reset()                    { *m = FormatRequestProto{} }
func (m *FormatRequestProto) String() string            { return proto.CompactTextString(m) }
func (*FormatRequestProto) ProtoMessage()               {}
func (*FormatRequestProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *FormatRequestProto) GetJid() *JournalIdProto {
	if m != nil {
		return m.Jid
	}
	return nil
}

func (m *FormatRequestProto) GetNsInfo() *hproto_hdfs1.NamespaceInfoProto {
	if m != nil {
		return m.NsInfo
	}
	return nil
}

type FormatResponseProto struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *FormatResponseProto) Reset()                    { *m = FormatResponseProto{} }
func (m *FormatResponseProto) String() string            { return proto.CompactTextString(m) }
func (*FormatResponseProto) ProtoMessage()               {}
func (*FormatResponseProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

// *
// newEpoch()
type NewEpochRequestProto struct {
	Jid              *JournalIdProto                  `protobuf:"bytes,1,req,name=jid" json:"jid,omitempty"`
	NsInfo           *hproto_hdfs1.NamespaceInfoProto `protobuf:"bytes,2,req,name=nsInfo" json:"nsInfo,omitempty"`
	Epoch            *uint64                          `protobuf:"varint,3,req,name=epoch" json:"epoch,omitempty"`
	XXX_unrecognized []byte                           `json:"-"`
}

func (m *NewEpochRequestProto) Reset()                    { *m = NewEpochRequestProto{} }
func (m *NewEpochRequestProto) String() string            { return proto.CompactTextString(m) }
func (*NewEpochRequestProto) ProtoMessage()               {}
func (*NewEpochRequestProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *NewEpochRequestProto) GetJid() *JournalIdProto {
	if m != nil {
		return m.Jid
	}
	return nil
}

func (m *NewEpochRequestProto) GetNsInfo() *hproto_hdfs1.NamespaceInfoProto {
	if m != nil {
		return m.NsInfo
	}
	return nil
}

func (m *NewEpochRequestProto) GetEpoch() uint64 {
	if m != nil && m.Epoch != nil {
		return *m.Epoch
	}
	return 0
}

type NewEpochResponseProto struct {
	LastSegmentTxId  *uint64 `protobuf:"varint,1,opt,name=lastSegmentTxId" json:"lastSegmentTxId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *NewEpochResponseProto) Reset()                    { *m = NewEpochResponseProto{} }
func (m *NewEpochResponseProto) String() string            { return proto.CompactTextString(m) }
func (*NewEpochResponseProto) ProtoMessage()               {}
func (*NewEpochResponseProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *NewEpochResponseProto) GetLastSegmentTxId() uint64 {
	if m != nil && m.LastSegmentTxId != nil {
		return *m.LastSegmentTxId
	}
	return 0
}

// *
// getEditLogManifest()
type GetEditLogManifestRequestProto struct {
	Jid       *JournalIdProto `protobuf:"bytes,1,req,name=jid" json:"jid,omitempty"`
	SinceTxId *uint64         `protobuf:"varint,2,req,name=sinceTxId" json:"sinceTxId,omitempty"`
	// Whether or not the client will be reading from the returned streams.
	// optional bool forReading = 3 [default = true]; <obsolete, do not reuse>
	InProgressOk     *bool  `protobuf:"varint,4,opt,name=inProgressOk,def=0" json:"inProgressOk,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GetEditLogManifestRequestProto) Reset()                    { *m = GetEditLogManifestRequestProto{} }
func (m *GetEditLogManifestRequestProto) String() string            { return proto.CompactTextString(m) }
func (*GetEditLogManifestRequestProto) ProtoMessage()               {}
func (*GetEditLogManifestRequestProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

const Default_GetEditLogManifestRequestProto_InProgressOk bool = false

func (m *GetEditLogManifestRequestProto) GetJid() *JournalIdProto {
	if m != nil {
		return m.Jid
	}
	return nil
}

func (m *GetEditLogManifestRequestProto) GetSinceTxId() uint64 {
	if m != nil && m.SinceTxId != nil {
		return *m.SinceTxId
	}
	return 0
}

func (m *GetEditLogManifestRequestProto) GetInProgressOk() bool {
	if m != nil && m.InProgressOk != nil {
		return *m.InProgressOk
	}
	return Default_GetEditLogManifestRequestProto_InProgressOk
}

type GetEditLogManifestResponseProto struct {
	Manifest *hproto_hdfs1.RemoteEditLogManifestProto `protobuf:"bytes,1,req,name=manifest" json:"manifest,omitempty"`
	// Deprecated by fromURL
	HttpPort         *uint32 `protobuf:"varint,2,req,name=httpPort" json:"httpPort,omitempty"`
	FromURL          *string `protobuf:"bytes,3,opt,name=fromURL" json:"fromURL,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GetEditLogManifestResponseProto) Reset()         { *m = GetEditLogManifestResponseProto{} }
func (m *GetEditLogManifestResponseProto) String() string { return proto.CompactTextString(m) }
func (*GetEditLogManifestResponseProto) ProtoMessage()    {}
func (*GetEditLogManifestResponseProto) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{37}
}

func (m *GetEditLogManifestResponseProto) GetManifest() *hproto_hdfs1.RemoteEditLogManifestProto {
	if m != nil {
		return m.Manifest
	}
	return nil
}

func (m *GetEditLogManifestResponseProto) GetHttpPort() uint32 {
	if m != nil && m.HttpPort != nil {
		return *m.HttpPort
	}
	return 0
}

func (m *GetEditLogManifestResponseProto) GetFromURL() string {
	if m != nil && m.FromURL != nil {
		return *m.FromURL
	}
	return ""
}

// *
// prepareRecovery()
type PrepareRecoveryRequestProto struct {
	ReqInfo          *RequestInfoProto `protobuf:"bytes,1,req,name=reqInfo" json:"reqInfo,omitempty"`
	SegmentTxId      *uint64           `protobuf:"varint,2,req,name=segmentTxId" json:"segmentTxId,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *PrepareRecoveryRequestProto) Reset()                    { *m = PrepareRecoveryRequestProto{} }
func (m *PrepareRecoveryRequestProto) String() string            { return proto.CompactTextString(m) }
func (*PrepareRecoveryRequestProto) ProtoMessage()               {}
func (*PrepareRecoveryRequestProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *PrepareRecoveryRequestProto) GetReqInfo() *RequestInfoProto {
	if m != nil {
		return m.ReqInfo
	}
	return nil
}

func (m *PrepareRecoveryRequestProto) GetSegmentTxId() uint64 {
	if m != nil && m.SegmentTxId != nil {
		return *m.SegmentTxId
	}
	return 0
}

type PrepareRecoveryResponseProto struct {
	SegmentState    *SegmentStateProto `protobuf:"bytes,1,opt,name=segmentState" json:"segmentState,omitempty"`
	AcceptedInEpoch *uint64            `protobuf:"varint,2,opt,name=acceptedInEpoch" json:"acceptedInEpoch,omitempty"`
	LastWriterEpoch *uint64            `protobuf:"varint,3,req,name=lastWriterEpoch" json:"lastWriterEpoch,omitempty"`
	// The highest committed txid that this logger has ever seen.
	// This may be higher than the data it actually has, in the case
	// that it was lagging before the old writer crashed.
	LastCommittedTxId *uint64 `protobuf:"varint,4,opt,name=lastCommittedTxId" json:"lastCommittedTxId,omitempty"`
	XXX_unrecognized  []byte  `json:"-"`
}

func (m *PrepareRecoveryResponseProto) Reset()                    { *m = PrepareRecoveryResponseProto{} }
func (m *PrepareRecoveryResponseProto) String() string            { return proto.CompactTextString(m) }
func (*PrepareRecoveryResponseProto) ProtoMessage()               {}
func (*PrepareRecoveryResponseProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *PrepareRecoveryResponseProto) GetSegmentState() *SegmentStateProto {
	if m != nil {
		return m.SegmentState
	}
	return nil
}

func (m *PrepareRecoveryResponseProto) GetAcceptedInEpoch() uint64 {
	if m != nil && m.AcceptedInEpoch != nil {
		return *m.AcceptedInEpoch
	}
	return 0
}

func (m *PrepareRecoveryResponseProto) GetLastWriterEpoch() uint64 {
	if m != nil && m.LastWriterEpoch != nil {
		return *m.LastWriterEpoch
	}
	return 0
}

func (m *PrepareRecoveryResponseProto) GetLastCommittedTxId() uint64 {
	if m != nil && m.LastCommittedTxId != nil {
		return *m.LastCommittedTxId
	}
	return 0
}

// *
// acceptRecovery()
type AcceptRecoveryRequestProto struct {
	ReqInfo *RequestInfoProto `protobuf:"bytes,1,req,name=reqInfo" json:"reqInfo,omitempty"`
	// * Details on the segment to recover
	StateToAccept *SegmentStateProto `protobuf:"bytes,2,req,name=stateToAccept" json:"stateToAccept,omitempty"`
	// * The URL from which the log may be copied
	FromURL          *string `protobuf:"bytes,3,req,name=fromURL" json:"fromURL,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AcceptRecoveryRequestProto) Reset()                    { *m = AcceptRecoveryRequestProto{} }
func (m *AcceptRecoveryRequestProto) String() string            { return proto.CompactTextString(m) }
func (*AcceptRecoveryRequestProto) ProtoMessage()               {}
func (*AcceptRecoveryRequestProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *AcceptRecoveryRequestProto) GetReqInfo() *RequestInfoProto {
	if m != nil {
		return m.ReqInfo
	}
	return nil
}

func (m *AcceptRecoveryRequestProto) GetStateToAccept() *SegmentStateProto {
	if m != nil {
		return m.StateToAccept
	}
	return nil
}

func (m *AcceptRecoveryRequestProto) GetFromURL() string {
	if m != nil && m.FromURL != nil {
		return *m.FromURL
	}
	return ""
}

type AcceptRecoveryResponseProto struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *AcceptRecoveryResponseProto) Reset()                    { *m = AcceptRecoveryResponseProto{} }
func (m *AcceptRecoveryResponseProto) String() string            { return proto.CompactTextString(m) }
func (*AcceptRecoveryResponseProto) ProtoMessage()               {}
func (*AcceptRecoveryResponseProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func init() {
	proto.RegisterType((*JournalIdProto)(nil), "hproto.hdfs.qjournal.JournalIdProto")
	proto.RegisterType((*RequestInfoProto)(nil), "hproto.hdfs.qjournal.RequestInfoProto")
	proto.RegisterType((*SegmentStateProto)(nil), "hproto.hdfs.qjournal.SegmentStateProto")
	proto.RegisterType((*PersistedRecoveryPaxosData)(nil), "hproto.hdfs.qjournal.PersistedRecoveryPaxosData")
	proto.RegisterType((*JournalRequestProto)(nil), "hproto.hdfs.qjournal.JournalRequestProto")
	proto.RegisterType((*JournalResponseProto)(nil), "hproto.hdfs.qjournal.JournalResponseProto")
	proto.RegisterType((*HeartbeatRequestProto)(nil), "hproto.hdfs.qjournal.HeartbeatRequestProto")
	proto.RegisterType((*HeartbeatResponseProto)(nil), "hproto.hdfs.qjournal.HeartbeatResponseProto")
	proto.RegisterType((*StartLogSegmentRequestProto)(nil), "hproto.hdfs.qjournal.StartLogSegmentRequestProto")
	proto.RegisterType((*StartLogSegmentResponseProto)(nil), "hproto.hdfs.qjournal.StartLogSegmentResponseProto")
	proto.RegisterType((*FinalizeLogSegmentRequestProto)(nil), "hproto.hdfs.qjournal.FinalizeLogSegmentRequestProto")
	proto.RegisterType((*FinalizeLogSegmentResponseProto)(nil), "hproto.hdfs.qjournal.FinalizeLogSegmentResponseProto")
	proto.RegisterType((*PurgeLogsRequestProto)(nil), "hproto.hdfs.qjournal.PurgeLogsRequestProto")
	proto.RegisterType((*PurgeLogsResponseProto)(nil), "hproto.hdfs.qjournal.PurgeLogsResponseProto")
	proto.RegisterType((*IsFormattedRequestProto)(nil), "hproto.hdfs.qjournal.IsFormattedRequestProto")
	proto.RegisterType((*IsFormattedResponseProto)(nil), "hproto.hdfs.qjournal.IsFormattedResponseProto")
	proto.RegisterType((*GetJournalCTimeRequestProto)(nil), "hproto.hdfs.qjournal.GetJournalCTimeRequestProto")
	proto.RegisterType((*GetJournalCTimeResponseProto)(nil), "hproto.hdfs.qjournal.GetJournalCTimeResponseProto")
	proto.RegisterType((*DoPreUpgradeRequestProto)(nil), "hproto.hdfs.qjournal.DoPreUpgradeRequestProto")
	proto.RegisterType((*DoPreUpgradeResponseProto)(nil), "hproto.hdfs.qjournal.DoPreUpgradeResponseProto")
	proto.RegisterType((*DoUpgradeRequestProto)(nil), "hproto.hdfs.qjournal.DoUpgradeRequestProto")
	proto.RegisterType((*DoUpgradeResponseProto)(nil), "hproto.hdfs.qjournal.DoUpgradeResponseProto")
	proto.RegisterType((*DoFinalizeRequestProto)(nil), "hproto.hdfs.qjournal.DoFinalizeRequestProto")
	proto.RegisterType((*DoFinalizeResponseProto)(nil), "hproto.hdfs.qjournal.DoFinalizeResponseProto")
	proto.RegisterType((*CanRollBackRequestProto)(nil), "hproto.hdfs.qjournal.CanRollBackRequestProto")
	proto.RegisterType((*CanRollBackResponseProto)(nil), "hproto.hdfs.qjournal.CanRollBackResponseProto")
	proto.RegisterType((*DoRollbackRequestProto)(nil), "hproto.hdfs.qjournal.DoRollbackRequestProto")
	proto.RegisterType((*DoRollbackResponseProto)(nil), "hproto.hdfs.qjournal.DoRollbackResponseProto")
	proto.RegisterType((*DiscardSegmentsRequestProto)(nil), "hproto.hdfs.qjournal.DiscardSegmentsRequestProto")
	proto.RegisterType((*DiscardSegmentsResponseProto)(nil), "hproto.hdfs.qjournal.DiscardSegmentsResponseProto")
	proto.RegisterType((*GetJournalStateRequestProto)(nil), "hproto.hdfs.qjournal.GetJournalStateRequestProto")
	proto.RegisterType((*GetJournalStateResponseProto)(nil), "hproto.hdfs.qjournal.GetJournalStateResponseProto")
	proto.RegisterType((*FormatRequestProto)(nil), "hproto.hdfs.qjournal.FormatRequestProto")
	proto.RegisterType((*FormatResponseProto)(nil), "hproto.hdfs.qjournal.FormatResponseProto")
	proto.RegisterType((*NewEpochRequestProto)(nil), "hproto.hdfs.qjournal.NewEpochRequestProto")
	proto.RegisterType((*NewEpochResponseProto)(nil), "hproto.hdfs.qjournal.NewEpochResponseProto")
	proto.RegisterType((*GetEditLogManifestRequestProto)(nil), "hproto.hdfs.qjournal.GetEditLogManifestRequestProto")
	proto.RegisterType((*GetEditLogManifestResponseProto)(nil), "hproto.hdfs.qjournal.GetEditLogManifestResponseProto")
	proto.RegisterType((*PrepareRecoveryRequestProto)(nil), "hproto.hdfs.qjournal.PrepareRecoveryRequestProto")
	proto.RegisterType((*PrepareRecoveryResponseProto)(nil), "hproto.hdfs.qjournal.PrepareRecoveryResponseProto")
	proto.RegisterType((*AcceptRecoveryRequestProto)(nil), "hproto.hdfs.qjournal.AcceptRecoveryRequestProto")
	proto.RegisterType((*AcceptRecoveryResponseProto)(nil), "hproto.hdfs.qjournal.AcceptRecoveryResponseProto")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for QJournalProtocolService service

type QJournalProtocolServiceClient interface {
	IsFormatted(ctx context.Context, in *IsFormattedRequestProto, opts ...grpc.CallOption) (*IsFormattedResponseProto, error)
	GetJournalCTime(ctx context.Context, in *GetJournalCTimeRequestProto, opts ...grpc.CallOption) (*GetJournalCTimeResponseProto, error)
	DoPreUpgrade(ctx context.Context, in *DoPreUpgradeRequestProto, opts ...grpc.CallOption) (*DoPreUpgradeResponseProto, error)
	DoUpgrade(ctx context.Context, in *DoUpgradeRequestProto, opts ...grpc.CallOption) (*DoUpgradeResponseProto, error)
	DoFinalize(ctx context.Context, in *DoFinalizeRequestProto, opts ...grpc.CallOption) (*DoFinalizeResponseProto, error)
	CanRollBack(ctx context.Context, in *CanRollBackRequestProto, opts ...grpc.CallOption) (*CanRollBackResponseProto, error)
	DoRollback(ctx context.Context, in *DoRollbackRequestProto, opts ...grpc.CallOption) (*DoRollbackResponseProto, error)
	DiscardSegments(ctx context.Context, in *DiscardSegmentsRequestProto, opts ...grpc.CallOption) (*DiscardSegmentsResponseProto, error)
	GetJournalState(ctx context.Context, in *GetJournalStateRequestProto, opts ...grpc.CallOption) (*GetJournalStateResponseProto, error)
	NewEpoch(ctx context.Context, in *NewEpochRequestProto, opts ...grpc.CallOption) (*NewEpochResponseProto, error)
	Format(ctx context.Context, in *FormatRequestProto, opts ...grpc.CallOption) (*FormatResponseProto, error)
	Journal(ctx context.Context, in *JournalRequestProto, opts ...grpc.CallOption) (*JournalResponseProto, error)
	Heartbeat(ctx context.Context, in *HeartbeatRequestProto, opts ...grpc.CallOption) (*HeartbeatResponseProto, error)
	StartLogSegment(ctx context.Context, in *StartLogSegmentRequestProto, opts ...grpc.CallOption) (*StartLogSegmentResponseProto, error)
	FinalizeLogSegment(ctx context.Context, in *FinalizeLogSegmentRequestProto, opts ...grpc.CallOption) (*FinalizeLogSegmentResponseProto, error)
	PurgeLogs(ctx context.Context, in *PurgeLogsRequestProto, opts ...grpc.CallOption) (*PurgeLogsResponseProto, error)
	GetEditLogManifest(ctx context.Context, in *GetEditLogManifestRequestProto, opts ...grpc.CallOption) (*GetEditLogManifestResponseProto, error)
	PrepareRecovery(ctx context.Context, in *PrepareRecoveryRequestProto, opts ...grpc.CallOption) (*PrepareRecoveryResponseProto, error)
	AcceptRecovery(ctx context.Context, in *AcceptRecoveryRequestProto, opts ...grpc.CallOption) (*AcceptRecoveryResponseProto, error)
}

type qJournalProtocolServiceClient struct {
	cc *grpc.ClientConn
}

func NewQJournalProtocolServiceClient(cc *grpc.ClientConn) QJournalProtocolServiceClient {
	return &qJournalProtocolServiceClient{cc}
}

func (c *qJournalProtocolServiceClient) IsFormatted(ctx context.Context, in *IsFormattedRequestProto, opts ...grpc.CallOption) (*IsFormattedResponseProto, error) {
	out := new(IsFormattedResponseProto)
	err := grpc.Invoke(ctx, "/hproto.hdfs.qjournal.QJournalProtocolService/isFormatted", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qJournalProtocolServiceClient) GetJournalCTime(ctx context.Context, in *GetJournalCTimeRequestProto, opts ...grpc.CallOption) (*GetJournalCTimeResponseProto, error) {
	out := new(GetJournalCTimeResponseProto)
	err := grpc.Invoke(ctx, "/hproto.hdfs.qjournal.QJournalProtocolService/getJournalCTime", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qJournalProtocolServiceClient) DoPreUpgrade(ctx context.Context, in *DoPreUpgradeRequestProto, opts ...grpc.CallOption) (*DoPreUpgradeResponseProto, error) {
	out := new(DoPreUpgradeResponseProto)
	err := grpc.Invoke(ctx, "/hproto.hdfs.qjournal.QJournalProtocolService/doPreUpgrade", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qJournalProtocolServiceClient) DoUpgrade(ctx context.Context, in *DoUpgradeRequestProto, opts ...grpc.CallOption) (*DoUpgradeResponseProto, error) {
	out := new(DoUpgradeResponseProto)
	err := grpc.Invoke(ctx, "/hproto.hdfs.qjournal.QJournalProtocolService/doUpgrade", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qJournalProtocolServiceClient) DoFinalize(ctx context.Context, in *DoFinalizeRequestProto, opts ...grpc.CallOption) (*DoFinalizeResponseProto, error) {
	out := new(DoFinalizeResponseProto)
	err := grpc.Invoke(ctx, "/hproto.hdfs.qjournal.QJournalProtocolService/doFinalize", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qJournalProtocolServiceClient) CanRollBack(ctx context.Context, in *CanRollBackRequestProto, opts ...grpc.CallOption) (*CanRollBackResponseProto, error) {
	out := new(CanRollBackResponseProto)
	err := grpc.Invoke(ctx, "/hproto.hdfs.qjournal.QJournalProtocolService/canRollBack", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qJournalProtocolServiceClient) DoRollback(ctx context.Context, in *DoRollbackRequestProto, opts ...grpc.CallOption) (*DoRollbackResponseProto, error) {
	out := new(DoRollbackResponseProto)
	err := grpc.Invoke(ctx, "/hproto.hdfs.qjournal.QJournalProtocolService/doRollback", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qJournalProtocolServiceClient) DiscardSegments(ctx context.Context, in *DiscardSegmentsRequestProto, opts ...grpc.CallOption) (*DiscardSegmentsResponseProto, error) {
	out := new(DiscardSegmentsResponseProto)
	err := grpc.Invoke(ctx, "/hproto.hdfs.qjournal.QJournalProtocolService/discardSegments", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qJournalProtocolServiceClient) GetJournalState(ctx context.Context, in *GetJournalStateRequestProto, opts ...grpc.CallOption) (*GetJournalStateResponseProto, error) {
	out := new(GetJournalStateResponseProto)
	err := grpc.Invoke(ctx, "/hproto.hdfs.qjournal.QJournalProtocolService/getJournalState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qJournalProtocolServiceClient) NewEpoch(ctx context.Context, in *NewEpochRequestProto, opts ...grpc.CallOption) (*NewEpochResponseProto, error) {
	out := new(NewEpochResponseProto)
	err := grpc.Invoke(ctx, "/hproto.hdfs.qjournal.QJournalProtocolService/newEpoch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qJournalProtocolServiceClient) Format(ctx context.Context, in *FormatRequestProto, opts ...grpc.CallOption) (*FormatResponseProto, error) {
	out := new(FormatResponseProto)
	err := grpc.Invoke(ctx, "/hproto.hdfs.qjournal.QJournalProtocolService/format", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qJournalProtocolServiceClient) Journal(ctx context.Context, in *JournalRequestProto, opts ...grpc.CallOption) (*JournalResponseProto, error) {
	out := new(JournalResponseProto)
	err := grpc.Invoke(ctx, "/hproto.hdfs.qjournal.QJournalProtocolService/journal", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qJournalProtocolServiceClient) Heartbeat(ctx context.Context, in *HeartbeatRequestProto, opts ...grpc.CallOption) (*HeartbeatResponseProto, error) {
	out := new(HeartbeatResponseProto)
	err := grpc.Invoke(ctx, "/hproto.hdfs.qjournal.QJournalProtocolService/heartbeat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qJournalProtocolServiceClient) StartLogSegment(ctx context.Context, in *StartLogSegmentRequestProto, opts ...grpc.CallOption) (*StartLogSegmentResponseProto, error) {
	out := new(StartLogSegmentResponseProto)
	err := grpc.Invoke(ctx, "/hproto.hdfs.qjournal.QJournalProtocolService/startLogSegment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qJournalProtocolServiceClient) FinalizeLogSegment(ctx context.Context, in *FinalizeLogSegmentRequestProto, opts ...grpc.CallOption) (*FinalizeLogSegmentResponseProto, error) {
	out := new(FinalizeLogSegmentResponseProto)
	err := grpc.Invoke(ctx, "/hproto.hdfs.qjournal.QJournalProtocolService/finalizeLogSegment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qJournalProtocolServiceClient) PurgeLogs(ctx context.Context, in *PurgeLogsRequestProto, opts ...grpc.CallOption) (*PurgeLogsResponseProto, error) {
	out := new(PurgeLogsResponseProto)
	err := grpc.Invoke(ctx, "/hproto.hdfs.qjournal.QJournalProtocolService/purgeLogs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qJournalProtocolServiceClient) GetEditLogManifest(ctx context.Context, in *GetEditLogManifestRequestProto, opts ...grpc.CallOption) (*GetEditLogManifestResponseProto, error) {
	out := new(GetEditLogManifestResponseProto)
	err := grpc.Invoke(ctx, "/hproto.hdfs.qjournal.QJournalProtocolService/getEditLogManifest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qJournalProtocolServiceClient) PrepareRecovery(ctx context.Context, in *PrepareRecoveryRequestProto, opts ...grpc.CallOption) (*PrepareRecoveryResponseProto, error) {
	out := new(PrepareRecoveryResponseProto)
	err := grpc.Invoke(ctx, "/hproto.hdfs.qjournal.QJournalProtocolService/prepareRecovery", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qJournalProtocolServiceClient) AcceptRecovery(ctx context.Context, in *AcceptRecoveryRequestProto, opts ...grpc.CallOption) (*AcceptRecoveryResponseProto, error) {
	out := new(AcceptRecoveryResponseProto)
	err := grpc.Invoke(ctx, "/hproto.hdfs.qjournal.QJournalProtocolService/acceptRecovery", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for QJournalProtocolService service

type QJournalProtocolServiceServer interface {
	IsFormatted(context.Context, *IsFormattedRequestProto) (*IsFormattedResponseProto, error)
	GetJournalCTime(context.Context, *GetJournalCTimeRequestProto) (*GetJournalCTimeResponseProto, error)
	DoPreUpgrade(context.Context, *DoPreUpgradeRequestProto) (*DoPreUpgradeResponseProto, error)
	DoUpgrade(context.Context, *DoUpgradeRequestProto) (*DoUpgradeResponseProto, error)
	DoFinalize(context.Context, *DoFinalizeRequestProto) (*DoFinalizeResponseProto, error)
	CanRollBack(context.Context, *CanRollBackRequestProto) (*CanRollBackResponseProto, error)
	DoRollback(context.Context, *DoRollbackRequestProto) (*DoRollbackResponseProto, error)
	DiscardSegments(context.Context, *DiscardSegmentsRequestProto) (*DiscardSegmentsResponseProto, error)
	GetJournalState(context.Context, *GetJournalStateRequestProto) (*GetJournalStateResponseProto, error)
	NewEpoch(context.Context, *NewEpochRequestProto) (*NewEpochResponseProto, error)
	Format(context.Context, *FormatRequestProto) (*FormatResponseProto, error)
	Journal(context.Context, *JournalRequestProto) (*JournalResponseProto, error)
	Heartbeat(context.Context, *HeartbeatRequestProto) (*HeartbeatResponseProto, error)
	StartLogSegment(context.Context, *StartLogSegmentRequestProto) (*StartLogSegmentResponseProto, error)
	FinalizeLogSegment(context.Context, *FinalizeLogSegmentRequestProto) (*FinalizeLogSegmentResponseProto, error)
	PurgeLogs(context.Context, *PurgeLogsRequestProto) (*PurgeLogsResponseProto, error)
	GetEditLogManifest(context.Context, *GetEditLogManifestRequestProto) (*GetEditLogManifestResponseProto, error)
	PrepareRecovery(context.Context, *PrepareRecoveryRequestProto) (*PrepareRecoveryResponseProto, error)
	AcceptRecovery(context.Context, *AcceptRecoveryRequestProto) (*AcceptRecoveryResponseProto, error)
}

func RegisterQJournalProtocolServiceServer(s *grpc.Server, srv QJournalProtocolServiceServer) {
	s.RegisterService(&_QJournalProtocolService_serviceDesc, srv)
}

func _QJournalProtocolService_IsFormatted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsFormattedRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QJournalProtocolServiceServer).IsFormatted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.hdfs.qjournal.QJournalProtocolService/IsFormatted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QJournalProtocolServiceServer).IsFormatted(ctx, req.(*IsFormattedRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _QJournalProtocolService_GetJournalCTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJournalCTimeRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QJournalProtocolServiceServer).GetJournalCTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.hdfs.qjournal.QJournalProtocolService/GetJournalCTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QJournalProtocolServiceServer).GetJournalCTime(ctx, req.(*GetJournalCTimeRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _QJournalProtocolService_DoPreUpgrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoPreUpgradeRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QJournalProtocolServiceServer).DoPreUpgrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.hdfs.qjournal.QJournalProtocolService/DoPreUpgrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QJournalProtocolServiceServer).DoPreUpgrade(ctx, req.(*DoPreUpgradeRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _QJournalProtocolService_DoUpgrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoUpgradeRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QJournalProtocolServiceServer).DoUpgrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.hdfs.qjournal.QJournalProtocolService/DoUpgrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QJournalProtocolServiceServer).DoUpgrade(ctx, req.(*DoUpgradeRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _QJournalProtocolService_DoFinalize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoFinalizeRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QJournalProtocolServiceServer).DoFinalize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.hdfs.qjournal.QJournalProtocolService/DoFinalize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QJournalProtocolServiceServer).DoFinalize(ctx, req.(*DoFinalizeRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _QJournalProtocolService_CanRollBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanRollBackRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QJournalProtocolServiceServer).CanRollBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.hdfs.qjournal.QJournalProtocolService/CanRollBack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QJournalProtocolServiceServer).CanRollBack(ctx, req.(*CanRollBackRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _QJournalProtocolService_DoRollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoRollbackRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QJournalProtocolServiceServer).DoRollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.hdfs.qjournal.QJournalProtocolService/DoRollback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QJournalProtocolServiceServer).DoRollback(ctx, req.(*DoRollbackRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _QJournalProtocolService_DiscardSegments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscardSegmentsRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QJournalProtocolServiceServer).DiscardSegments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.hdfs.qjournal.QJournalProtocolService/DiscardSegments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QJournalProtocolServiceServer).DiscardSegments(ctx, req.(*DiscardSegmentsRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _QJournalProtocolService_GetJournalState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJournalStateRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QJournalProtocolServiceServer).GetJournalState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.hdfs.qjournal.QJournalProtocolService/GetJournalState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QJournalProtocolServiceServer).GetJournalState(ctx, req.(*GetJournalStateRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _QJournalProtocolService_NewEpoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewEpochRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QJournalProtocolServiceServer).NewEpoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.hdfs.qjournal.QJournalProtocolService/NewEpoch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QJournalProtocolServiceServer).NewEpoch(ctx, req.(*NewEpochRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _QJournalProtocolService_Format_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FormatRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QJournalProtocolServiceServer).Format(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.hdfs.qjournal.QJournalProtocolService/Format",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QJournalProtocolServiceServer).Format(ctx, req.(*FormatRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _QJournalProtocolService_Journal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JournalRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QJournalProtocolServiceServer).Journal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.hdfs.qjournal.QJournalProtocolService/Journal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QJournalProtocolServiceServer).Journal(ctx, req.(*JournalRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _QJournalProtocolService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QJournalProtocolServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.hdfs.qjournal.QJournalProtocolService/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QJournalProtocolServiceServer).Heartbeat(ctx, req.(*HeartbeatRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _QJournalProtocolService_StartLogSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartLogSegmentRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QJournalProtocolServiceServer).StartLogSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.hdfs.qjournal.QJournalProtocolService/StartLogSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QJournalProtocolServiceServer).StartLogSegment(ctx, req.(*StartLogSegmentRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _QJournalProtocolService_FinalizeLogSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizeLogSegmentRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QJournalProtocolServiceServer).FinalizeLogSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.hdfs.qjournal.QJournalProtocolService/FinalizeLogSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QJournalProtocolServiceServer).FinalizeLogSegment(ctx, req.(*FinalizeLogSegmentRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _QJournalProtocolService_PurgeLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgeLogsRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QJournalProtocolServiceServer).PurgeLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.hdfs.qjournal.QJournalProtocolService/PurgeLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QJournalProtocolServiceServer).PurgeLogs(ctx, req.(*PurgeLogsRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _QJournalProtocolService_GetEditLogManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEditLogManifestRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QJournalProtocolServiceServer).GetEditLogManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.hdfs.qjournal.QJournalProtocolService/GetEditLogManifest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QJournalProtocolServiceServer).GetEditLogManifest(ctx, req.(*GetEditLogManifestRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _QJournalProtocolService_PrepareRecovery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareRecoveryRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QJournalProtocolServiceServer).PrepareRecovery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.hdfs.qjournal.QJournalProtocolService/PrepareRecovery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QJournalProtocolServiceServer).PrepareRecovery(ctx, req.(*PrepareRecoveryRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _QJournalProtocolService_AcceptRecovery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptRecoveryRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QJournalProtocolServiceServer).AcceptRecovery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.hdfs.qjournal.QJournalProtocolService/AcceptRecovery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QJournalProtocolServiceServer).AcceptRecovery(ctx, req.(*AcceptRecoveryRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

var _QJournalProtocolService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hproto.hdfs.qjournal.QJournalProtocolService",
	HandlerType: (*QJournalProtocolServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "isFormatted",
			Handler:    _QJournalProtocolService_IsFormatted_Handler,
		},
		{
			MethodName: "getJournalCTime",
			Handler:    _QJournalProtocolService_GetJournalCTime_Handler,
		},
		{
			MethodName: "doPreUpgrade",
			Handler:    _QJournalProtocolService_DoPreUpgrade_Handler,
		},
		{
			MethodName: "doUpgrade",
			Handler:    _QJournalProtocolService_DoUpgrade_Handler,
		},
		{
			MethodName: "doFinalize",
			Handler:    _QJournalProtocolService_DoFinalize_Handler,
		},
		{
			MethodName: "canRollBack",
			Handler:    _QJournalProtocolService_CanRollBack_Handler,
		},
		{
			MethodName: "doRollback",
			Handler:    _QJournalProtocolService_DoRollback_Handler,
		},
		{
			MethodName: "discardSegments",
			Handler:    _QJournalProtocolService_DiscardSegments_Handler,
		},
		{
			MethodName: "getJournalState",
			Handler:    _QJournalProtocolService_GetJournalState_Handler,
		},
		{
			MethodName: "newEpoch",
			Handler:    _QJournalProtocolService_NewEpoch_Handler,
		},
		{
			MethodName: "format",
			Handler:    _QJournalProtocolService_Format_Handler,
		},
		{
			MethodName: "journal",
			Handler:    _QJournalProtocolService_Journal_Handler,
		},
		{
			MethodName: "heartbeat",
			Handler:    _QJournalProtocolService_Heartbeat_Handler,
		},
		{
			MethodName: "startLogSegment",
			Handler:    _QJournalProtocolService_StartLogSegment_Handler,
		},
		{
			MethodName: "finalizeLogSegment",
			Handler:    _QJournalProtocolService_FinalizeLogSegment_Handler,
		},
		{
			MethodName: "purgeLogs",
			Handler:    _QJournalProtocolService_PurgeLogs_Handler,
		},
		{
			MethodName: "getEditLogManifest",
			Handler:    _QJournalProtocolService_GetEditLogManifest_Handler,
		},
		{
			MethodName: "prepareRecovery",
			Handler:    _QJournalProtocolService_PrepareRecovery_Handler,
		},
		{
			MethodName: "acceptRecovery",
			Handler:    _QJournalProtocolService_AcceptRecovery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() {
	proto.RegisterFile("gopkg.in/freddierice/go-hproto.v1/hdfs/qjournal/QJournalProtocol.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 1543 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xc4, 0x58, 0x5b, 0x6f, 0xdc, 0xc4,
	0x17, 0x97, 0x93, 0xa6, 0x49, 0x4e, 0x93, 0x5e, 0xa6, 0x49, 0x93, 0x6e, 0x7a, 0xfb, 0x5b, 0xd5,
	0x9f, 0xf4, 0xb6, 0x69, 0xca, 0xa5, 0x12, 0x42, 0xa2, 0x4d, 0xd2, 0xd2, 0xd0, 0x0b, 0xa9, 0x93,
	0x82, 0x78, 0x40, 0xc2, 0xb5, 0x67, 0x37, 0xd3, 0xee, 0x7a, 0x5c, 0x8f, 0x37, 0xa4, 0xbc, 0x20,
	0x10, 0x48, 0xbc, 0xf3, 0x04, 0x02, 0x09, 0xbe, 0x07, 0xef, 0x3c, 0xf2, 0x49, 0xf8, 0x04, 0x08,
	0x89, 0x99, 0xb1, 0x9d, 0x9d, 0xf1, 0xce, 0x78, 0x17, 0xe4, 0x8a, 0x97, 0x64, 0x7d, 0xe6, 0x5c,
	0x7e, 0xe7, 0x32, 0xe3, 0x9f, 0x07, 0xee, 0xb6, 0x69, 0xfc, 0xbc, 0xdd, 0x24, 0xd1, 0x4a, 0x2b,
	0xc1, 0x61, 0x48, 0x70, 0x42, 0x02, 0xbc, 0xd2, 0xa6, 0xd7, 0x76, 0xe3, 0x84, 0xa6, 0xb4, 0xb9,
	0xb7, 0xba, 0xb2, 0x1b, 0xb6, 0xd8, 0xca, 0x8b, 0x67, 0xb4, 0x97, 0x44, 0x7e, 0x67, 0xe5, 0xf1,
	0xfb, 0xd9, 0x8f, 0x2d, 0xb1, 0x1c, 0xd0, 0x4e, 0x53, 0xea, 0xa1, 0xb9, 0x5c, 0x5f, 0x28, 0x37,
	0x0b, 0xe5, 0xc6, 0xea, 0x88, 0xde, 0xa5, 0x95, 0x14, 0x35, 0x6e, 0x8e, 0x68, 0x72, 0x8f, 0xff,
	0xd9, 0xc6, 0xc9, 0x1e, 0x4e, 0x32, 0x43, 0xf7, 0x3a, 0x1c, 0xcd, 0xa1, 0x6d, 0x86, 0x12, 0x1c,
	0x3a, 0x07, 0x40, 0x42, 0x1c, 0xa5, 0xa4, 0xc5, 0xbd, 0x2c, 0x3a, 0x17, 0xc6, 0x96, 0xa7, 0x3d,
	0x45, 0xe2, 0xfe, 0xea, 0xc0, 0x71, 0x0f, 0xbf, 0xe8, 0x61, 0x96, 0x6e, 0x46, 0x2d, 0x9a, 0x19,
	0xad, 0xc1, 0xf4, 0xb3, 0xc2, 0x8d, 0xb4, 0x39, 0x72, 0xe3, 0x62, 0xd3, 0x94, 0x5c, 0x53, 0x8f,
	0xe6, 0xf5, 0xcd, 0xd0, 0x1c, 0x4c, 0xe0, 0x98, 0x06, 0xbb, 0x8b, 0x63, 0xdc, 0xfe, 0x90, 0x97,
	0x3d, 0xa0, 0x65, 0x38, 0x46, 0xe2, 0x80, 0x63, 0x26, 0x7e, 0xe7, 0x51, 0xaf, 0xfb, 0x94, 0x63,
	0x1a, 0x97, 0xeb, 0x65, 0x31, 0xba, 0x08, 0xb3, 0x01, 0xed, 0x76, 0x49, 0x9a, 0xe2, 0x70, 0x67,
	0x9f, 0xe3, 0x38, 0x74, 0xc1, 0xe1, 0x7a, 0xba, 0xd0, 0xa5, 0x70, 0x62, 0x1b, 0xb7, 0xbb, 0x3c,
	0x9d, 0xed, 0xd4, 0x4f, 0x71, 0x06, 0xff, 0x0c, 0x4c, 0xb3, 0xd4, 0x4f, 0x52, 0x69, 0xe6, 0x48,
	0xf7, 0x7d, 0x01, 0x5a, 0x84, 0x49, 0x1c, 0x65, 0x2e, 0x33, 0x68, 0xc5, 0x23, 0x72, 0x61, 0x86,
	0xb0, 0xcd, 0x88, 0x3b, 0x69, 0x27, 0x98, 0x31, 0x89, 0x6c, 0xca, 0xd3, 0x64, 0xee, 0x77, 0x0e,
	0x34, 0xb6, 0x70, 0xc2, 0x08, 0xe3, 0x10, 0x3c, 0x1c, 0x50, 0x5e, 0xfc, 0x97, 0x5b, 0xfe, 0x3e,
	0x65, 0x1b, 0x7e, 0xea, 0xa3, 0xfb, 0x30, 0xc3, 0x14, 0x3c, 0x79, 0xf1, 0x5e, 0x33, 0x17, 0x6f,
	0x00, 0xb9, 0xa7, 0x19, 0x8b, 0x62, 0xf9, 0x41, 0x80, 0x63, 0x1e, 0x69, 0x33, 0xba, 0xa3, 0x14,
	0xb3, 0x2c, 0x76, 0x7f, 0x77, 0xe0, 0x64, 0xde, 0x8a, 0xbc, 0x99, 0x59, 0x25, 0x6e, 0xc1, 0x64,
	0x82, 0x5f, 0x88, 0xc6, 0xe6, 0x48, 0xfe, 0x6f, 0x46, 0x52, 0x9e, 0x00, 0xaf, 0x30, 0x13, 0xf3,
	0xd3, 0x22, 0x09, 0xe3, 0xa5, 0x8b, 0x0e, 0x0a, 0xa6, 0x48, 0x44, 0x35, 0xa3, 0x5e, 0x97, 0xff,
	0xce, 0xca, 0x35, 0xeb, 0x15, 0x8f, 0x62, 0x25, 0xe1, 0xf5, 0x49, 0x42, 0xc6, 0x5b, 0x37, 0xb6,
	0x3c, 0xe3, 0x15, 0x8f, 0xa2, 0xce, 0x79, 0x9e, 0x99, 0xd7, 0x09, 0xe9, 0x55, 0x93, 0xb9, 0xa7,
	0x60, 0xee, 0x20, 0x21, 0x16, 0xd3, 0x88, 0x65, 0x15, 0x72, 0x3f, 0x86, 0xf9, 0x7b, 0x98, 0xb7,
	0xf2, 0x29, 0xf6, 0xd3, 0x7a, 0x53, 0x75, 0x17, 0xe1, 0x94, 0xe2, 0x5a, 0x0d, 0xfa, 0xbd, 0x03,
	0x4b, 0xdb, 0x62, 0x80, 0x1e, 0xd0, 0x76, 0xde, 0xb4, 0x9a, 0xcb, 0x8c, 0xe0, 0x50, 0xba, 0x4f,
	0x8a, 0x02, 0xcb, 0xdf, 0x62, 0x07, 0x74, 0xfc, 0x97, 0xb4, 0x97, 0x7e, 0x28, 0xe6, 0x8d, 0x46,
	0xbc, 0xc0, 0xce, 0xf2, 0x09, 0x4f, 0x17, 0xba, 0xe7, 0xe0, 0xcc, 0x00, 0x34, 0x15, 0xfb, 0x0f,
	0x0e, 0x9c, 0xbb, 0x4b, 0x78, 0x74, 0xf2, 0x39, 0x7e, 0x65, 0xf0, 0xb5, 0x1d, 0x37, 0x56, 0xb1,
	0xe3, 0xc6, 0xb5, 0x1d, 0xe7, 0xfe, 0x0f, 0xce, 0x9b, 0xb0, 0xa9, 0xf8, 0xbf, 0x80, 0xf9, 0xad,
	0x5e, 0xd2, 0x16, 0xeb, 0xac, 0x66, 0xd4, 0xbc, 0xc0, 0x5d, 0x12, 0x09, 0x20, 0x3b, 0xf4, 0x3e,
	0xc6, 0x71, 0x8e, 0x5c, 0x17, 0x8a, 0xb1, 0x50, 0x00, 0xa8, 0xd0, 0x1e, 0xc3, 0xc2, 0x26, 0xbb,
	0x4b, 0x93, 0xae, 0x9f, 0xca, 0xc3, 0x40, 0x01, 0xf7, 0x16, 0x8c, 0x3f, 0x23, 0xff, 0xec, 0xec,
	0x14, 0x06, 0xee, 0x3b, 0xb0, 0xa8, 0xb9, 0x54, 0xc2, 0xa1, 0x0b, 0x70, 0x84, 0xf4, 0xd7, 0xa4,
	0xef, 0x29, 0x4f, 0x15, 0xb9, 0x4f, 0x60, 0xe9, 0x3d, 0x9c, 0xe6, 0x7e, 0xd7, 0x77, 0x48, 0x17,
	0xd7, 0x02, 0xea, 0x16, 0x9c, 0x19, 0x70, 0x5b, 0x02, 0xc6, 0xcf, 0xc6, 0x5e, 0x27, 0x95, 0x6b,
	0xd2, 0xff, 0xb8, 0xa7, 0x8a, 0x5c, 0x0f, 0x16, 0x37, 0x78, 0xf5, 0xf1, 0x93, 0xb8, 0x9d, 0xf8,
	0x61, 0x3d, 0xa8, 0x96, 0xe0, 0xb4, 0xee, 0x53, 0x6d, 0xcd, 0xd7, 0x0e, 0xcc, 0x6f, 0xd0, 0x1a,
	0xc3, 0xa1, 0xd7, 0x61, 0x82, 0xc9, 0x61, 0x1b, 0x93, 0x96, 0x67, 0x35, 0xcb, 0xed, 0x94, 0x26,
	0x7e, 0x1b, 0xf7, 0x67, 0x2c, 0xd3, 0x15, 0xb3, 0xa3, 0xa0, 0x50, 0x01, 0x6e, 0x89, 0x95, 0x62,
	0xf6, 0x6b, 0xa9, 0xc7, 0x69, 0x58, 0x50, 0x3d, 0xaa, 0xc1, 0xfe, 0x72, 0x60, 0x61, 0xdd, 0x8f,
	0x3c, 0xda, 0xe9, 0xac, 0xf9, 0xc1, 0xf3, 0x5a, 0xea, 0x71, 0x13, 0x26, 0x59, 0x96, 0xf5, 0x68,
	0x15, 0x29, 0xb4, 0xd1, 0xbb, 0x70, 0x24, 0x4e, 0xf0, 0x5e, 0xae, 0x20, 0x4f, 0x84, 0xa1, 0xc6,
	0xaa, 0x05, 0xba, 0x0e, 0x27, 0xf9, 0xd1, 0xd2, 0xc6, 0xe9, 0x03, 0xed, 0x74, 0x14, 0x2f, 0x99,
	0x09, 0xcf, 0xb4, 0x24, 0x76, 0x95, 0x96, 0x7e, 0x69, 0x78, 0x83, 0xfe, 0x5a, 0xb1, 0xab, 0x14,
	0x51, 0xd6, 0x2a, 0xf1, 0xf4, 0xb4, 0xa6, 0xda, 0x65, 0xad, 0xea, 0x7b, 0x54, 0x5b, 0xc5, 0x60,
	0x69, 0x83, 0xb0, 0xc0, 0x4f, 0xc2, 0xfc, 0x34, 0x64, 0xb5, 0x74, 0xab, 0xf2, 0x80, 0x16, 0xef,
	0x90, 0x81, 0xa0, 0x2a, 0x28, 0xed, 0x5c, 0x91, 0xdc, 0xa4, 0x96, 0x32, 0x7c, 0xe5, 0xa8, 0x07,
	0x4b, 0xee, 0x57, 0xed, 0xcd, 0x55, 0x38, 0xd1, 0xf1, 0x65, 0x94, 0x2e, 0x61, 0x38, 0xcc, 0x28,
	0x50, 0x46, 0xe8, 0x06, 0x17, 0x50, 0x03, 0xa6, 0x76, 0xd3, 0x34, 0xde, 0xa2, 0x49, 0x2a, 0x53,
	0x9c, 0xf5, 0x0e, 0x9e, 0xc5, 0x2b, 0xa8, 0xc5, 0x95, 0x9f, 0x78, 0x0f, 0xe4, 0x5b, 0x74, 0xda,
	0x2b, 0x1e, 0xdd, 0x6f, 0x1c, 0x40, 0xd9, 0x09, 0x5a, 0xd3, 0xb6, 0x38, 0x1c, 0xa9, 0xe7, 0xc4,
	0x79, 0xcd, 0xf4, 0x91, 0xdf, 0xe5, 0x09, 0xfa, 0x81, 0x32, 0xda, 0xb9, 0xba, 0x3b, 0x0f, 0x27,
	0x0b, 0x18, 0x6a, 0xe9, 0x7f, 0x72, 0x60, 0xee, 0x11, 0xfe, 0x4c, 0x66, 0xf8, 0x9f, 0x02, 0xec,
	0x13, 0xfa, 0x71, 0x85, 0xd0, 0xbb, 0xb7, 0x61, 0xbe, 0x0f, 0x4f, 0xed, 0x1d, 0x27, 0xaf, 0xa2,
	0x45, 0xdb, 0x05, 0xa9, 0x93, 0x54, 0x5c, 0x30, 0xf8, 0xb2, 0xd8, 0xfd, 0x85, 0x33, 0x14, 0x3e,
	0x06, 0x77, 0x42, 0x22, 0x48, 0xcc, 0x43, 0x3f, 0x22, 0x2d, 0x9e, 0x65, 0x6d, 0x63, 0x4f, 0xa2,
	0x00, 0x6b, 0x63, 0x5f, 0x08, 0xd0, 0x25, 0xce, 0xf7, 0x0f, 0x98, 0xfd, 0x07, 0xcf, 0xe5, 0x17,
	0xc6, 0xd4, 0xdb, 0x13, 0x2d, 0xbf, 0xc3, 0xb0, 0xa7, 0x2d, 0xb9, 0x3f, 0x3a, 0x70, 0xde, 0x84,
	0x51, 0xcd, 0x78, 0x1d, 0xa6, 0xba, 0xf9, 0x82, 0x91, 0xf7, 0x7b, 0xb8, 0x4b, 0x53, 0x5c, 0x72,
	0x91, 0x81, 0x3d, 0x30, 0xfc, 0x97, 0x43, 0xfc, 0x25, 0x27, 0xa8, 0xfc, 0x55, 0x18, 0xfb, 0x09,
	0x2e, 0xbe, 0x49, 0x6a, 0xe6, 0x4a, 0xfc, 0x98, 0x64, 0x4a, 0x2b, 0xb3, 0x5a, 0xaa, 0x22, 0xf7,
	0x0f, 0xbe, 0x9b, 0x07, 0x30, 0xa8, 0xf5, 0x19, 0xfc, 0x36, 0x72, 0x6a, 0xfe, 0x36, 0x72, 0x0c,
	0xdf, 0x46, 0xc5, 0x20, 0x7e, 0x94, 0x90, 0x14, 0x27, 0x77, 0x94, 0x09, 0x2e, 0x8b, 0x8b, 0xe3,
	0x66, 0xdd, 0xf0, 0xd9, 0x39, 0xb8, 0xe0, 0xfe, 0xc6, 0xbf, 0x04, 0x6f, 0xcb, 0x58, 0xaf, 0xa8,
	0xe4, 0x0f, 0x61, 0x96, 0x89, 0x5c, 0x77, 0x68, 0x16, 0x26, 0xdf, 0xb0, 0x23, 0x17, 0x4c, 0xb7,
	0xd6, 0xa7, 0x67, 0x4c, 0x9d, 0x9e, 0xb3, 0xb0, 0x54, 0x4e, 0x44, 0xe9, 0xdb, 0x8d, 0x3f, 0x8f,
	0xc3, 0x42, 0xf9, 0xc6, 0x43, 0xdc, 0x3a, 0x90, 0x00, 0xa3, 0x8e, 0xc6, 0x49, 0xd1, 0x35, 0x33,
	0x36, 0x0b, 0x4b, 0x6e, 0x34, 0x47, 0x50, 0x57, 0x27, 0x68, 0x1f, 0x8e, 0xb5, 0x75, 0x22, 0x8a,
	0x56, 0xcd, 0x2e, 0x2a, 0x68, 0x70, 0xe3, 0xc6, 0x88, 0x26, 0x6a, 0x64, 0x0a, 0x33, 0xa1, 0x42,
	0x36, 0x91, 0x05, 0xb9, 0x8d, 0xe4, 0x36, 0x56, 0x46, 0xd1, 0x57, 0x03, 0xb6, 0x60, 0x3a, 0x2c,
	0x98, 0x23, 0xba, 0x62, 0xb3, 0x36, 0x85, 0xba, 0x3a, 0x54, 0x59, 0x8d, 0x43, 0x00, 0xc2, 0x03,
	0xd6, 0x88, 0xac, 0xb6, 0x26, 0xa6, 0xda, 0xb8, 0x36, 0x5c, 0x5b, 0x0d, 0xd5, 0xd1, 0x98, 0x96,
	0x6d, 0x56, 0x2c, 0x3c, 0xd5, 0x36, 0x2b, 0x56, 0x5e, 0x27, 0x13, 0x2b, 0x38, 0x96, 0x3d, 0x31,
	0x13, 0xaf, 0xb3, 0x27, 0x66, 0xe4, 0x6c, 0x62, 0x2c, 0x43, 0x9d, 0x3e, 0xd9, 0xc6, 0xb2, 0x82,
	0xda, 0xd9, 0xc6, 0xb2, 0x8a, 0x98, 0xe9, 0x1b, 0x22, 0x3b, 0x18, 0x87, 0x6e, 0x88, 0x01, 0xfe,
	0x36, 0x7c, 0x43, 0x18, 0xa8, 0x59, 0x00, 0x53, 0x51, 0xfe, 0xde, 0x47, 0x97, 0xcd, 0xf6, 0x26,
	0xda, 0xd2, 0xb8, 0x32, 0x4c, 0x57, 0x0d, 0xf2, 0x09, 0x1c, 0x6e, 0xc9, 0x93, 0x00, 0x2d, 0x9b,
	0xcd, 0x06, 0x89, 0x5b, 0xe3, 0x52, 0xb5, 0xa6, 0xea, 0xfe, 0x53, 0x98, 0xcc, 0x97, 0xd1, 0xa5,
	0x4a, 0x4e, 0xa1, 0x05, 0xb8, 0x3c, 0x44, 0xb5, 0xb4, 0x8b, 0x77, 0x8b, 0x2b, 0x25, 0xdb, 0x2e,
	0x36, 0x5e, 0x67, 0xd9, 0x76, 0xb1, 0xf9, 0x82, 0x4a, 0xcc, 0x01, 0xd3, 0x2f, 0x81, 0x6c, 0x73,
	0x50, 0x71, 0x8d, 0x65, 0x9b, 0x83, 0xaa, 0xeb, 0x25, 0xc4, 0x99, 0x07, 0x6a, 0x0d, 0x5c, 0xe1,
	0xa0, 0x37, 0x2c, 0x5d, 0xa8, 0xbc, 0x88, 0x6a, 0xbc, 0x39, 0xba, 0x55, 0xa9, 0xca, 0x71, 0x71,
	0x43, 0x63, 0xab, 0xb2, 0xf1, 0x0e, 0xc9, 0x56, 0x65, 0xf3, 0x7d, 0x8f, 0xcc, 0xb5, 0x3d, 0x40,
	0x02, 0x6d, 0xb9, 0x56, 0x53, 0x5a, 0x5b, 0xae, 0xc3, 0x48, 0x26, 0xef, 0x74, 0xac, 0x93, 0x2c,
	0x5b, 0xa7, 0x2b, 0xf8, 0xa0, 0xad, 0xd3, 0x95, 0xf4, 0xad, 0x07, 0x47, 0x7d, 0x8d, 0x25, 0xa0,
	0xeb, 0x66, 0x2f, 0x76, 0x52, 0xd4, 0x58, 0x1d, 0xcd, 0x42, 0x09, 0xbb, 0x76, 0x0f, 0x96, 0x69,
	0xd2, 0x6e, 0xfa, 0xfc, 0xa3, 0x64, 0x17, 0x9b, 0xcd, 0xe3, 0x9c, 0x94, 0xac, 0x9d, 0x2a, 0xd3,
	0x14, 0xf9, 0x9f, 0x7d, 0xeb, 0x38, 0x3f, 0x3b, 0xce, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x37,
	0x9c, 0x64, 0x50, 0xe7, 0x19, 0x00, 0x00,
}
