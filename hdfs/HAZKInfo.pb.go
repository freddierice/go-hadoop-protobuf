// Code generated by protoc-gen-go.
// source: gopkg.in/freddierice/go-hproto.v1/hdfs/HAZKInfo.proto
// DO NOT EDIT!

package hproto_hdfs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ActiveNodeInfo struct {
	NameserviceId    *string `protobuf:"bytes,1,req,name=nameserviceId" json:"nameserviceId,omitempty"`
	NamenodeId       *string `protobuf:"bytes,2,req,name=namenodeId" json:"namenodeId,omitempty"`
	Hostname         *string `protobuf:"bytes,3,req,name=hostname" json:"hostname,omitempty"`
	Port             *int32  `protobuf:"varint,4,req,name=port" json:"port,omitempty"`
	ZkfcPort         *int32  `protobuf:"varint,5,req,name=zkfcPort" json:"zkfcPort,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ActiveNodeInfo) Reset()                    { *m = ActiveNodeInfo{} }
func (m *ActiveNodeInfo) String() string            { return proto.CompactTextString(m) }
func (*ActiveNodeInfo) ProtoMessage()               {}
func (*ActiveNodeInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *ActiveNodeInfo) GetNameserviceId() string {
	if m != nil && m.NameserviceId != nil {
		return *m.NameserviceId
	}
	return ""
}

func (m *ActiveNodeInfo) GetNamenodeId() string {
	if m != nil && m.NamenodeId != nil {
		return *m.NamenodeId
	}
	return ""
}

func (m *ActiveNodeInfo) GetHostname() string {
	if m != nil && m.Hostname != nil {
		return *m.Hostname
	}
	return ""
}

func (m *ActiveNodeInfo) GetPort() int32 {
	if m != nil && m.Port != nil {
		return *m.Port
	}
	return 0
}

func (m *ActiveNodeInfo) GetZkfcPort() int32 {
	if m != nil && m.ZkfcPort != nil {
		return *m.ZkfcPort
	}
	return 0
}

func init() {
	proto.RegisterType((*ActiveNodeInfo)(nil), "hproto.hdfs.ActiveNodeInfo")
}

func init() {
	proto.RegisterFile("gopkg.in/freddierice/go-hproto.v1/hdfs/HAZKInfo.proto", fileDescriptor1)
}

var fileDescriptor1 = []byte{
	// 222 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x54, 0x8f, 0x41, 0x4b, 0x03, 0x31,
	0x10, 0x85, 0x69, 0x6d, 0x41, 0x47, 0xec, 0x21, 0xa7, 0xc5, 0x83, 0x88, 0x78, 0xf0, 0xe2, 0x04,
	0x0f, 0xfe, 0x80, 0xed, 0xc9, 0x22, 0x48, 0xe9, 0xd1, 0xdb, 0xb2, 0x99, 0x4d, 0x42, 0x31, 0x13,
	0x92, 0xb0, 0x07, 0x7f, 0x8e, 0xbf, 0xd4, 0x4e, 0xb4, 0x65, 0x7b, 0xcb, 0xfb, 0xde, 0x4b, 0xf2,
	0x1e, 0xbc, 0x5a, 0x8e, 0x7b, 0x8b, 0x3e, 0xe8, 0x21, 0x91, 0x31, 0x9e, 0x92, 0xef, 0x49, 0x5b,
	0x7e, 0x76, 0x31, 0x71, 0x61, 0x1c, 0x5f, 0xb4, 0x33, 0x43, 0xd6, 0x6f, 0xed, 0xe7, 0xfb, 0x26,
	0x0c, 0x8c, 0x15, 0xab, 0xeb, 0x7f, 0x5b, 0xbc, 0x87, 0x9f, 0x19, 0xac, 0xda, 0xbe, 0xf8, 0x91,
	0x3e, 0xd8, 0x90, 0xa4, 0xd4, 0x23, 0xdc, 0x84, 0xee, 0x8b, 0x32, 0xa5, 0xf1, 0xf0, 0xde, 0xc6,
	0x34, 0xb3, 0xfb, 0xf9, 0xd3, 0xd5, 0xee, 0x1c, 0xaa, 0x3b, 0x00, 0x01, 0x41, 0x6e, 0x99, 0x66,
	0x5e, 0x23, 0x13, 0xa2, 0x6e, 0xe1, 0xd2, 0x71, 0x2e, 0x42, 0x9a, 0x8b, 0xea, 0x9e, 0xb4, 0x52,
	0xb0, 0x88, 0x9c, 0x4a, 0xb3, 0x38, 0xf0, 0xe5, 0xae, 0x9e, 0x25, 0xff, 0xbd, 0x1f, 0xfa, 0xad,
	0xf0, 0x65, 0xe5, 0x27, 0xbd, 0x6e, 0x41, 0x73, 0xb2, 0xd8, 0xc5, 0xae, 0x77, 0x84, 0x93, 0xfa,
	0x28, 0x7d, 0x28, 0xe1, 0xf1, 0x5f, 0x74, 0xdd, 0xdf, 0xc8, 0xf5, 0xea, 0x38, 0x7a, 0x2b, 0x32,
	0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xc3, 0xae, 0xbb, 0xc8, 0x2c, 0x01, 0x00, 0x00,
}
