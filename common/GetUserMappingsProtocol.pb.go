// Code generated by protoc-gen-go.
// source: gopkg.in/freddierice/go-hproto.v1/common/GetUserMappingsProtocol.proto
// DO NOT EDIT!

package hproto_common

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// *
//  Get groups for user request.
type GetGroupsForUserRequestProto struct {
	User             *string `protobuf:"bytes,1,req,name=user" json:"user,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GetGroupsForUserRequestProto) Reset()                    { *m = GetGroupsForUserRequestProto{} }
func (m *GetGroupsForUserRequestProto) String() string            { return proto.CompactTextString(m) }
func (*GetGroupsForUserRequestProto) ProtoMessage()               {}
func (*GetGroupsForUserRequestProto) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *GetGroupsForUserRequestProto) GetUser() string {
	if m != nil && m.User != nil {
		return *m.User
	}
	return ""
}

// *
// Response for get groups.
type GetGroupsForUserResponseProto struct {
	Groups           []string `protobuf:"bytes,1,rep,name=groups" json:"groups,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *GetGroupsForUserResponseProto) Reset()                    { *m = GetGroupsForUserResponseProto{} }
func (m *GetGroupsForUserResponseProto) String() string            { return proto.CompactTextString(m) }
func (*GetGroupsForUserResponseProto) ProtoMessage()               {}
func (*GetGroupsForUserResponseProto) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *GetGroupsForUserResponseProto) GetGroups() []string {
	if m != nil {
		return m.Groups
	}
	return nil
}

func init() {
	proto.RegisterType((*GetGroupsForUserRequestProto)(nil), "hproto.common.GetGroupsForUserRequestProto")
	proto.RegisterType((*GetGroupsForUserResponseProto)(nil), "hproto.common.GetGroupsForUserResponseProto")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for GetUserMappingsProtocolService service

type GetUserMappingsProtocolServiceClient interface {
	// *
	// Get the groups which are mapped to the given user.
	GetGroupsForUser(ctx context.Context, in *GetGroupsForUserRequestProto, opts ...grpc.CallOption) (*GetGroupsForUserResponseProto, error)
}

type getUserMappingsProtocolServiceClient struct {
	cc *grpc.ClientConn
}

func NewGetUserMappingsProtocolServiceClient(cc *grpc.ClientConn) GetUserMappingsProtocolServiceClient {
	return &getUserMappingsProtocolServiceClient{cc}
}

func (c *getUserMappingsProtocolServiceClient) GetGroupsForUser(ctx context.Context, in *GetGroupsForUserRequestProto, opts ...grpc.CallOption) (*GetGroupsForUserResponseProto, error) {
	out := new(GetGroupsForUserResponseProto)
	err := grpc.Invoke(ctx, "/hproto.common.GetUserMappingsProtocolService/getGroupsForUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GetUserMappingsProtocolService service

type GetUserMappingsProtocolServiceServer interface {
	// *
	// Get the groups which are mapped to the given user.
	GetGroupsForUser(context.Context, *GetGroupsForUserRequestProto) (*GetGroupsForUserResponseProto, error)
}

func RegisterGetUserMappingsProtocolServiceServer(s *grpc.Server, srv GetUserMappingsProtocolServiceServer) {
	s.RegisterService(&_GetUserMappingsProtocolService_serviceDesc, srv)
}

func _GetUserMappingsProtocolService_GetGroupsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupsForUserRequestProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetUserMappingsProtocolServiceServer).GetGroupsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hproto.common.GetUserMappingsProtocolService/GetGroupsForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetUserMappingsProtocolServiceServer).GetGroupsForUser(ctx, req.(*GetGroupsForUserRequestProto))
	}
	return interceptor(ctx, in, info, handler)
}

var _GetUserMappingsProtocolService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hproto.common.GetUserMappingsProtocolService",
	HandlerType: (*GetUserMappingsProtocolServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getGroupsForUser",
			Handler:    _GetUserMappingsProtocolService_GetGroupsForUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor1,
}

func init() {
	proto.RegisterFile("gopkg.in/freddierice/go-hproto.v1/common/GetUserMappingsProtocol.proto", fileDescriptor1)
}

var fileDescriptor1 = []byte{
	// 244 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x90, 0xcd, 0x4a, 0xc3, 0x40,
	0x10, 0x80, 0x59, 0x15, 0xc1, 0x05, 0x41, 0xf6, 0x20, 0x22, 0x46, 0xa4, 0x27, 0x41, 0x9d, 0x60,
	0x2f, 0xde, 0x8b, 0xb4, 0x27, 0x41, 0x2a, 0x3e, 0x40, 0x48, 0xc6, 0x4d, 0xb0, 0xc9, 0x8c, 0x33,
	0x9b, 0x3e, 0x83, 0x37, 0x5f, 0xc1, 0x47, 0x75, 0xbb, 0xe9, 0xc1, 0x1f, 0x6a, 0x4f, 0xc9, 0xee,
	0x7c, 0xdf, 0xf2, 0xed, 0xda, 0xa9, 0x27, 0x7e, 0xf5, 0xd0, 0x74, 0xf9, 0x8b, 0x60, 0x55, 0x35,
	0x28, 0x4d, 0x89, 0xb9, 0xa7, 0x9b, 0x9a, 0x85, 0x02, 0xc1, 0xf2, 0x36, 0x2f, 0xa9, 0x6d, 0xa9,
	0xcb, 0x67, 0x18, 0x9e, 0x15, 0xe5, 0xa1, 0x60, 0x6e, 0x3a, 0xaf, 0x8f, 0xab, 0x71, 0x49, 0x0b,
	0x48, 0x9c, 0x3b, 0x5c, 0xf3, 0x03, 0x3c, 0x1a, 0xdb, 0xb3, 0xc8, 0xcf, 0x84, 0x7a, 0xd6, 0x29,
	0xc9, 0x4a, 0x9c, 0xe3, 0x5b, 0x8f, 0x1a, 0x92, 0xe7, 0x9c, 0xdd, 0xeb, 0xe3, 0xde, 0x89, 0xb9,
	0xd8, 0xb9, 0x3c, 0x98, 0xa7, 0xff, 0xd1, 0x9d, 0xcd, 0xfe, 0x3a, 0xca, 0xd4, 0x29, 0x0e, 0xd2,
	0xb1, 0xdd, 0xf7, 0x69, 0x1a, 0xb5, 0xdd, 0xa8, 0xad, 0x57, 0xe3, 0x0f, 0x63, 0xcf, 0x37, 0xd4,
	0x3d, 0xa1, 0x2c, 0xe3, 0x85, 0x5c, 0x6b, 0x8f, 0xfc, 0xaf, 0xb3, 0xdd, 0x15, 0xfc, 0x68, 0x86,
	0xff, 0x82, 0x4f, 0xaf, 0xb7, 0xc2, 0xdf, 0x4a, 0x27, 0xf7, 0x36, 0x23, 0xf1, 0x50, 0x70, 0x51,
	0xd6, 0x08, 0x75, 0x51, 0x11, 0x31, 0x04, 0xa2, 0x85, 0x0e, 0xcf, 0x35, 0xc9, 0x36, 0xf4, 0xa6,
	0xaf, 0xbe, 0x1b, 0xf3, 0x69, 0xcc, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb6, 0x7c, 0x0a, 0xff,
	0x9c, 0x01, 0x00, 0x00,
}
